# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class Meta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMeta(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Meta()
        x.Init(buf, n + offset)
        return x

    # Meta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Meta
    def Puid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Meta
    def Tags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .TagMap import TagMap
            obj = TagMap()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Meta
    def Routing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Routing import Routing
            obj = Routing()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def MetaStart(builder): builder.StartObject(3)
def MetaAddPuid(builder, puid): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(puid), 0)
def MetaAddTags(builder, tags): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)
def MetaAddRouting(builder, routing): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(routing), 0)
def MetaEnd(builder): return builder.EndObject()
