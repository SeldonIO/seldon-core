// Code generated by protoc-gen-go. DO NOT EDIT.
// source: prediction.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	framework "github.com/tensorflow/tensorflow/tensorflow/go/core/framework"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Metric_MetricType int32

const (
	Metric_COUNTER Metric_MetricType = 0
	Metric_GAUGE   Metric_MetricType = 1
	Metric_TIMER   Metric_MetricType = 2
)

var Metric_MetricType_name = map[int32]string{
	0: "COUNTER",
	1: "GAUGE",
	2: "TIMER",
}

var Metric_MetricType_value = map[string]int32{
	"COUNTER": 0,
	"GAUGE":   1,
	"TIMER":   2,
}

func (x Metric_MetricType) String() string {
	return proto.EnumName(Metric_MetricType_name, int32(x))
}

func (Metric_MetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{4, 0}
}

type Status_StatusFlag int32

const (
	Status_SUCCESS Status_StatusFlag = 0
	Status_FAILURE Status_StatusFlag = 1
)

var Status_StatusFlag_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILURE",
}

var Status_StatusFlag_value = map[string]int32{
	"SUCCESS": 0,
	"FAILURE": 1,
}

func (x Status_StatusFlag) String() string {
	return proto.EnumName(Status_StatusFlag_name, int32(x))
}

func (Status_StatusFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{6, 0}
}

type SeldonMessage struct {
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Meta   *Meta   `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// Types that are valid to be assigned to DataOneof:
	//	*SeldonMessage_Data
	//	*SeldonMessage_BinData
	//	*SeldonMessage_StrData
	//	*SeldonMessage_JsonData
	//	*SeldonMessage_CustomData
	DataOneof            isSeldonMessage_DataOneof `protobuf_oneof:"data_oneof"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *SeldonMessage) Reset()         { *m = SeldonMessage{} }
func (m *SeldonMessage) String() string { return proto.CompactTextString(m) }
func (*SeldonMessage) ProtoMessage()    {}
func (*SeldonMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{0}
}

func (m *SeldonMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeldonMessage.Unmarshal(m, b)
}
func (m *SeldonMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeldonMessage.Marshal(b, m, deterministic)
}
func (m *SeldonMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeldonMessage.Merge(m, src)
}
func (m *SeldonMessage) XXX_Size() int {
	return xxx_messageInfo_SeldonMessage.Size(m)
}
func (m *SeldonMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SeldonMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SeldonMessage proto.InternalMessageInfo

func (m *SeldonMessage) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SeldonMessage) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type isSeldonMessage_DataOneof interface {
	isSeldonMessage_DataOneof()
}

type SeldonMessage_Data struct {
	Data *DefaultData `protobuf:"bytes,3,opt,name=data,proto3,oneof"`
}

type SeldonMessage_BinData struct {
	BinData []byte `protobuf:"bytes,4,opt,name=binData,proto3,oneof"`
}

type SeldonMessage_StrData struct {
	StrData string `protobuf:"bytes,5,opt,name=strData,proto3,oneof"`
}

type SeldonMessage_JsonData struct {
	JsonData *_struct.Value `protobuf:"bytes,6,opt,name=jsonData,proto3,oneof"`
}

type SeldonMessage_CustomData struct {
	CustomData *any.Any `protobuf:"bytes,7,opt,name=customData,proto3,oneof"`
}

func (*SeldonMessage_Data) isSeldonMessage_DataOneof() {}

func (*SeldonMessage_BinData) isSeldonMessage_DataOneof() {}

func (*SeldonMessage_StrData) isSeldonMessage_DataOneof() {}

func (*SeldonMessage_JsonData) isSeldonMessage_DataOneof() {}

func (*SeldonMessage_CustomData) isSeldonMessage_DataOneof() {}

func (m *SeldonMessage) GetDataOneof() isSeldonMessage_DataOneof {
	if m != nil {
		return m.DataOneof
	}
	return nil
}

func (m *SeldonMessage) GetData() *DefaultData {
	if x, ok := m.GetDataOneof().(*SeldonMessage_Data); ok {
		return x.Data
	}
	return nil
}

func (m *SeldonMessage) GetBinData() []byte {
	if x, ok := m.GetDataOneof().(*SeldonMessage_BinData); ok {
		return x.BinData
	}
	return nil
}

func (m *SeldonMessage) GetStrData() string {
	if x, ok := m.GetDataOneof().(*SeldonMessage_StrData); ok {
		return x.StrData
	}
	return ""
}

func (m *SeldonMessage) GetJsonData() *_struct.Value {
	if x, ok := m.GetDataOneof().(*SeldonMessage_JsonData); ok {
		return x.JsonData
	}
	return nil
}

func (m *SeldonMessage) GetCustomData() *any.Any {
	if x, ok := m.GetDataOneof().(*SeldonMessage_CustomData); ok {
		return x.CustomData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SeldonMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SeldonMessage_Data)(nil),
		(*SeldonMessage_BinData)(nil),
		(*SeldonMessage_StrData)(nil),
		(*SeldonMessage_JsonData)(nil),
		(*SeldonMessage_CustomData)(nil),
	}
}

type DefaultData struct {
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	// Types that are valid to be assigned to DataOneof:
	//	*DefaultData_Tensor
	//	*DefaultData_Ndarray
	//	*DefaultData_Tftensor
	DataOneof            isDefaultData_DataOneof `protobuf_oneof:"data_oneof"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DefaultData) Reset()         { *m = DefaultData{} }
func (m *DefaultData) String() string { return proto.CompactTextString(m) }
func (*DefaultData) ProtoMessage()    {}
func (*DefaultData) Descriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{1}
}

func (m *DefaultData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DefaultData.Unmarshal(m, b)
}
func (m *DefaultData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DefaultData.Marshal(b, m, deterministic)
}
func (m *DefaultData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultData.Merge(m, src)
}
func (m *DefaultData) XXX_Size() int {
	return xxx_messageInfo_DefaultData.Size(m)
}
func (m *DefaultData) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultData.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultData proto.InternalMessageInfo

func (m *DefaultData) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type isDefaultData_DataOneof interface {
	isDefaultData_DataOneof()
}

type DefaultData_Tensor struct {
	Tensor *Tensor `protobuf:"bytes,2,opt,name=tensor,proto3,oneof"`
}

type DefaultData_Ndarray struct {
	Ndarray *_struct.ListValue `protobuf:"bytes,3,opt,name=ndarray,proto3,oneof"`
}

type DefaultData_Tftensor struct {
	Tftensor *framework.TensorProto `protobuf:"bytes,4,opt,name=tftensor,proto3,oneof"`
}

func (*DefaultData_Tensor) isDefaultData_DataOneof() {}

func (*DefaultData_Ndarray) isDefaultData_DataOneof() {}

func (*DefaultData_Tftensor) isDefaultData_DataOneof() {}

func (m *DefaultData) GetDataOneof() isDefaultData_DataOneof {
	if m != nil {
		return m.DataOneof
	}
	return nil
}

func (m *DefaultData) GetTensor() *Tensor {
	if x, ok := m.GetDataOneof().(*DefaultData_Tensor); ok {
		return x.Tensor
	}
	return nil
}

func (m *DefaultData) GetNdarray() *_struct.ListValue {
	if x, ok := m.GetDataOneof().(*DefaultData_Ndarray); ok {
		return x.Ndarray
	}
	return nil
}

func (m *DefaultData) GetTftensor() *framework.TensorProto {
	if x, ok := m.GetDataOneof().(*DefaultData_Tftensor); ok {
		return x.Tftensor
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DefaultData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DefaultData_Tensor)(nil),
		(*DefaultData_Ndarray)(nil),
		(*DefaultData_Tftensor)(nil),
	}
}

type Tensor struct {
	Shape                []int32   `protobuf:"varint,1,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	Values               []float64 `protobuf:"fixed64,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Tensor) Reset()         { *m = Tensor{} }
func (m *Tensor) String() string { return proto.CompactTextString(m) }
func (*Tensor) ProtoMessage()    {}
func (*Tensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{2}
}

func (m *Tensor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tensor.Unmarshal(m, b)
}
func (m *Tensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tensor.Marshal(b, m, deterministic)
}
func (m *Tensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tensor.Merge(m, src)
}
func (m *Tensor) XXX_Size() int {
	return xxx_messageInfo_Tensor.Size(m)
}
func (m *Tensor) XXX_DiscardUnknown() {
	xxx_messageInfo_Tensor.DiscardUnknown(m)
}

var xxx_messageInfo_Tensor proto.InternalMessageInfo

func (m *Tensor) GetShape() []int32 {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *Tensor) GetValues() []float64 {
	if m != nil {
		return m.Values
	}
	return nil
}

type Meta struct {
	Puid                 string                    `protobuf:"bytes,1,opt,name=puid,proto3" json:"puid,omitempty"`
	Tags                 map[string]*_struct.Value `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Routing              map[string]int32          `protobuf:"bytes,3,rep,name=routing,proto3" json:"routing,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RequestPath          map[string]string         `protobuf:"bytes,4,rep,name=requestPath,proto3" json:"requestPath,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metrics              []*Metric                 `protobuf:"bytes,5,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Meta) Reset()         { *m = Meta{} }
func (m *Meta) String() string { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()    {}
func (*Meta) Descriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{3}
}

func (m *Meta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Meta.Unmarshal(m, b)
}
func (m *Meta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Meta.Marshal(b, m, deterministic)
}
func (m *Meta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Meta.Merge(m, src)
}
func (m *Meta) XXX_Size() int {
	return xxx_messageInfo_Meta.Size(m)
}
func (m *Meta) XXX_DiscardUnknown() {
	xxx_messageInfo_Meta.DiscardUnknown(m)
}

var xxx_messageInfo_Meta proto.InternalMessageInfo

func (m *Meta) GetPuid() string {
	if m != nil {
		return m.Puid
	}
	return ""
}

func (m *Meta) GetTags() map[string]*_struct.Value {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Meta) GetRouting() map[string]int32 {
	if m != nil {
		return m.Routing
	}
	return nil
}

func (m *Meta) GetRequestPath() map[string]string {
	if m != nil {
		return m.RequestPath
	}
	return nil
}

func (m *Meta) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Metric struct {
	Key                  string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Type                 Metric_MetricType `protobuf:"varint,2,opt,name=type,proto3,enum=seldon.protos.Metric_MetricType" json:"type,omitempty"`
	Value                float32           `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
	Tags                 map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{4}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Metric) GetType() Metric_MetricType {
	if m != nil {
		return m.Type
	}
	return Metric_COUNTER
}

func (m *Metric) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Metric) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type SeldonMessageList struct {
	SeldonMessages       []*SeldonMessage `protobuf:"bytes,1,rep,name=seldonMessages,proto3" json:"seldonMessages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SeldonMessageList) Reset()         { *m = SeldonMessageList{} }
func (m *SeldonMessageList) String() string { return proto.CompactTextString(m) }
func (*SeldonMessageList) ProtoMessage()    {}
func (*SeldonMessageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{5}
}

func (m *SeldonMessageList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeldonMessageList.Unmarshal(m, b)
}
func (m *SeldonMessageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeldonMessageList.Marshal(b, m, deterministic)
}
func (m *SeldonMessageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeldonMessageList.Merge(m, src)
}
func (m *SeldonMessageList) XXX_Size() int {
	return xxx_messageInfo_SeldonMessageList.Size(m)
}
func (m *SeldonMessageList) XXX_DiscardUnknown() {
	xxx_messageInfo_SeldonMessageList.DiscardUnknown(m)
}

var xxx_messageInfo_SeldonMessageList proto.InternalMessageInfo

func (m *SeldonMessageList) GetSeldonMessages() []*SeldonMessage {
	if m != nil {
		return m.SeldonMessages
	}
	return nil
}

type Status struct {
	Code                 int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Info                 string            `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Reason               string            `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Status               Status_StatusFlag `protobuf:"varint,4,opt,name=status,proto3,enum=seldon.protos.Status_StatusFlag" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{6}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *Status) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Status) GetStatus() Status_StatusFlag {
	if m != nil {
		return m.Status
	}
	return Status_SUCCESS
}

type Feedback struct {
	Request              *SeldonMessage `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response             *SeldonMessage `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	Reward               float32        `protobuf:"fixed32,3,opt,name=reward,proto3" json:"reward,omitempty"`
	Truth                *SeldonMessage `protobuf:"bytes,4,opt,name=truth,proto3" json:"truth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Feedback) Reset()         { *m = Feedback{} }
func (m *Feedback) String() string { return proto.CompactTextString(m) }
func (*Feedback) ProtoMessage()    {}
func (*Feedback) Descriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{7}
}

func (m *Feedback) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feedback.Unmarshal(m, b)
}
func (m *Feedback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feedback.Marshal(b, m, deterministic)
}
func (m *Feedback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feedback.Merge(m, src)
}
func (m *Feedback) XXX_Size() int {
	return xxx_messageInfo_Feedback.Size(m)
}
func (m *Feedback) XXX_DiscardUnknown() {
	xxx_messageInfo_Feedback.DiscardUnknown(m)
}

var xxx_messageInfo_Feedback proto.InternalMessageInfo

func (m *Feedback) GetRequest() *SeldonMessage {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Feedback) GetResponse() *SeldonMessage {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *Feedback) GetReward() float32 {
	if m != nil {
		return m.Reward
	}
	return 0
}

func (m *Feedback) GetTruth() *SeldonMessage {
	if m != nil {
		return m.Truth
	}
	return nil
}

type RequestResponse struct {
	Request              *SeldonMessage `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response             *SeldonMessage `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RequestResponse) Reset()         { *m = RequestResponse{} }
func (m *RequestResponse) String() string { return proto.CompactTextString(m) }
func (*RequestResponse) ProtoMessage()    {}
func (*RequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{8}
}

func (m *RequestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestResponse.Unmarshal(m, b)
}
func (m *RequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestResponse.Marshal(b, m, deterministic)
}
func (m *RequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestResponse.Merge(m, src)
}
func (m *RequestResponse) XXX_Size() int {
	return xxx_messageInfo_RequestResponse.Size(m)
}
func (m *RequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequestResponse proto.InternalMessageInfo

func (m *RequestResponse) GetRequest() *SeldonMessage {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RequestResponse) GetResponse() *SeldonMessage {
	if m != nil {
		return m.Response
	}
	return nil
}

type SeldonModelMetadataRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeldonModelMetadataRequest) Reset()         { *m = SeldonModelMetadataRequest{} }
func (m *SeldonModelMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*SeldonModelMetadataRequest) ProtoMessage()    {}
func (*SeldonModelMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{9}
}

func (m *SeldonModelMetadataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeldonModelMetadataRequest.Unmarshal(m, b)
}
func (m *SeldonModelMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeldonModelMetadataRequest.Marshal(b, m, deterministic)
}
func (m *SeldonModelMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeldonModelMetadataRequest.Merge(m, src)
}
func (m *SeldonModelMetadataRequest) XXX_Size() int {
	return xxx_messageInfo_SeldonModelMetadataRequest.Size(m)
}
func (m *SeldonModelMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SeldonModelMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SeldonModelMetadataRequest proto.InternalMessageInfo

func (m *SeldonModelMetadataRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SeldonMessageMetadata struct {
	// SeldonMessage Metadata fields
	Messagetype string         `protobuf:"bytes,1,opt,name=messagetype,proto3" json:"messagetype,omitempty"`
	Schema      *_struct.Value `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// KFserving tesnor metadata fields
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Datatype             string   `protobuf:"bytes,4,opt,name=datatype,proto3" json:"datatype,omitempty"`
	Shape                []int64  `protobuf:"varint,5,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SeldonMessageMetadata) Reset()         { *m = SeldonMessageMetadata{} }
func (m *SeldonMessageMetadata) String() string { return proto.CompactTextString(m) }
func (*SeldonMessageMetadata) ProtoMessage()    {}
func (*SeldonMessageMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{10}
}

func (m *SeldonMessageMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeldonMessageMetadata.Unmarshal(m, b)
}
func (m *SeldonMessageMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeldonMessageMetadata.Marshal(b, m, deterministic)
}
func (m *SeldonMessageMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeldonMessageMetadata.Merge(m, src)
}
func (m *SeldonMessageMetadata) XXX_Size() int {
	return xxx_messageInfo_SeldonMessageMetadata.Size(m)
}
func (m *SeldonMessageMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SeldonMessageMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SeldonMessageMetadata proto.InternalMessageInfo

func (m *SeldonMessageMetadata) GetMessagetype() string {
	if m != nil {
		return m.Messagetype
	}
	return ""
}

func (m *SeldonMessageMetadata) GetSchema() *_struct.Value {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *SeldonMessageMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SeldonMessageMetadata) GetDatatype() string {
	if m != nil {
		return m.Datatype
	}
	return ""
}

func (m *SeldonMessageMetadata) GetShape() []int64 {
	if m != nil {
		return m.Shape
	}
	return nil
}

type SeldonModelMetadata struct {
	Name                 string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Versions             []string                 `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	Platform             string                   `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Inputs               []*SeldonMessageMetadata `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs              []*SeldonMessageMetadata `protobuf:"bytes,5,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Custom               map[string]string        `protobuf:"bytes,6,rep,name=custom,proto3" json:"custom,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *SeldonModelMetadata) Reset()         { *m = SeldonModelMetadata{} }
func (m *SeldonModelMetadata) String() string { return proto.CompactTextString(m) }
func (*SeldonModelMetadata) ProtoMessage()    {}
func (*SeldonModelMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{11}
}

func (m *SeldonModelMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeldonModelMetadata.Unmarshal(m, b)
}
func (m *SeldonModelMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeldonModelMetadata.Marshal(b, m, deterministic)
}
func (m *SeldonModelMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeldonModelMetadata.Merge(m, src)
}
func (m *SeldonModelMetadata) XXX_Size() int {
	return xxx_messageInfo_SeldonModelMetadata.Size(m)
}
func (m *SeldonModelMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SeldonModelMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SeldonModelMetadata proto.InternalMessageInfo

func (m *SeldonModelMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SeldonModelMetadata) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *SeldonModelMetadata) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *SeldonModelMetadata) GetInputs() []*SeldonMessageMetadata {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *SeldonModelMetadata) GetOutputs() []*SeldonMessageMetadata {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *SeldonModelMetadata) GetCustom() map[string]string {
	if m != nil {
		return m.Custom
	}
	return nil
}

type SeldonGraphMetadata struct {
	Name                 string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Models               map[string]*SeldonModelMetadata `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Inputs               []*SeldonMessageMetadata        `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs              []*SeldonMessageMetadata        `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *SeldonGraphMetadata) Reset()         { *m = SeldonGraphMetadata{} }
func (m *SeldonGraphMetadata) String() string { return proto.CompactTextString(m) }
func (*SeldonGraphMetadata) ProtoMessage()    {}
func (*SeldonGraphMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_430b55197713f541, []int{12}
}

func (m *SeldonGraphMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SeldonGraphMetadata.Unmarshal(m, b)
}
func (m *SeldonGraphMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SeldonGraphMetadata.Marshal(b, m, deterministic)
}
func (m *SeldonGraphMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeldonGraphMetadata.Merge(m, src)
}
func (m *SeldonGraphMetadata) XXX_Size() int {
	return xxx_messageInfo_SeldonGraphMetadata.Size(m)
}
func (m *SeldonGraphMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SeldonGraphMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SeldonGraphMetadata proto.InternalMessageInfo

func (m *SeldonGraphMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SeldonGraphMetadata) GetModels() map[string]*SeldonModelMetadata {
	if m != nil {
		return m.Models
	}
	return nil
}

func (m *SeldonGraphMetadata) GetInputs() []*SeldonMessageMetadata {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *SeldonGraphMetadata) GetOutputs() []*SeldonMessageMetadata {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func init() {
	proto.RegisterEnum("seldon.protos.Metric_MetricType", Metric_MetricType_name, Metric_MetricType_value)
	proto.RegisterEnum("seldon.protos.Status_StatusFlag", Status_StatusFlag_name, Status_StatusFlag_value)
	proto.RegisterType((*SeldonMessage)(nil), "seldon.protos.SeldonMessage")
	proto.RegisterType((*DefaultData)(nil), "seldon.protos.DefaultData")
	proto.RegisterType((*Tensor)(nil), "seldon.protos.Tensor")
	proto.RegisterType((*Meta)(nil), "seldon.protos.Meta")
	proto.RegisterMapType((map[string]string)(nil), "seldon.protos.Meta.RequestPathEntry")
	proto.RegisterMapType((map[string]int32)(nil), "seldon.protos.Meta.RoutingEntry")
	proto.RegisterMapType((map[string]*_struct.Value)(nil), "seldon.protos.Meta.TagsEntry")
	proto.RegisterType((*Metric)(nil), "seldon.protos.Metric")
	proto.RegisterMapType((map[string]string)(nil), "seldon.protos.Metric.TagsEntry")
	proto.RegisterType((*SeldonMessageList)(nil), "seldon.protos.SeldonMessageList")
	proto.RegisterType((*Status)(nil), "seldon.protos.Status")
	proto.RegisterType((*Feedback)(nil), "seldon.protos.Feedback")
	proto.RegisterType((*RequestResponse)(nil), "seldon.protos.RequestResponse")
	proto.RegisterType((*SeldonModelMetadataRequest)(nil), "seldon.protos.SeldonModelMetadataRequest")
	proto.RegisterType((*SeldonMessageMetadata)(nil), "seldon.protos.SeldonMessageMetadata")
	proto.RegisterType((*SeldonModelMetadata)(nil), "seldon.protos.SeldonModelMetadata")
	proto.RegisterMapType((map[string]string)(nil), "seldon.protos.SeldonModelMetadata.CustomEntry")
	proto.RegisterType((*SeldonGraphMetadata)(nil), "seldon.protos.SeldonGraphMetadata")
	proto.RegisterMapType((map[string]*SeldonModelMetadata)(nil), "seldon.protos.SeldonGraphMetadata.ModelsEntry")
}

func init() {
	proto.RegisterFile("prediction.proto", fileDescriptor_430b55197713f541)
}

var fileDescriptor_430b55197713f541 = []byte{
	// 1363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x6d, 0x6f, 0x1b, 0xc5,
	0x13, 0xf7, 0xf9, 0xe1, 0x1c, 0x8f, 0x93, 0xd6, 0xdd, 0x3e, 0xf9, 0x7f, 0xff, 0x22, 0xa2, 0x13,
	0x2a, 0x41, 0xa2, 0xbe, 0xe2, 0x96, 0x12, 0x2a, 0x54, 0x29, 0x49, 0x9d, 0xa4, 0x52, 0xd3, 0x44,
	0x97, 0x04, 0xa9, 0x48, 0x15, 0xac, 0xed, 0xb5, 0x73, 0xc4, 0xbe, 0x3d, 0x76, 0xf7, 0x1a, 0xf9,
	0x35, 0xe2, 0x05, 0xdf, 0x80, 0xcf, 0xc0, 0x1b, 0xbe, 0x06, 0x12, 0x02, 0xc4, 0x57, 0x80, 0x2f,
	0x82, 0xf6, 0xe1, 0x2e, 0x67, 0xf7, 0xea, 0xb4, 0x24, 0x42, 0xbc, 0xca, 0xee, 0xcc, 0xef, 0x37,
	0x3b, 0x33, 0x3b, 0x33, 0xeb, 0x0b, 0x34, 0x22, 0x46, 0xfa, 0x41, 0x4f, 0x04, 0x34, 0x6c, 0x45,
	0x8c, 0x0a, 0x8a, 0x96, 0x38, 0x19, 0xf5, 0x93, 0x1d, 0x77, 0xfe, 0x37, 0xa4, 0x74, 0x38, 0x22,
	0x9e, 0xda, 0x76, 0xe3, 0x81, 0x87, 0xc3, 0x89, 0xd6, 0x39, 0xb7, 0x66, 0x55, 0x5c, 0xb0, 0xb8,
	0x27, 0x8c, 0xf6, 0xff, 0xb3, 0x5a, 0x32, 0x8e, 0x44, 0x42, 0xbd, 0x2d, 0x48, 0xc8, 0x29, 0x1b,
	0x8c, 0xe8, 0x89, 0xd7, 0xa3, 0x8c, 0x78, 0x03, 0x86, 0xc7, 0xe4, 0x84, 0xb2, 0x63, 0x4f, 0x6b,
	0x34, 0xce, 0xfd, 0xb5, 0x08, 0x4b, 0xfb, 0xca, 0x9f, 0x1d, 0xc2, 0x39, 0x1e, 0x12, 0x74, 0x07,
	0x6c, 0x2e, 0xb0, 0x88, 0x79, 0xd3, 0x5a, 0xb6, 0x56, 0xea, 0xed, 0xeb, 0xad, 0x29, 0x7f, 0x5b,
	0xfb, 0x4a, 0xe9, 0x1b, 0x10, 0x7a, 0x1f, 0xca, 0x63, 0x22, 0x70, 0xb3, 0xa8, 0xc0, 0x57, 0x67,
	0xc0, 0x3b, 0x44, 0x60, 0x5f, 0x01, 0xd0, 0x5d, 0x28, 0xf7, 0xb1, 0xc0, 0xcd, 0x92, 0x02, 0x3a,
	0x33, 0xc0, 0xc7, 0x64, 0x80, 0xe3, 0x91, 0x78, 0x8c, 0x05, 0xde, 0x2e, 0xf8, 0x0a, 0x89, 0x1c,
	0xa8, 0x76, 0x83, 0x50, 0x8a, 0x9a, 0xe5, 0x65, 0x6b, 0x65, 0x71, 0xbb, 0xe0, 0x27, 0x02, 0xa9,
	0xe3, 0x82, 0x29, 0x5d, 0x65, 0xd9, 0x5a, 0xa9, 0x49, 0x9d, 0x11, 0xa0, 0xfb, 0xb0, 0xf0, 0x35,
	0xa7, 0x9a, 0x68, 0xab, 0xd3, 0x6e, 0xb4, 0x74, 0xae, 0x5a, 0x49, 0xae, 0x5a, 0x9f, 0xe3, 0x51,
	0x4c, 0xb6, 0x0b, 0x7e, 0x8a, 0x44, 0x0f, 0x00, 0x7a, 0x31, 0x17, 0x74, 0xac, 0x78, 0x55, 0xc5,
	0xbb, 0xf6, 0x0a, 0x6f, 0x2d, 0x9c, 0x6c, 0x17, 0xfc, 0x0c, 0x72, 0x7d, 0x11, 0x40, 0x7a, 0xfb,
	0x25, 0x0d, 0x09, 0x1d, 0xb8, 0x7f, 0x58, 0x50, 0xcf, 0xc4, 0x82, 0xae, 0x41, 0x25, 0xc4, 0x63,
	0x22, 0x93, 0x59, 0x5a, 0xa9, 0xf9, 0x7a, 0x83, 0x3c, 0xb0, 0xf5, 0x2d, 0x98, 0xb4, 0xcd, 0xe6,
	0xf8, 0x40, 0x29, 0xb7, 0x0b, 0xbe, 0x81, 0xa1, 0x07, 0x50, 0x0d, 0xfb, 0x98, 0x31, 0x3c, 0x49,
	0xf3, 0x37, 0xeb, 0xd9, 0xd3, 0x80, 0x8b, 0x24, 0xaa, 0x04, 0x8c, 0x3e, 0x86, 0x05, 0x31, 0x30,
	0x47, 0x95, 0x15, 0xf1, 0x66, 0xeb, 0xb4, 0x32, 0xcc, 0x39, 0x7b, 0xd2, 0x84, 0xcc, 0x45, 0x02,
	0x9d, 0x89, 0xe9, 0x11, 0xd8, 0x1a, 0x88, 0x9a, 0x50, 0xe1, 0x47, 0x38, 0x22, 0x2a, 0x9a, 0xca,
	0x7a, 0xb1, 0x61, 0xf9, 0x5a, 0x80, 0x1c, 0xb0, 0x5f, 0xca, 0xc3, 0x79, 0xb3, 0xb8, 0x5c, 0x5a,
	0xb1, 0x94, 0xca, 0x48, 0xdc, 0xdf, 0x4b, 0x50, 0x96, 0x85, 0x80, 0x10, 0x94, 0xa3, 0x38, 0xe8,
	0xab, 0xc2, 0xaa, 0xf9, 0x6a, 0x8d, 0x3e, 0x82, 0xb2, 0xc0, 0x43, 0x4d, 0xab, 0xb7, 0xdf, 0xc9,
	0xa9, 0x9f, 0xd6, 0x01, 0x1e, 0xf2, 0x4e, 0x28, 0xd8, 0xc4, 0x57, 0x50, 0xf4, 0x10, 0xaa, 0x8c,
	0xc6, 0x22, 0x08, 0x87, 0xcd, 0x92, 0x62, 0x2d, 0xe7, 0xb1, 0x7c, 0x0d, 0xd1, 0xc4, 0x84, 0x80,
	0x36, 0xa1, 0xce, 0xc8, 0x37, 0x31, 0xe1, 0x62, 0x0f, 0x8b, 0xa3, 0x66, 0x59, 0xf1, 0xdf, 0xcb,
	0xe5, 0x9f, 0xc2, 0xb4, 0x8d, 0x2c, 0x11, 0x79, 0x50, 0x1d, 0x13, 0xc1, 0x82, 0x1e, 0x6f, 0x56,
	0x94, 0x8d, 0xeb, 0xaf, 0xda, 0x60, 0x41, 0xcf, 0x4f, 0x50, 0xce, 0x2e, 0xd4, 0xd2, 0x38, 0x50,
	0x03, 0x4a, 0xc7, 0x64, 0x62, 0xf2, 0x20, 0x97, 0xe8, 0x43, 0xa8, 0xa8, 0x6c, 0x99, 0x82, 0x78,
	0x4d, 0xc1, 0xfa, 0x1a, 0xf4, 0xb0, 0xb8, 0x6a, 0x39, 0x0f, 0x61, 0x31, 0x1b, 0x62, 0x8e, 0xcd,
	0x6b, 0x59, 0x9b, 0x95, 0x2c, 0xf7, 0x11, 0x34, 0x66, 0xc3, 0x3b, 0x8b, 0x5f, 0xcb, 0xf0, 0xdd,
	0xef, 0x8a, 0x60, 0xeb, 0x00, 0x73, 0x68, 0xf7, 0xa1, 0x2c, 0x26, 0x91, 0x66, 0x5d, 0xca, 0xbb,
	0x1b, 0x16, 0xf4, 0xcc, 0x9f, 0x83, 0x49, 0x44, 0x7c, 0x85, 0x3e, 0x3d, 0x4c, 0xd6, 0x77, 0xd1,
	0x1c, 0x86, 0xee, 0x99, 0xea, 0xd0, 0xf7, 0xf4, 0x6e, 0xbe, 0xad, 0x99, 0xfa, 0x70, 0x3e, 0x99,
	0x9f, 0xea, 0xd7, 0x87, 0xe5, 0x01, 0x9c, 0xfa, 0x85, 0xea, 0x50, 0xdd, 0xd8, 0x3d, 0x7c, 0x76,
	0xd0, 0xf1, 0x1b, 0x05, 0x54, 0x83, 0xca, 0xd6, 0xda, 0xe1, 0x56, 0xa7, 0x61, 0xc9, 0xe5, 0xc1,
	0x93, 0x9d, 0x8e, 0xdf, 0x28, 0xba, 0xcf, 0xe1, 0xca, 0xd4, 0xf0, 0x94, 0x3d, 0x88, 0x1e, 0xc3,
	0x25, 0x9e, 0x15, 0xea, 0xde, 0xaf, 0xb7, 0x6f, 0xcd, 0x0e, 0xd2, 0x2c, 0xc8, 0x9f, 0xe1, 0xb8,
	0x3f, 0x5a, 0x60, 0xeb, 0x51, 0x2b, 0xdb, 0xa6, 0x47, 0xfb, 0x44, 0xc5, 0x50, 0xf1, 0xd5, 0x5a,
	0xca, 0x82, 0x70, 0x40, 0x4d, 0x0c, 0x6a, 0x8d, 0x6e, 0x80, 0xcd, 0x08, 0xe6, 0x34, 0x54, 0x39,
	0xac, 0xf9, 0x66, 0x87, 0x56, 0xd3, 0x89, 0x5e, 0xce, 0xbd, 0x12, 0x7d, 0x8c, 0xf9, 0xb3, 0x39,
	0xc2, 0xc3, 0x64, 0xb8, 0xbb, 0xb7, 0x01, 0x4e, 0xa5, 0x32, 0x21, 0xfb, 0x87, 0x1b, 0x1b, 0x9d,
	0xfd, 0xfd, 0x46, 0x41, 0x6e, 0x36, 0xd7, 0x9e, 0x3c, 0x3d, 0xf4, 0x3b, 0x0d, 0xcb, 0xfd, 0xd9,
	0x82, 0x85, 0x4d, 0x42, 0xfa, 0x5d, 0xdc, 0x3b, 0x96, 0xb3, 0xca, 0x74, 0x8a, 0x79, 0x41, 0xe6,
	0x07, 0x9e, 0x80, 0xd1, 0x2a, 0x2c, 0x30, 0xc2, 0x23, 0x1a, 0xf2, 0xa4, 0x0b, 0xe6, 0x13, 0x53,
	0xb4, 0x0e, 0xfc, 0x04, 0xb3, 0xbe, 0x29, 0x1e, 0xb3, 0x43, 0x6d, 0xa8, 0x08, 0x16, 0xab, 0x36,
	0x3f, 0xdb, 0x9c, 0x86, 0xba, 0xdf, 0x5a, 0x70, 0xd9, 0xf4, 0x86, 0x9f, 0xd8, 0xff, 0xd7, 0x23,
	0x72, 0xef, 0x82, 0x63, 0x54, 0xb4, 0x4f, 0x46, 0x72, 0x1e, 0xc9, 0x79, 0x6c, 0xfc, 0x92, 0x97,
	0x2f, 0xdf, 0x91, 0x64, 0x8e, 0xca, 0xb5, 0xfb, 0x93, 0x05, 0xd7, 0xa7, 0xac, 0x25, 0x24, 0xb4,
	0x0c, 0xf5, 0xb1, 0x16, 0xa9, 0xb6, 0xd4, 0xa4, 0xac, 0x08, 0xb5, 0xc0, 0xe6, 0xbd, 0x23, 0x32,
	0xc6, 0x67, 0x4c, 0x1f, 0x83, 0x4a, 0xcf, 0x2f, 0x9d, 0x9e, 0x8f, 0x1c, 0x58, 0x90, 0xa7, 0xa9,
	0x23, 0xca, 0x4a, 0x9e, 0xee, 0x65, 0xc7, 0xe9, 0x67, 0x43, 0x8e, 0xca, 0x92, 0x79, 0x32, 0xdc,
	0x3f, 0x8b, 0x70, 0x35, 0x27, 0xc8, 0xbc, 0xe8, 0xa4, 0xf5, 0x97, 0x84, 0xf1, 0x80, 0x86, 0xfa,
	0xa5, 0xa8, 0xf9, 0xe9, 0x5e, 0xea, 0xa2, 0x11, 0x16, 0x03, 0xca, 0xc6, 0xc6, 0xa3, 0x74, 0x8f,
	0x3e, 0x03, 0x3b, 0x08, 0xa3, 0x58, 0xf0, 0xd7, 0x4c, 0xfa, 0xdc, 0x8c, 0xf9, 0x86, 0x83, 0x1e,
	0x41, 0x95, 0xc6, 0x42, 0xd1, 0x2b, 0x6f, 0x41, 0x4f, 0x48, 0x68, 0x13, 0x6c, 0xfd, 0x43, 0xa1,
	0x69, 0x2b, 0x7a, 0x2b, 0x9f, 0x9e, 0x8d, 0xbe, 0xb5, 0xa1, 0x08, 0x7a, 0x9c, 0x19, 0xb6, 0xf3,
	0x29, 0xd4, 0x33, 0xe2, 0xb7, 0x1a, 0x69, 0xbf, 0xa5, 0x49, 0xde, 0x62, 0x38, 0x3a, 0x9a, 0x9b,
	0xe4, 0x4d, 0xb0, 0xc7, 0xd2, 0x97, 0xe4, 0x31, 0xce, 0x77, 0x77, 0xca, 0x4e, 0x4b, 0x39, 0x6f,
	0xa6, 0xaf, 0x61, 0x67, 0x92, 0x5e, 0x3a, 0x5f, 0xd2, 0xcb, 0xff, 0x20, 0xe9, 0xce, 0x0b, 0xa8,
	0x67, 0x9c, 0xca, 0x49, 0xd6, 0xea, 0xf4, 0x53, 0xeb, 0x9e, 0x7d, 0x29, 0x99, 0x84, 0xb6, 0xbf,
	0x2f, 0x41, 0x75, 0x8b, 0x84, 0x44, 0xbe, 0x7d, 0xcf, 0xe0, 0xd2, 0x01, 0xc3, 0x21, 0x97, 0xa5,
	0xf6, 0x44, 0x7a, 0x8f, 0xe6, 0xf6, 0xb7, 0x33, 0x57, 0xeb, 0x16, 0xd0, 0x2e, 0x5c, 0x4e, 0xed,
	0xed, 0xaa, 0x70, 0xce, 0x69, 0xb0, 0x03, 0x15, 0xf9, 0x1b, 0x81, 0x9c, 0xd3, 0xcc, 0x0e, 0xd4,
	0xd6, 0x86, 0x43, 0x46, 0x86, 0x58, 0x10, 0xb4, 0x3c, 0x0f, 0x2c, 0x1f, 0xc0, 0x33, 0xcd, 0x6d,
	0xc1, 0xe2, 0x3e, 0x09, 0xfb, 0xe9, 0x83, 0x71, 0x73, 0x06, 0x9f, 0x28, 0xce, 0x32, 0xd4, 0xfe,
	0xcb, 0x82, 0x8a, 0xba, 0x28, 0xb4, 0x05, 0xd5, 0x3d, 0xfd, 0x9d, 0x75, 0xce, 0x50, 0x2f, 0xca,
	0x37, 0xb4, 0x0d, 0x0b, 0x69, 0xb3, 0xbd, 0x3a, 0x4f, 0x3b, 0xf2, 0x53, 0xcd, 0x79, 0x83, 0xd2,
	0x73, 0x0b, 0xed, 0x1f, 0x2c, 0xb0, 0xd5, 0x2d, 0xb2, 0x8b, 0xba, 0xcf, 0x0b, 0xbb, 0x80, 0x17,
	0x50, 0x4f, 0x0b, 0x96, 0xb0, 0x8b, 0xee, 0x87, 0x76, 0x1f, 0xae, 0xe8, 0x36, 0xc8, 0x1e, 0x72,
	0xd1, 0x4d, 0xd2, 0x7e, 0x0e, 0x0b, 0x1b, 0x74, 0xdc, 0x0d, 0x42, 0xc2, 0x2e, 0xb8, 0xd2, 0xdb,
	0xbf, 0x14, 0xc1, 0xd6, 0xb2, 0xff, 0x60, 0x85, 0x7e, 0x05, 0x4b, 0xd3, 0x0f, 0xef, 0x07, 0x6f,
	0x30, 0x09, 0xf5, 0x2f, 0x90, 0x37, 0xab, 0x5c, 0xb4, 0x03, 0x4b, 0xd3, 0xaf, 0xce, 0xdb, 0x35,
	0xc2, 0x14, 0xd7, 0x2d, 0xac, 0x1f, 0x41, 0x23, 0xa0, 0xd3, 0xc8, 0xf5, 0xc6, 0x5e, 0xfa, 0xef,
	0x15, 0xf5, 0x19, 0xcb, 0xbf, 0x58, 0x1f, 0x06, 0xe2, 0x28, 0xee, 0xb6, 0x7a, 0x74, 0xec, 0x69,
	0x6c, 0x40, 0xcd, 0xe2, 0x8e, 0xfa, 0x4f, 0x48, 0x10, 0xf6, 0xe2, 0x2e, 0x96, 0x1f, 0x4e, 0xde,
	0x09, 0xc3, 0x51, 0x44, 0x18, 0xf7, 0x78, 0x3b, 0xf0, 0x86, 0xd4, 0x8b, 0x8e, 0x87, 0x1e, 0x8e,
	0x82, 0xae, 0xad, 0xac, 0xdf, 0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x78, 0xc7, 0x70, 0x40, 0xbd,
	0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GenericClient is the client API for Generic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GenericClient interface {
	TransformInput(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error)
	TransformOutput(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error)
	Route(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error)
	Aggregate(ctx context.Context, in *SeldonMessageList, opts ...grpc.CallOption) (*SeldonMessage, error)
	SendFeedback(ctx context.Context, in *Feedback, opts ...grpc.CallOption) (*SeldonMessage, error)
}

type genericClient struct {
	cc grpc.ClientConnInterface
}

func NewGenericClient(cc grpc.ClientConnInterface) GenericClient {
	return &genericClient{cc}
}

func (c *genericClient) TransformInput(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error) {
	out := new(SeldonMessage)
	err := c.cc.Invoke(ctx, "/seldon.protos.Generic/TransformInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericClient) TransformOutput(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error) {
	out := new(SeldonMessage)
	err := c.cc.Invoke(ctx, "/seldon.protos.Generic/TransformOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericClient) Route(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error) {
	out := new(SeldonMessage)
	err := c.cc.Invoke(ctx, "/seldon.protos.Generic/Route", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericClient) Aggregate(ctx context.Context, in *SeldonMessageList, opts ...grpc.CallOption) (*SeldonMessage, error) {
	out := new(SeldonMessage)
	err := c.cc.Invoke(ctx, "/seldon.protos.Generic/Aggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericClient) SendFeedback(ctx context.Context, in *Feedback, opts ...grpc.CallOption) (*SeldonMessage, error) {
	out := new(SeldonMessage)
	err := c.cc.Invoke(ctx, "/seldon.protos.Generic/SendFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenericServer is the server API for Generic service.
type GenericServer interface {
	TransformInput(context.Context, *SeldonMessage) (*SeldonMessage, error)
	TransformOutput(context.Context, *SeldonMessage) (*SeldonMessage, error)
	Route(context.Context, *SeldonMessage) (*SeldonMessage, error)
	Aggregate(context.Context, *SeldonMessageList) (*SeldonMessage, error)
	SendFeedback(context.Context, *Feedback) (*SeldonMessage, error)
}

// UnimplementedGenericServer can be embedded to have forward compatible implementations.
type UnimplementedGenericServer struct {
}

func (*UnimplementedGenericServer) TransformInput(ctx context.Context, req *SeldonMessage) (*SeldonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransformInput not implemented")
}
func (*UnimplementedGenericServer) TransformOutput(ctx context.Context, req *SeldonMessage) (*SeldonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransformOutput not implemented")
}
func (*UnimplementedGenericServer) Route(ctx context.Context, req *SeldonMessage) (*SeldonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Route not implemented")
}
func (*UnimplementedGenericServer) Aggregate(ctx context.Context, req *SeldonMessageList) (*SeldonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aggregate not implemented")
}
func (*UnimplementedGenericServer) SendFeedback(ctx context.Context, req *Feedback) (*SeldonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFeedback not implemented")
}

func RegisterGenericServer(s *grpc.Server, srv GenericServer) {
	s.RegisterService(&_Generic_serviceDesc, srv)
}

func _Generic_TransformInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeldonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericServer).TransformInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Generic/TransformInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericServer).TransformInput(ctx, req.(*SeldonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generic_TransformOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeldonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericServer).TransformOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Generic/TransformOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericServer).TransformOutput(ctx, req.(*SeldonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generic_Route_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeldonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericServer).Route(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Generic/Route",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericServer).Route(ctx, req.(*SeldonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generic_Aggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeldonMessageList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericServer).Aggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Generic/Aggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericServer).Aggregate(ctx, req.(*SeldonMessageList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generic_SendFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feedback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericServer).SendFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Generic/SendFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericServer).SendFeedback(ctx, req.(*Feedback))
	}
	return interceptor(ctx, in, info, handler)
}

var _Generic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seldon.protos.Generic",
	HandlerType: (*GenericServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransformInput",
			Handler:    _Generic_TransformInput_Handler,
		},
		{
			MethodName: "TransformOutput",
			Handler:    _Generic_TransformOutput_Handler,
		},
		{
			MethodName: "Route",
			Handler:    _Generic_Route_Handler,
		},
		{
			MethodName: "Aggregate",
			Handler:    _Generic_Aggregate_Handler,
		},
		{
			MethodName: "SendFeedback",
			Handler:    _Generic_SendFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prediction.proto",
}

// ModelClient is the client API for Model service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ModelClient interface {
	Predict(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error)
	SendFeedback(ctx context.Context, in *Feedback, opts ...grpc.CallOption) (*SeldonMessage, error)
	Metadata(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SeldonModelMetadata, error)
}

type modelClient struct {
	cc grpc.ClientConnInterface
}

func NewModelClient(cc grpc.ClientConnInterface) ModelClient {
	return &modelClient{cc}
}

func (c *modelClient) Predict(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error) {
	out := new(SeldonMessage)
	err := c.cc.Invoke(ctx, "/seldon.protos.Model/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) SendFeedback(ctx context.Context, in *Feedback, opts ...grpc.CallOption) (*SeldonMessage, error) {
	out := new(SeldonMessage)
	err := c.cc.Invoke(ctx, "/seldon.protos.Model/SendFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelClient) Metadata(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SeldonModelMetadata, error) {
	out := new(SeldonModelMetadata)
	err := c.cc.Invoke(ctx, "/seldon.protos.Model/Metadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelServer is the server API for Model service.
type ModelServer interface {
	Predict(context.Context, *SeldonMessage) (*SeldonMessage, error)
	SendFeedback(context.Context, *Feedback) (*SeldonMessage, error)
	Metadata(context.Context, *empty.Empty) (*SeldonModelMetadata, error)
}

// UnimplementedModelServer can be embedded to have forward compatible implementations.
type UnimplementedModelServer struct {
}

func (*UnimplementedModelServer) Predict(ctx context.Context, req *SeldonMessage) (*SeldonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (*UnimplementedModelServer) SendFeedback(ctx context.Context, req *Feedback) (*SeldonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFeedback not implemented")
}
func (*UnimplementedModelServer) Metadata(ctx context.Context, req *empty.Empty) (*SeldonModelMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metadata not implemented")
}

func RegisterModelServer(s *grpc.Server, srv ModelServer) {
	s.RegisterService(&_Model_serviceDesc, srv)
}

func _Model_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeldonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Model/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).Predict(ctx, req.(*SeldonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_SendFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feedback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).SendFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Model/SendFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).SendFeedback(ctx, req.(*Feedback))
	}
	return interceptor(ctx, in, info, handler)
}

func _Model_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Model/Metadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServer).Metadata(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Model_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seldon.protos.Model",
	HandlerType: (*ModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _Model_Predict_Handler,
		},
		{
			MethodName: "SendFeedback",
			Handler:    _Model_SendFeedback_Handler,
		},
		{
			MethodName: "Metadata",
			Handler:    _Model_Metadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prediction.proto",
}

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterClient interface {
	Route(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error)
	SendFeedback(ctx context.Context, in *Feedback, opts ...grpc.CallOption) (*SeldonMessage, error)
}

type routerClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterClient(cc grpc.ClientConnInterface) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) Route(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error) {
	out := new(SeldonMessage)
	err := c.cc.Invoke(ctx, "/seldon.protos.Router/Route", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) SendFeedback(ctx context.Context, in *Feedback, opts ...grpc.CallOption) (*SeldonMessage, error) {
	out := new(SeldonMessage)
	err := c.cc.Invoke(ctx, "/seldon.protos.Router/SendFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServer is the server API for Router service.
type RouterServer interface {
	Route(context.Context, *SeldonMessage) (*SeldonMessage, error)
	SendFeedback(context.Context, *Feedback) (*SeldonMessage, error)
}

// UnimplementedRouterServer can be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (*UnimplementedRouterServer) Route(ctx context.Context, req *SeldonMessage) (*SeldonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Route not implemented")
}
func (*UnimplementedRouterServer) SendFeedback(ctx context.Context, req *Feedback) (*SeldonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFeedback not implemented")
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_Route_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeldonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).Route(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Router/Route",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).Route(ctx, req.(*SeldonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_SendFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feedback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).SendFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Router/SendFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).SendFeedback(ctx, req.(*Feedback))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seldon.protos.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Route",
			Handler:    _Router_Route_Handler,
		},
		{
			MethodName: "SendFeedback",
			Handler:    _Router_SendFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prediction.proto",
}

// TransformerClient is the client API for Transformer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransformerClient interface {
	TransformInput(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error)
}

type transformerClient struct {
	cc grpc.ClientConnInterface
}

func NewTransformerClient(cc grpc.ClientConnInterface) TransformerClient {
	return &transformerClient{cc}
}

func (c *transformerClient) TransformInput(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error) {
	out := new(SeldonMessage)
	err := c.cc.Invoke(ctx, "/seldon.protos.Transformer/TransformInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransformerServer is the server API for Transformer service.
type TransformerServer interface {
	TransformInput(context.Context, *SeldonMessage) (*SeldonMessage, error)
}

// UnimplementedTransformerServer can be embedded to have forward compatible implementations.
type UnimplementedTransformerServer struct {
}

func (*UnimplementedTransformerServer) TransformInput(ctx context.Context, req *SeldonMessage) (*SeldonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransformInput not implemented")
}

func RegisterTransformerServer(s *grpc.Server, srv TransformerServer) {
	s.RegisterService(&_Transformer_serviceDesc, srv)
}

func _Transformer_TransformInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeldonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).TransformInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Transformer/TransformInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).TransformInput(ctx, req.(*SeldonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transformer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seldon.protos.Transformer",
	HandlerType: (*TransformerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransformInput",
			Handler:    _Transformer_TransformInput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prediction.proto",
}

// OutputTransformerClient is the client API for OutputTransformer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OutputTransformerClient interface {
	TransformOutput(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error)
}

type outputTransformerClient struct {
	cc grpc.ClientConnInterface
}

func NewOutputTransformerClient(cc grpc.ClientConnInterface) OutputTransformerClient {
	return &outputTransformerClient{cc}
}

func (c *outputTransformerClient) TransformOutput(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error) {
	out := new(SeldonMessage)
	err := c.cc.Invoke(ctx, "/seldon.protos.OutputTransformer/TransformOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutputTransformerServer is the server API for OutputTransformer service.
type OutputTransformerServer interface {
	TransformOutput(context.Context, *SeldonMessage) (*SeldonMessage, error)
}

// UnimplementedOutputTransformerServer can be embedded to have forward compatible implementations.
type UnimplementedOutputTransformerServer struct {
}

func (*UnimplementedOutputTransformerServer) TransformOutput(ctx context.Context, req *SeldonMessage) (*SeldonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransformOutput not implemented")
}

func RegisterOutputTransformerServer(s *grpc.Server, srv OutputTransformerServer) {
	s.RegisterService(&_OutputTransformer_serviceDesc, srv)
}

func _OutputTransformer_TransformOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeldonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutputTransformerServer).TransformOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.OutputTransformer/TransformOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutputTransformerServer).TransformOutput(ctx, req.(*SeldonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _OutputTransformer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seldon.protos.OutputTransformer",
	HandlerType: (*OutputTransformerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransformOutput",
			Handler:    _OutputTransformer_TransformOutput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prediction.proto",
}

// CombinerClient is the client API for Combiner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CombinerClient interface {
	Aggregate(ctx context.Context, in *SeldonMessageList, opts ...grpc.CallOption) (*SeldonMessage, error)
}

type combinerClient struct {
	cc grpc.ClientConnInterface
}

func NewCombinerClient(cc grpc.ClientConnInterface) CombinerClient {
	return &combinerClient{cc}
}

func (c *combinerClient) Aggregate(ctx context.Context, in *SeldonMessageList, opts ...grpc.CallOption) (*SeldonMessage, error) {
	out := new(SeldonMessage)
	err := c.cc.Invoke(ctx, "/seldon.protos.Combiner/Aggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CombinerServer is the server API for Combiner service.
type CombinerServer interface {
	Aggregate(context.Context, *SeldonMessageList) (*SeldonMessage, error)
}

// UnimplementedCombinerServer can be embedded to have forward compatible implementations.
type UnimplementedCombinerServer struct {
}

func (*UnimplementedCombinerServer) Aggregate(ctx context.Context, req *SeldonMessageList) (*SeldonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aggregate not implemented")
}

func RegisterCombinerServer(s *grpc.Server, srv CombinerServer) {
	s.RegisterService(&_Combiner_serviceDesc, srv)
}

func _Combiner_Aggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeldonMessageList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombinerServer).Aggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Combiner/Aggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombinerServer).Aggregate(ctx, req.(*SeldonMessageList))
	}
	return interceptor(ctx, in, info, handler)
}

var _Combiner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seldon.protos.Combiner",
	HandlerType: (*CombinerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Aggregate",
			Handler:    _Combiner_Aggregate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prediction.proto",
}

// SeldonClient is the client API for Seldon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SeldonClient interface {
	Predict(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error)
	SendFeedback(ctx context.Context, in *Feedback, opts ...grpc.CallOption) (*SeldonMessage, error)
	ModelMetadata(ctx context.Context, in *SeldonModelMetadataRequest, opts ...grpc.CallOption) (*SeldonModelMetadata, error)
	GraphMetadata(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SeldonGraphMetadata, error)
}

type seldonClient struct {
	cc grpc.ClientConnInterface
}

func NewSeldonClient(cc grpc.ClientConnInterface) SeldonClient {
	return &seldonClient{cc}
}

func (c *seldonClient) Predict(ctx context.Context, in *SeldonMessage, opts ...grpc.CallOption) (*SeldonMessage, error) {
	out := new(SeldonMessage)
	err := c.cc.Invoke(ctx, "/seldon.protos.Seldon/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seldonClient) SendFeedback(ctx context.Context, in *Feedback, opts ...grpc.CallOption) (*SeldonMessage, error) {
	out := new(SeldonMessage)
	err := c.cc.Invoke(ctx, "/seldon.protos.Seldon/SendFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seldonClient) ModelMetadata(ctx context.Context, in *SeldonModelMetadataRequest, opts ...grpc.CallOption) (*SeldonModelMetadata, error) {
	out := new(SeldonModelMetadata)
	err := c.cc.Invoke(ctx, "/seldon.protos.Seldon/ModelMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seldonClient) GraphMetadata(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SeldonGraphMetadata, error) {
	out := new(SeldonGraphMetadata)
	err := c.cc.Invoke(ctx, "/seldon.protos.Seldon/GraphMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeldonServer is the server API for Seldon service.
type SeldonServer interface {
	Predict(context.Context, *SeldonMessage) (*SeldonMessage, error)
	SendFeedback(context.Context, *Feedback) (*SeldonMessage, error)
	ModelMetadata(context.Context, *SeldonModelMetadataRequest) (*SeldonModelMetadata, error)
	GraphMetadata(context.Context, *empty.Empty) (*SeldonGraphMetadata, error)
}

// UnimplementedSeldonServer can be embedded to have forward compatible implementations.
type UnimplementedSeldonServer struct {
}

func (*UnimplementedSeldonServer) Predict(ctx context.Context, req *SeldonMessage) (*SeldonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (*UnimplementedSeldonServer) SendFeedback(ctx context.Context, req *Feedback) (*SeldonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFeedback not implemented")
}
func (*UnimplementedSeldonServer) ModelMetadata(ctx context.Context, req *SeldonModelMetadataRequest) (*SeldonModelMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelMetadata not implemented")
}
func (*UnimplementedSeldonServer) GraphMetadata(ctx context.Context, req *empty.Empty) (*SeldonGraphMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GraphMetadata not implemented")
}

func RegisterSeldonServer(s *grpc.Server, srv SeldonServer) {
	s.RegisterService(&_Seldon_serviceDesc, srv)
}

func _Seldon_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeldonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeldonServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Seldon/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeldonServer).Predict(ctx, req.(*SeldonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seldon_SendFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feedback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeldonServer).SendFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Seldon/SendFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeldonServer).SendFeedback(ctx, req.(*Feedback))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seldon_ModelMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeldonModelMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeldonServer).ModelMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Seldon/ModelMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeldonServer).ModelMetadata(ctx, req.(*SeldonModelMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seldon_GraphMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeldonServer).GraphMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seldon.protos.Seldon/GraphMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeldonServer).GraphMetadata(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Seldon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seldon.protos.Seldon",
	HandlerType: (*SeldonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _Seldon_Predict_Handler,
		},
		{
			MethodName: "SendFeedback",
			Handler:    _Seldon_SendFeedback_Handler,
		},
		{
			MethodName: "ModelMetadata",
			Handler:    _Seldon_ModelMetadata_Handler,
		},
		{
			MethodName: "GraphMetadata",
			Handler:    _Seldon_GraphMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prediction.proto",
}
