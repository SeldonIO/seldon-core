/*
Copyright (c) 2024 Seldon Technologies Ltd.

Use of this software is governed BY
(1) the license included in the LICENSE file or
(2) if the license included in the LICENSE file is the Business Source License 1.1,
the Change License after the Change Date as each is defined in accordance with the LICENSE file.
*/

// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: v2_dataplane.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.seldon.mlops.inference.v2;

@kotlin.jvm.JvmName("-initializerepositoryModelUnloadRequest")
public inline fun repositoryModelUnloadRequest(block: io.seldon.mlops.inference.v2.RepositoryModelUnloadRequestKt.Dsl.() -> kotlin.Unit): io.seldon.mlops.inference.v2.V2Dataplane.RepositoryModelUnloadRequest =
  io.seldon.mlops.inference.v2.RepositoryModelUnloadRequestKt.Dsl._create(io.seldon.mlops.inference.v2.V2Dataplane.RepositoryModelUnloadRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * @@
 * @@.. cpp:var:: message RepositoryModelUnloadRequest
 * @@
 * @@   Request message for RepositoryModelUnload.
 * @@
 * ```
 *
 * Protobuf type `inference.RepositoryModelUnloadRequest`
 */
public object RepositoryModelUnloadRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.seldon.mlops.inference.v2.V2Dataplane.RepositoryModelUnloadRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.seldon.mlops.inference.v2.V2Dataplane.RepositoryModelUnloadRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.seldon.mlops.inference.v2.V2Dataplane.RepositoryModelUnloadRequest = _builder.build()

    /**
     * ```
     * @@  .. cpp:var:: string repository_name
     * @@
     * @@     The name of the repository from which the model was originally
     * @@     loaded. If empty the repository is not considered.
     * @@
     * ```
     *
     * `string repository_name = 1;`
     */
    public var repositoryName: kotlin.String
      @JvmName("getRepositoryName")
      get() = _builder.getRepositoryName()
      @JvmName("setRepositoryName")
      set(value) {
        _builder.setRepositoryName(value)
      }
    /**
     * ```
     * @@  .. cpp:var:: string repository_name
     * @@
     * @@     The name of the repository from which the model was originally
     * @@     loaded. If empty the repository is not considered.
     * @@
     * ```
     *
     * `string repository_name = 1;`
     */
    public fun clearRepositoryName() {
      _builder.clearRepositoryName()
    }

    /**
     * ```
     * @@  .. cpp:var:: string repository_name
     * @@
     * @@     The name of the model to unload.
     * @@
     * ```
     *
     * `string model_name = 2;`
     */
    public var modelName: kotlin.String
      @JvmName("getModelName")
      get() = _builder.getModelName()
      @JvmName("setModelName")
      set(value) {
        _builder.setModelName(value)
      }
    /**
     * ```
     * @@  .. cpp:var:: string repository_name
     * @@
     * @@     The name of the model to unload.
     * @@
     * ```
     *
     * `string model_name = 2;`
     */
    public fun clearModelName() {
      _builder.clearModelName()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ParametersProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * @@  .. cpp:var:: map<string,ModelRepositoryParameter> parameters
     * @@
     * @@     Optional model repository request parameters.
     * @@
     * ```
     *
     * `map<string, .inference.ModelRepositoryParameter> parameters = 3;`
     */
     public val parameters: com.google.protobuf.kotlin.DslMap<kotlin.String, io.seldon.mlops.inference.v2.V2Dataplane.ModelRepositoryParameter, ParametersProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getParametersMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getParametersMap()
      )
    /**
     * ```
     * @@  .. cpp:var:: map<string,ModelRepositoryParameter> parameters
     * @@
     * @@     Optional model repository request parameters.
     * @@
     * ```
     *
     * `map<string, .inference.ModelRepositoryParameter> parameters = 3;`
     */
    @JvmName("putParameters")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.seldon.mlops.inference.v2.V2Dataplane.ModelRepositoryParameter, ParametersProxy>
      .put(key: kotlin.String, value: io.seldon.mlops.inference.v2.V2Dataplane.ModelRepositoryParameter) {
         _builder.putParameters(key, value)
       }
    /**
     * ```
     * @@  .. cpp:var:: map<string,ModelRepositoryParameter> parameters
     * @@
     * @@     Optional model repository request parameters.
     * @@
     * ```
     *
     * `map<string, .inference.ModelRepositoryParameter> parameters = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setParameters")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.seldon.mlops.inference.v2.V2Dataplane.ModelRepositoryParameter, ParametersProxy>
      .set(key: kotlin.String, value: io.seldon.mlops.inference.v2.V2Dataplane.ModelRepositoryParameter) {
         put(key, value)
       }
    /**
     * ```
     * @@  .. cpp:var:: map<string,ModelRepositoryParameter> parameters
     * @@
     * @@     Optional model repository request parameters.
     * @@
     * ```
     *
     * `map<string, .inference.ModelRepositoryParameter> parameters = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeParameters")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.seldon.mlops.inference.v2.V2Dataplane.ModelRepositoryParameter, ParametersProxy>
      .remove(key: kotlin.String) {
         _builder.removeParameters(key)
       }
    /**
     * ```
     * @@  .. cpp:var:: map<string,ModelRepositoryParameter> parameters
     * @@
     * @@     Optional model repository request parameters.
     * @@
     * ```
     *
     * `map<string, .inference.ModelRepositoryParameter> parameters = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllParameters")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.seldon.mlops.inference.v2.V2Dataplane.ModelRepositoryParameter, ParametersProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, io.seldon.mlops.inference.v2.V2Dataplane.ModelRepositoryParameter>) {
         _builder.putAllParameters(map)
       }
    /**
     * ```
     * @@  .. cpp:var:: map<string,ModelRepositoryParameter> parameters
     * @@
     * @@     Optional model repository request parameters.
     * @@
     * ```
     *
     * `map<string, .inference.ModelRepositoryParameter> parameters = 3;`
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearParameters")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.seldon.mlops.inference.v2.V2Dataplane.ModelRepositoryParameter, ParametersProxy>
      .clear() {
         _builder.clearParameters()
       }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun io.seldon.mlops.inference.v2.V2Dataplane.RepositoryModelUnloadRequest.copy(block: `io.seldon.mlops.inference.v2`.RepositoryModelUnloadRequestKt.Dsl.() -> kotlin.Unit): io.seldon.mlops.inference.v2.V2Dataplane.RepositoryModelUnloadRequest =
  `io.seldon.mlops.inference.v2`.RepositoryModelUnloadRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

