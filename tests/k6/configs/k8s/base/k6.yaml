apiVersion: batch/v1
kind: Job
metadata:
  name: k6
spec:
  parallelism: 1
  completions: 1
  template:
    spec:
      containers:
      - name: k6
        image: k6:latest
        imagePullPolicy: IfNotPresent
        # # choose from the following scenarios:
        # # infer_constant_vu
        # args: [
        #   "--no-teardown",
        #   "--summary-export",
        #   "results/base.json",
        #   "--out",
        #   "csv=results/base.gz",
        #   "-u",
        #   "5",
        #   "-i",
        #   "100000",
        #   "-d",
        #   "120m",
        #   "scenarios/infer_constant_vu.js",
        #   ]
        # # infer_multiple_rates
        # args: [
        #   "--no-teardown",
        #   "--summary-export",
        #   "results/base.json",
        #   "--out",
        #   "csv=results/base.gz",
        #   "scenarios/infer_multiple_rates.js",
        #   ]
        # # infer_constant_rate
        args: [
          # "--no-teardown",
          "--summary-export",
          "results/base.json",
          "--out",
          "csv=results/base.gz",
          "scenarios/infer_constant_rate.js",
          ]
        # # k8s-test-script
        # args: [
        #   "--summary-export",
        #   "results/base.json",
        #   "--out",
        #   "csv=results/base.gz",
        #   "scenarios/k8s-test-script.js",
        #   ]
        # # core2_qa_control_plane_ops
        # args: [
        #   "--no-teardown",
        #   "--verbose",
        #   "--summary-export",
        #   "results/base.json",
        #   "--out",
        #   "csv=results/base.gz",
        #   "-u",
        #   "5",
        #   "-i",
        #   "10000",
        #   "-d",
        #   "9h",
        #   "scenarios/core2_qa_control_plane_ops.js",
        #   ]
        env:
        - name: REQUEST_RATE
          value: "150"
        # REQUEST_RATES allows you to specify multiple target RPS values, and is
        # used in the infer_multiple_rates scenario. The duration over which
        # each rate is maintained is controlled via the value at the same index
        # in the CONSTANT_RATE_DURATIONS_SECONDS variable. Rather than a sudden
        # change in RPS, additional stages lasting 1/3rd of the duration over
        # which the RPS is held constant are automatically introduced, and
        # perform either a linear ramp-up or ramp-down to the next target RPS.
        # - name: REQUEST_RATES
        #   value: "10,70,10,50,20"
        - name: CONSTANT_RATE_DURATION_SECONDS
          value: "900"
        # CONSTANT_RATE_DURATIONS_SECONDS is used in the infer_multiple_rates
        # scenario. It specifies the duration in seconds for which each target
        # RPS value is maintained. If the sum of the values here is S, the total
        # duration of the test will be S + S/3 (with the latter due to the added
        # ramp-up/ramp-down stages)
        # - name: CONSTANT_RATE_DURATIONS_SECONDS
        #   value: "120,120,400,120,400"
        - name: USE_KUBE_CONTROL_PLANE
          value: "true"
        # - name: SKIP_UNLOAD_MODEL
        #   value: "true"
        - name: SCHEDULER_ENDPOINT
          value: "${SCHEDULER_ENDPOINT}:9004"
        - name: INFER_HTTP_ITERATIONS
          value: "1"
        - name: INFER_GRPC_ITERATIONS
          value: "1"
        - name: MODELNAME_PREFIX
          value: "tfsimplea,pytorch-cifar10a,tfmnista,mlflow-winea,irisa"
        - name: MODEL_TYPE
          value: "tfsimple,pytorch_cifar10,tfmnist,mlflow_wine,iris"
        # Specify MODEL_MEMORY_BYTES using unit-of measure suffixes (k, M, G, T)
        # rather than numbers without units of measure. If supplying "naked
        # numbers", the seldon operator will take care of converting the number
        # for you but also take ownership of the field (as FieldManager), so the
        # next time you run the scenario creating/updating of the model CR will
        # fail.
        - name: MODEL_MEMORY_BYTES
          value: "400k,8M,43M,200k,3M"
        - name: MAX_MEM_UPDATE_FRACTION
          value: "0.1"
        - name: MAX_NUM_MODELS
          value: "800,100,25,100,100"
          # value: "0,0,25,100,100"
        #
        # MAX_NUM_MODELS_HEADROOM is a variable used by control-plane tests.
        # It's the approximate number of models that can be created over
        # MAX_NUM_MODELS over the experiment. In the worst case scenario
        # (very unlikely) the HEADROOM values may temporarily exceed the ones
        # specified here with the number of VUs, because each VU checks the
        # headroom constraint independently before deciding on the available
        # operations (no communication/sync between VUs)
        # - name: MAX_NUM_MODELS_HEADROOM
        #   value: "20,5,0,20,30"
        #
        # MAX_MODEL_REPLICAS is used by control-plane tests. It controls the
        # maximum number of replicas that may be requested when
        # creating/updating models of a given type.
        # - name: MAX_MODEL_REPLICAS
        #   value: "2,2,0,2,2"
        #
        - name: INFER_BATCH_SIZE
          value: "1,1,1,1,1"
        # MODEL_CREATE_UPDATE_DELETE_BIAS defines the probability ratios between
        # the operations, for control-plane tests. For example, "1, 4, 3"
        # makes an Update four times more likely then a Create, and a Delete 3
        # times more likely than the Create.
        # - name: MODEL_CREATE_UPDATE_DELETE_BIAS
        #   value: "1,3,1"
        # The following two variables are used to change the model replicas while doing 
        # data plane tests. The ENABLE_MODEL_REPLICA_CHANGE variable should be set to true
        # to enable the model replica change. The SLEEP_BETWEEN_REPLICA_CHANGE variable
        # should be set to the number of seconds to wait between changing the model replicas.
        # - name: ENABLE_MODEL_REPLICA_CHANGE
        #   value: "true"
        # - name: SLEEP_BETWEEN_REPLICA_CHANGE
        #   value: "10"
        # - name: DATAFLOW_TAG
        #   value: "pipeline"
        - name: INFER_TYPE
          value: "REST"
        - name: WARMUP
          value: "false"
        - name: OUTPUT_TYPE
          value: "clickhouse"
          # value: "gs_bucket"
        - name: K6_CLICKHOUSE_DB
          valueFrom:
            secretKeyRef:
              name: clickhouse-client-conn
              key: dsn
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "/var/run/secret/cloud.google.com/k6-service-account.json"
        - name: GS_BUCKET_NAME
          value: "gs://seldon-tmp/scv2-k6-results"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: "service-account"
          mountPath: "/var/run/secret/cloud.google.com"
        - name: podinfo
          mountPath: /info
      imagePullSecrets:
      - name: private-dev-seldon-registry
      restartPolicy: Never
      volumes:
        - name: "service-account"
          secret:
            secretName: "k6-sa-key"
            optional: true
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
      serviceAccountName: seldon-v2-controller-manager
