{{ if .Values.hodometer.enabled }}

apiVersion: v1
kind: ServiceAccount
metadata:
  name: hodometer
  namespace: '{{ .Release.Namespace }}'
{{ end }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: seldon-controller-manager
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: seldon-scheduler
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: seldon-server
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: agent-role
  namespace: '{{ .Release.Namespace }}'
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
{{ if .Values.hodometer.enabled }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hodometer-role
  namespace: '{{ .Release.Namespace }}'
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
{{ end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: seldon-leader-election-role
  namespace: '{{ .Release.Namespace }}'
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  name: seldon-manager-role
  namespace: '{{ .Release.Namespace }}'
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets/status
  verbs:
  - get
- apiGroups:
  - mlops.seldon.io
  resources:
  - experiments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - mlops.seldon.io
  resources:
  - experiments/finalizers
  verbs:
  - update
- apiGroups:
  - mlops.seldon.io
  resources:
  - experiments/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - mlops.seldon.io
  resources:
  - models
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - mlops.seldon.io
  resources:
  - models/finalizers
  verbs:
  - update
- apiGroups:
  - mlops.seldon.io
  resources:
  - models/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - mlops.seldon.io
  resources:
  - pipelines
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - mlops.seldon.io
  resources:
  - pipelines/finalizers
  verbs:
  - update
- apiGroups:
  - mlops.seldon.io
  resources:
  - pipelines/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - mlops.seldon.io
  resources:
  - serverconfigs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - mlops.seldon.io
  resources:
  - serverconfigs/finalizers
  verbs:
  - update
- apiGroups:
  - mlops.seldon.io
  resources:
  - serverconfigs/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - mlops.seldon.io
  resources:
  - servers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - mlops.seldon.io
  resources:
  - servers/finalizers
  verbs:
  - update
- apiGroups:
  - mlops.seldon.io
  resources:
  - servers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - v1
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - v1
  resources:
  - services/status
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  name: seldon-manager-tls-role
  namespace: '{{ .Release.Namespace }}'
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: seldon-scheduler-role
  namespace: '{{ .Release.Namespace }}'
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: agent-rolebinding
  namespace: '{{ .Release.Namespace }}'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: agent-role
subjects:
- kind: ServiceAccount
  name: seldon-server
  namespace: '{{ .Release.Namespace }}'
{{ if .Values.hodometer.enabled }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hodometer-rolebinding
  namespace: '{{ .Release.Namespace }}'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: hodometer-role
subjects:
- kind: ServiceAccount
  name: hodometer
  namespace: '{{ .Release.Namespace }}'
{{ end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: seldon-leader-election-rolebinding
  namespace: '{{ .Release.Namespace }}'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: seldon-leader-election-role
subjects:
- kind: ServiceAccount
  name: seldon-controller-manager
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: seldon-manager-rolebinding
  namespace: '{{ .Release.Namespace }}'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: seldon-manager-role
subjects:
- kind: ServiceAccount
  name: seldon-controller-manager
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: seldon-manager-tls-rolebinding
  namespace: '{{ .Release.Namespace }}'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: seldon-manager-tls-role
subjects:
- kind: ServiceAccount
  name: seldon-controller-manager
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: seldon-scheduler-rolebinding
  namespace: '{{ .Release.Namespace }}'
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: seldon-scheduler-role
subjects:
- kind: ServiceAccount
  name: seldon-scheduler
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: e98130ae.seldon.io
kind: ConfigMap
metadata:
  name: seldon-manager-config
  namespace: '{{ .Release.Namespace }}'
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: seldon-mesh
  name: seldon-mesh
  namespace: '{{ .Release.Namespace }}'
spec:
  ports:
  - name: '{{ .Values.serviceGRPCPrefix }}data'
    port: 80
    protocol: TCP
    targetPort: http
  - name: admin
    port: 9003
    protocol: TCP
    targetPort: envoy-admin
  selector:
    app: seldon-envoy
  type: '{{ .Values.envoy.service.type }}'
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: seldon-mesh
  name: seldon-pipelinegateway
  namespace: '{{ .Release.Namespace }}'
spec:
  clusterIP: None
  ports:
  - name: http
    port: 9010
    protocol: TCP
    targetPort: http
  - name: grpc
    port: 9011
    protocol: TCP
    targetPort: grpc
  selector:
    app: pipelinegateway
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: seldon-scheduler
  name: seldon-scheduler
  namespace: '{{ .Release.Namespace }}'
spec:
  ports:
  - name: '{{ .Values.serviceGRPCPrefix }}xds'
    port: 9002
    protocol: TCP
    targetPort: xds
  - name: '{{ .Values.serviceGRPCPrefix }}scheduler'
    port: 9004
    protocol: TCP
    targetPort: scheduler
  - name: '{{ .Values.serviceGRPCPrefix }}scheduler-mtls'
    port: 9044
    protocol: TCP
    targetPort: scheduler-mtls
  - name: '{{ .Values.serviceGRPCPrefix }}agent'
    port: 9005
    protocol: TCP
    targetPort: agent
  - name: '{{ .Values.serviceGRPCPrefix }}agent-mtls'
    port: 9055
    protocol: TCP
    targetPort: agent-mtls
  - name: '{{ .Values.serviceGRPCPrefix }}dataflow'
    port: 9008
    protocol: TCP
    targetPort: dataflow
  selector:
    control-plane: seldon-scheduler
  type: '{{ .Values.scheduler.service.type }}'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: seldon-controller-manager
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --health-probe-bind-address=:8081
        - --leader-elect
        - --scheduler-host=$(SELDON_SCHEDULER_SVC)
        - --scheduler-plaintxt-port=$(SELDON_SCHEDULER_PLAINTXT_PORT)
        - --scheduler-tls-port=$(SELDON_SCHEDULER_TLS_PORT)
        - --namespace=$(POD_NAMESPACE)
        command:
        - /manager
        env:
        - name: CONTROL_PLANE_SECURITY_PROTOCOL
          value: '{{ .Values.security.controlplane.protocol }}'
        - name: CONTROL_PLANE_CLIENT_TLS_SECRET_NAME
          value: '{{ .Values.security.controlplane.ssl.client.secret }}'
        - name: CONTROL_PLANE_SERVER_TLS_SECRET_NAME
          value: '{{ .Values.security.controlplane.ssl.client.serverValidationSecret
            }}'
        - name: CONTROL_PLANE_CLIENT_TLS_KEY_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.keyPath }}'
        - name: CONTROL_PLANE_CLIENT_TLS_CRT_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.crtPath }}'
        - name: CONTROL_PLANE_CLIENT_TLS_CA_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.caPath }}'
        - name: CONTROL_PLANE_SERVER_TLS_CA_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.serverCaPath }}'
        - name: SELDON_SCHEDULER_SVC
          value: seldon-scheduler
        - name: SELDON_SCHEDULER_PLAINTXT_PORT
          value: "9004"
        - name: SELDON_SCHEDULER_TLS_PORT
          value: "9044"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: '{{ .Values.controller.image.registry }}/{{ .Values.controller.image.repository
          }}:{{ .Values.controller.image.tag }}'
        imagePullPolicy: '{{ .Values.controller.image.pullPolicy }}'
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            memory: '{{ .Values.controller.resources.memory }}'
          requests:
            cpu: '{{ .Values.controller.resources.cpu }}'
            memory: '{{ .Values.controller.resources.memory }}'
        securityContext:
          allowPrivilegeEscalation: false
      imagePullSecrets:
      - name: '{{ .Values.imagePullSecret }}'
      securityContext: {{- toYaml .Values.controller.securityContext
        | nindent 8 }}
      serviceAccountName: seldon-controller-manager
      terminationGracePeriodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: seldon-dataflow-engine
  name: seldon-dataflow-engine
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: seldon-dataflow-engine
  template:
    metadata:
      labels:
        control-plane: seldon-dataflow-engine
    spec:
      containers:
      - env:
        - name: SELDON_KAFKA_BOOTSTRAP_SERVERS
          value: '{{ .Values.kafka.bootstrap }}'
        - name: SELDON_KAFKA_REPLICATION_FACTOR
          value: '{{ .Values.kafka.topics.replicationFactor }}'
        - name: SELDON_KAFKA_PARTITIONS_DEFAULT
          value: '{{ .Values.kafka.topics.numPartitions }}'
        - name: SELDON_KAFKA_MAX_MESSAGE_SIZE_BYTES
          value: '{{ int .Values.kafka.consumer.messageMaxBytes }}'
        - name: SELDON_KAFKA_SECURITY_PROTOCOL
          value: '{{ .Values.security.kafka.protocol }}'
        - name: SELDON_KAFKA_TLS_CLIENT_SECRET
          value: '{{ .Values.security.kafka.ssl.client.secret }}'
        - name: SELDON_KAFKA_TLS_CLIENT_KEY_PATH
          value: '{{ .Values.security.kafka.ssl.client.keyPath }}'
        - name: SELDON_KAFKA_TLS_CLIENT_CERT_PATH
          value: '{{ .Values.security.kafka.ssl.client.crtPath }}'
        - name: SELDON_KAFKA_TLS_CLIENT_CA_PATH
          value: '{{ .Values.security.kafka.ssl.client.caPath }}'
        - name: SELDON_KAFKA_TLS_BROKER_SECRET
          value: '{{ .Values.security.kafka.ssl.client.brokerValidationSecret }}'
        - name: SELDON_KAFKA_TLS_BROKER_CA_PATH
          value: '{{ .Values.security.kafka.ssl.client.brokerCaPath }}'
        - name: SELDON_KAFKA_TLS_ENDPOINT_IDENTIFICATION_ALGORITHM
          value: '{{ .Values.security.kafka.ssl.client.endpointIdentificationAlgorithm
            }}'
        - name: SELDON_KAFKA_SASL_MECHANISM
          value: '{{ .Values.security.kafka.sasl.mechanism }}'
        - name: SELDON_KAFKA_SASL_USERNAME
          value: '{{ .Values.security.kafka.sasl.client.username }}'
        - name: SELDON_KAFKA_SASL_SECRET
          value: '{{ .Values.security.kafka.sasl.client.secret }}'
        - name: SELDON_KAFKA_SASL_PASSWORD_PATH
          value: '{{ .Values.security.kafka.sasl.client.passwordPath }}'
        - name: SELDON_TLS_ENDPOINT_IDENTIFICATION_ALGORITHM
          value: '{{ .Values.security.kafka.ssl.client.endpointIdentificationAlgorithm
            }}'
        - name: SELDON_CORES_COUNT
          value: '{{ .Values.dataflow.cores }}'
        - name: SELDON_UPSTREAM_HOST
          value: seldon-scheduler
        - name: SELDON_UPSTREAM_PORT
          value: "9008"
        - name: OTEL_JAVAAGENT_ENABLED
          valueFrom:
            configMapKeyRef:
              key: OTEL_JAVAAGENT_ENABLED
              name: seldon-tracing
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          valueFrom:
            configMapKeyRef:
              key: OTEL_EXPORTER_OTLP_ENDPOINT
              name: seldon-tracing
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: '{{ .Values.dataflow.image.registry }}/{{ .Values.dataflow.image.repository
          }}:{{ .Values.dataflow.image.tag }}'
        imagePullPolicy: '{{ .Values.dataflow.image.pullPolicy }}'
        name: dataflow-engine
        resources:
          limits:
            memory: '{{ .Values.dataflow.resources.memory }}'
          requests:
            cpu: '{{ .Values.dataflow.resources.cpu }}'
            memory: '{{ .Values.dataflow.resources.memory }}'
      imagePullSecrets:
      - name: '{{ .Values.imagePullSecret }}'
      securityContext: {{- toYaml .Values.dataflow.securityContext |
        nindent 8 }}
      serviceAccountName: seldon-scheduler
      terminationGracePeriodSeconds: 5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: seldon-envoy
  name: seldon-envoy
  namespace: '{{ .Release.Namespace }}'
spec:
  selector:
    matchLabels:
      app: seldon-envoy
  template:
    metadata:
      annotations:
        prometheus.io/path: /stats/prometheus
        prometheus.io/port: "9003"
        prometheus.io/scrape: "true"
      labels:
        app: seldon-envoy
    spec:
      containers:
      - env:
        - name: ENVOY_SECURITY_PROTOCOL
          value: '{{ .Values.security.envoy.protocol }}'
        - name: ENVOY_XDS_CLIENT_TLS_KEY
          valueFrom:
            secretKeyRef:
              key: tls.key
              name: '{{ .Values.security.controlplane.ssl.client.secret }}'
              optional: true
        - name: ENVOY_XDS_CLIENT_TLS_CRT
          valueFrom:
            secretKeyRef:
              key: tls.crt
              name: '{{ .Values.security.controlplane.ssl.client.secret }}'
              optional: true
        - name: ENVOY_XDS_SERVER_TLS_CA
          valueFrom:
            secretKeyRef:
              key: ca.crt
              name: '{{ .Values.security.controlplane.ssl.client.serverValidationSecret
                }}'
              optional: true
        image: '{{ .Values.envoy.image.registry }}/{{ .Values.envoy.image.repository
          }}:{{ .Values.envoy.image.tag }}'
        imagePullPolicy: '{{ .Values.envoy.image.pullPolicy }}'
        name: envoy
        ports:
        - containerPort: 9000
          name: http
        - containerPort: 9003
          name: envoy-admin
        resources:
          limits:
            memory: '{{ .Values.envoy.resources.memory }}'
          requests:
            cpu: '{{ .Values.envoy.resources.cpu }}'
            memory: '{{ .Values.envoy.resources.memory }}'
      imagePullSecrets:
      - name: '{{ .Values.imagePullSecret }}'
      securityContext: {{- toYaml .Values.envoy.securityContext | nindent
        8 }}
      terminationGracePeriodSeconds: 5
{{ if .Values.hodometer.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: hodometer
  name: seldon-hodometer
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hodometer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hodometer
    spec:
      containers:
      - env:
        - name: METRICS_LEVEL
          value: '{{ .Values.hodometer.metricsLevel }}'
        - name: LOG_LEVEL
          value: '{{ .Values.hodometer.logLevel }}'
        - name: EXTRA_PUBLISH_URLS
          value: '{{ .Values.hodometer.extraPublishUrls }}'
        - name: CONTROL_PLANE_SECURITY_PROTOCOL
          value: '{{ .Values.security.controlplane.protocol }}'
        - name: CONTROL_PLANE_CLIENT_TLS_SECRET_NAME
          value: '{{ .Values.security.controlplane.ssl.client.secret }}'
        - name: CONTROL_PLANE_SERVER_TLS_SECRET_NAME
          value: '{{ .Values.security.controlplane.ssl.client.serverValidationSecret
            }}'
        - name: CONTROL_PLANE_CLIENT_TLS_KEY_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.keyPath }}'
        - name: CONTROL_PLANE_CLIENT_TLS_CRT_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.crtPath }}'
        - name: CONTROL_PLANE_CLIENT_TLS_CA_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.caPath }}'
        - name: CONTROL_PLANE_SERVER_TLS_CA_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.serverCaPath }}'
        - name: PUBLISH_URL
          value: http://hodometer.seldon.io
        - name: SCHEDULER_HOST
          value: seldon-scheduler
        - name: SCHEDULER_PLAINTXT_PORT
          value: "9004"
        - name: SCHEDULER_TLS_PORT
          value: "9044"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: '{{ .Values.hodometer.image.registry }}/{{ .Values.hodometer.image.repository
          }}:{{.Values.hodometer.image.tag }}'
        imagePullPolicy: '{{ .Values.hodometer.image.pullPolicy }}'
        name: hodometer
        resources:
          limits:
            memory: '{{ .Values.hodometer.resources.memory }}'
          requests:
            cpu: '{{ .Values.hodometer.resources.cpu }}'
            memory: '{{ .Values.hodometer.resources.memory }}'
      imagePullSecrets:
      - name: '{{ .Values.imagePullSecret }}'
      securityContext: {{- toYaml .Values.hodometer.securityContext
        | nindent 8 }}
      serviceAccountName: hodometer
      terminationGracePeriodSeconds: 5
{{ end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: seldon-modelgateway
  name: seldon-modelgateway
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: seldon-modelgateway
  template:
    metadata:
      labels:
        control-plane: seldon-modelgateway
    spec:
      containers:
      - args:
        - --scheduler-host=seldon-scheduler
        - --scheduler-plaintxt-port=$(SELDON_SCHEDULER_PLAINTXT_PORT)
        - --scheduler-tls-port=$(SELDON_SCHEDULER_TLS_PORT)
        - --envoy-host=seldon-mesh
        - --envoy-port=80
        - --kafka-config-path=/mnt/kafka/kafka.json
        - --tracing-config-path=/mnt/tracing/tracing.json
        command:
        - /bin/modelgateway
        env:
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: '{{ .Values.opentelemetry.endpoint }}'
        - name: MODELGATEWAY_NUM_WORKERS
          value: '{{ .Values.modelgateway.workers }}'
        - name: KAFKA_DEFAULT_REPLICATION_FACTOR
          value: '{{ .Values.kafka.topics.replicationFactor }}'
        - name: KAFKA_DEFAULT_PARTITIONS_DEFAULT
          value: '{{ .Values.kafka.topics.numPartitions }}'
        - name: CONTROL_PLANE_SECURITY_PROTOCOL
          value: '{{ .Values.security.controlplane.protocol }}'
        - name: CONTROL_PLANE_CLIENT_TLS_SECRET_NAME
          value: '{{ .Values.security.controlplane.ssl.client.secret }}'
        - name: CONTROL_PLANE_SERVER_TLS_SECRET_NAME
          value: '{{ .Values.security.controlplane.ssl.client.serverValidationSecret
            }}'
        - name: CONTROL_PLANE_CLIENT_TLS_KEY_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.keyPath }}'
        - name: CONTROL_PLANE_CLIENT_TLS_CRT_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.crtPath }}'
        - name: CONTROL_PLANE_CLIENT_TLS_CA_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.caPath }}'
        - name: CONTROL_PLANE_SERVER_TLS_CA_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.serverCaPath }}'
        - name: KAFKA_SECURITY_PROTOCOL
          value: '{{ .Values.security.kafka.protocol }}'
        - name: KAFKA_SASL_MECHANISM
          value: '{{ .Values.security.kafka.sasl.mechanism }}'
        - name: KAFKA_CLIENT_TLS_SECRET_NAME
          value: '{{ .Values.security.kafka.ssl.client.secret }}'
        - name: KAFKA_CLIENT_TLS_KEY_LOCATION
          value: '{{ .Values.security.kafka.ssl.client.keyPath }}'
        - name: KAFKA_CLIENT_TLS_CRT_LOCATION
          value: '{{ .Values.security.kafka.ssl.client.crtPath }}'
        - name: KAFKA_CLIENT_TLS_CA_LOCATION
          value: '{{ .Values.security.kafka.ssl.client.caPath }}'
        - name: KAFKA_CLIENT_SASL_USERNAME
          value: '{{ .Values.security.kafka.sasl.client.username }}'
        - name: KAFKA_CLIENT_SASL_SECRET_NAME
          value: '{{ .Values.security.kafka.sasl.client.secret }}'
        - name: KAFKA_CLIENT_SASL_PASSWORD_LOCATION
          value: '{{ .Values.security.kafka.sasl.client.passwordPath }}'
        - name: KAFKA_BROKER_TLS_SECRET_NAME
          value: '{{ .Values.security.kafka.ssl.client.brokerValidationSecret }}'
        - name: KAFKA_BROKER_TLS_CA_LOCATION
          value: '{{ .Values.security.kafka.ssl.client.brokerCaPath }}'
        - name: ENVOY_SECURITY_PROTOCOL
          value: '{{ .Values.security.envoy.protocol }}'
        - name: ENVOY_DOWNSTREAM_CLIENT_MTLS
          value: '{{ .Values.security.envoy.ssl.downstream.client.mtls }}'
        - name: ENVOY_DOWNSTREAM_CLIENT_TLS_SECRET_NAME
          value: '{{ .Values.security.envoy.ssl.downstream.client.secret }}'
        - name: ENVOY_DOWNSTREAM_SERVER_TLS_SECRET_NAME
          value: '{{ .Values.security.envoy.ssl.downstream.client.serverValidationSecret
            }}'
        - name: ENVOY_DOWNSTREAM_CLIENT_TLS_KEY_LOCATION
          value: '{{ .Values.security.envoy.ssl.downstream.client.keyPath }}'
        - name: ENVOY_DOWNSTREAM_CLIENT_TLS_CRT_LOCATION
          value: '{{ .Values.security.envoy.ssl.downstream.client.crtPath }}'
        - name: ENVOY_DOWNSTREAM_CLIENT_TLS_CA_LOCATION
          value: '{{ .Values.security.envoy.ssl.downstream.client.caPath }}'
        - name: ENVOY_DOWNSTREAM_SERVER_TLS_CA_LOCATION
          value: '{{ .Values.security.envoy.ssl.downstream.client.serverCaPath }}'
        - name: SELDON_SCHEDULER_PLAINTXT_PORT
          value: "9004"
        - name: SELDON_SCHEDULER_TLS_PORT
          value: "9044"
        - name: MODELGATEWAY_MAX_NUM_CONSUMERS
          value: "100"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: '{{ .Values.modelgateway.image.registry }}/{{ .Values.modelgateway.image.repository
          }}:{{ .Values.modelgateway.image.tag }}'
        imagePullPolicy: '{{ .Values.modelgateway.image.pullPolicy }}'
        name: modelgateway
        resources:
          limits:
            memory: '{{ .Values.modelgateway.resources.memory }}'
          requests:
            cpu: '{{ .Values.modelgateway.resources.cpu }}'
            memory: '{{ .Values.modelgateway.resources.memory }}'
        volumeMounts:
        - mountPath: /mnt/kafka
          name: kafka-config-volume
        - mountPath: /mnt/tracing
          name: tracing-config-volume
      imagePullSecrets:
      - name: '{{ .Values.imagePullSecret }}'
      securityContext: {{- toYaml .Values.modelgateway.securityContext
        | nindent 8 }}
      serviceAccountName: seldon-scheduler
      terminationGracePeriodSeconds: 5
      volumes:
      - configMap:
          name: seldon-kafka
        name: kafka-config-volume
      - configMap:
          name: seldon-tracing
        name: tracing-config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: pipelinegateway
  name: seldon-pipelinegateway
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pipelinegateway
  template:
    metadata:
      labels:
        app: pipelinegateway
    spec:
      containers:
      - args:
        - --http-port=9010
        - --grpc-port=9011
        - --metrics-port=9006
        - --scheduler-host=seldon-scheduler
        - --scheduler-plaintxt-port=$(SELDON_SCHEDULER_PLAINTXT_PORT)
        - --scheduler-tls-port=$(SELDON_SCHEDULER_TLS_PORT)
        - --envoy-host=seldon-mesh
        - --envoy-port=80
        - --kafka-config-path=/mnt/kafka/kafka.json
        - --tracing-config-path=/mnt/tracing/tracing.json
        command:
        - /bin/pipelinegateway
        env:
        - name: KAFKA_SECURITY_PROTOCOL
          value: '{{ .Values.security.kafka.protocol }}'
        - name: KAFKA_SASL_MECHANISM
          value: '{{ .Values.security.kafka.sasl.mechanism }}'
        - name: KAFKA_CLIENT_TLS_SECRET_NAME
          value: '{{ .Values.security.kafka.ssl.client.secret }}'
        - name: KAFKA_CLIENT_TLS_KEY_LOCATION
          value: '{{ .Values.security.kafka.ssl.client.keyPath }}'
        - name: KAFKA_CLIENT_TLS_CRT_LOCATION
          value: '{{ .Values.security.kafka.ssl.client.crtPath }}'
        - name: KAFKA_CLIENT_TLS_CA_LOCATION
          value: '{{ .Values.security.kafka.ssl.client.caPath }}'
        - name: KAFKA_CLIENT_SASL_USERNAME
          value: '{{ .Values.security.kafka.sasl.client.username }}'
        - name: KAFKA_CLIENT_SASL_SECRET_NAME
          value: '{{ .Values.security.kafka.sasl.client.secret }}'
        - name: KAFKA_CLIENT_SASL_PASSWORD_LOCATION
          value: '{{ .Values.security.kafka.sasl.client.passwordPath }}'
        - name: KAFKA_BROKER_TLS_SECRET_NAME
          value: '{{ .Values.security.kafka.ssl.client.brokerValidationSecret }}'
        - name: KAFKA_BROKER_TLS_CA_LOCATION
          value: '{{ .Values.security.kafka.ssl.client.brokerCaPath }}'
        - name: ENVOY_SECURITY_PROTOCOL
          value: '{{ .Values.security.envoy.protocol }}'
        - name: ENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME
          value: '{{ .Values.security.envoy.ssl.upstream.server.secret }}'
        - name: ENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME
          value: '{{ .Values.security.envoy.ssl.upstream.server.clientValidationSecret
            }}'
        - name: ENVOY_UPSTREAM_SERVER_TLS_KEY_LOCATION
          value: '{{ .Values.security.envoy.ssl.upstream.server.keyPath }}'
        - name: ENVOY_UPSTREAM_SERVER_TLS_CRT_LOCATION
          value: '{{ .Values.security.envoy.ssl.upstream.server.crtPath }}'
        - name: ENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION
          value: '{{ .Values.security.envoy.ssl.upstream.server.caPath }}'
        - name: ENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION
          value: '{{ .Values.security.envoy.ssl.upstream.server.clientCaPath }}'
        - name: ENVOY_DOWNSTREAM_CLIENT_MTLS
          value: '{{ .Values.security.envoy.ssl.downstream.client.mtls }}'
        - name: ENVOY_DOWNSTREAM_CLIENT_TLS_SECRET_NAME
          value: '{{ .Values.security.envoy.ssl.downstream.client.secret }}'
        - name: ENVOY_DOWNSTREAM_SERVER_TLS_SECRET_NAME
          value: '{{ .Values.security.envoy.ssl.downstream.client.serverValidationSecret
            }}'
        - name: ENVOY_DOWNSTREAM_CLIENT_TLS_KEY_LOCATION
          value: '{{ .Values.security.envoy.ssl.downstream.client.keyPath }}'
        - name: ENVOY_DOWNSTREAM_CLIENT_TLS_CRT_LOCATION
          value: '{{ .Values.security.envoy.ssl.downstream.client.crtPath }}'
        - name: ENVOY_DOWNSTREAM_CLIENT_TLS_CA_LOCATION
          value: '{{ .Values.security.envoy.ssl.downstream.client.caPath }}'
        - name: ENVOY_DOWNSTREAM_SERVER_TLS_CA_LOCATION
          value: '{{ .Values.security.envoy.ssl.downstream.client.serverCaPath }}'
        - name: CONTROL_PLANE_SECURITY_PROTOCOL
          value: '{{ .Values.security.controlplane.protocol }}'
        - name: CONTROL_PLANE_CLIENT_TLS_SECRET_NAME
          value: '{{ .Values.security.controlplane.ssl.client.secret }}'
        - name: CONTROL_PLANE_SERVER_TLS_SECRET_NAME
          value: '{{ .Values.security.controlplane.ssl.client.serverValidationSecret
            }}'
        - name: CONTROL_PLANE_CLIENT_TLS_KEY_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.keyPath }}'
        - name: CONTROL_PLANE_CLIENT_TLS_CRT_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.crtPath }}'
        - name: CONTROL_PLANE_CLIENT_TLS_CA_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.caPath }}'
        - name: CONTROL_PLANE_SERVER_TLS_CA_LOCATION
          value: '{{ .Values.security.controlplane.ssl.client.serverCaPath }}'
        - name: SELDON_SCHEDULER_PLAINTXT_PORT
          value: "9004"
        - name: SELDON_SCHEDULER_TLS_PORT
          value: "9044"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: '{{ .Values.pipelinegateway.image.registry }}/{{ .Values.pipelinegateway.image.repository
          }}:{{ .Values.pipelinegateway.image.tag }}'
        imagePullPolicy: '{{ .Values.pipelinegateway.image.pullPolicy }}'
        name: pipelinegateway
        ports:
        - containerPort: 9010
          name: http
          protocol: TCP
        - containerPort: 9011
          name: grpc
          protocol: TCP
        - containerPort: 9006
          name: metrics
          protocol: TCP
        resources:
          limits:
            memory: '{{ .Values.pipelinegateway.resources.memory }}'
          requests:
            cpu: '{{ .Values.pipelinegateway.resources.cpu }}'
            memory: '{{ .Values.pipelinegateway.resources.memory }}'
        volumeMounts:
        - mountPath: /mnt/kafka
          name: kafka-config-volume
        - mountPath: /mnt/tracing
          name: tracing-config-volume
      imagePullSecrets:
      - name: '{{ .Values.imagePullSecret }}'
      securityContext: {{- toYaml .Values.pipelinegateway.securityContext
        | nindent 8 }}
      serviceAccountName: seldon-scheduler
      terminationGracePeriodSeconds: 5
      volumes:
      - configMap:
          name: seldon-kafka
        name: kafka-config-volume
      - configMap:
          name: seldon-tracing
        name: tracing-config-volume
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    control-plane: seldon-scheduler
  name: seldon-scheduler
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: seldon-scheduler
  serviceName: seldon-scheduler
  template:
    metadata:
      labels:
        control-plane: seldon-scheduler
    spec:
      containers:
      - args:
        - --pipeline-gateway-host=seldon-pipelinegateway
        - --tracing-config-path=/mnt/tracing/tracing.json
        - --db-path=/mnt/scheduler/db
        - --allow-plaintxt=$(ALLOW_PLAINTXT)
        - --kafka-config-path=/mnt/kafka/kafka.json
        command:
        - /bin/scheduler
        env:
        - name: CONTROL_PLANE_SECURITY_PROTOCOL
          value: '{{ .Values.security.controlplane.protocol }}'
        - name: CONTROL_PLANE_SERVER_TLS_SECRET_NAME
          value: '{{ .Values.security.controlplane.ssl.server.secret }}'
        - name: CONTROL_PLANE_CLIENT_TLS_SECRET_NAME
          value: '{{ .Values.security.controlplane.ssl.server.clientValidationSecret
            }}'
        - name: CONTROL_PLANE_SERVER_TLS_KEY_LOCATION
          value: '{{ .Values.security.controlplane.ssl.server.keyPath }}'
        - name: CONTROL_PLANE_SERVER_TLS_CRT_LOCATION
          value: '{{ .Values.security.controlplane.ssl.server.crtPath }}'
        - name: CONTROL_PLANE_SERVER_TLS_CA_LOCATION
          value: '{{ .Values.security.controlplane.ssl.server.caPath }}'
        - name: CONTROL_PLANE_CLIENT_TLS_CA_LOCATION
          value: '{{ .Values.security.controlplane.ssl.server.clientCaPath }}'
        - name: ENVOY_SECURITY_PROTOCOL
          value: '{{ .Values.security.envoy.protocol }}'
        - name: ENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME
          value: '{{ .Values.security.envoy.ssl.upstream.client.secret }}'
        - name: ENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME
          value: '{{ .Values.security.envoy.ssl.upstream.client.serverValidationSecret
            }}'
        - name: ENVOY_UPSTREAM_CLIENT_TLS_KEY_LOCATION
          value: '{{ .Values.security.envoy.ssl.upstream.client.keyPath }}'
        - name: ENVOY_UPSTREAM_CLIENT_TLS_CRT_LOCATION
          value: '{{ .Values.security.envoy.ssl.upstream.client.crtPath }}'
        - name: ENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION
          value: '{{ .Values.security.envoy.ssl.upstream.client.caPath }}'
        - name: ENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION
          value: '{{ .Values.security.envoy.ssl.upstream.client.serverCaPath }}'
        - name: ENVOY_DOWNSTREAM_SERVER_TLS_SECRET_NAME
          value: '{{ .Values.security.envoy.ssl.downstream.server.secret }}'
        - name: ENVOY_DOWNSTREAM_CLIENT_TLS_SECRET_NAME
          value: '{{ .Values.security.envoy.ssl.downstream.server.clientValidationSecret
            }}'
        - name: ENVOY_DOWNSTREAM_SERVER_TLS_KEY_LOCATION
          value: '{{ .Values.security.envoy.ssl.downstream.server.keyPath }}'
        - name: ENVOY_DOWNSTREAM_SERVER_TLS_CRT_LOCATION
          value: '{{ .Values.security.envoy.ssl.downstream.server.crtPath }}'
        - name: ENVOY_DOWNSTREAM_SERVER_TLS_CA_LOCATION
          value: '{{ .Values.security.envoy.ssl.downstream.server.caPath }}'
        - name: ENVOY_DOWNSTREAM_CLIENT_TLS_CA_LOCATION
          value: '{{ .Values.security.envoy.ssl.downstream.server.clientCaPath }}'
        - name: ALLOW_PLAINTXT
          value: "true"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: '{{ .Values.scheduler.image.registry }}/{{ .Values.scheduler.image.repository
          }}:{{ .Values.scheduler.image.tag }}'
        imagePullPolicy: '{{ .Values.scheduler.image.pullPolicy }}'
        name: scheduler
        ports:
        - containerPort: 9002
          name: xds
        - containerPort: 9004
          name: scheduler
        - containerPort: 9044
          name: scheduler-mtls
        - containerPort: 9005
          name: agent
        - containerPort: 9055
          name: agent-mtls
        - containerPort: 9008
          name: dataflow
        resources:
          limits:
            memory: '{{ .Values.scheduler.resources.memory }}'
          requests:
            cpu: '{{ .Values.scheduler.resources.cpu }}'
            memory: '{{ .Values.scheduler.resources.memory }}'
        volumeMounts:
        - mountPath: /mnt/kafka
          name: kafka-config-volume
        - mountPath: /mnt/tracing
          name: tracing-config-volume
        - mountPath: /mnt/scheduler
          name: scheduler-state
      imagePullSecrets:
      - name: '{{ .Values.imagePullSecret }}'
      securityContext: {{- toYaml .Values.scheduler.securityContext
        | nindent 8 }}
      serviceAccountName: seldon-scheduler
      terminationGracePeriodSeconds: 5
      volumes:
      - configMap:
          name: seldon-kafka
        name: kafka-config-volume
      - configMap:
          name: seldon-tracing
        name: tracing-config-volume
  volumeClaimTemplates:
  - metadata:
      name: scheduler-state
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: '{{ .Values.scheduler.resources.storage }}'
---
apiVersion: mlops.seldon.io/v1alpha1
kind: ServerConfig
metadata:
  name: mlserver
  namespace: '{{ .Release.Namespace }}'
spec:
  podSpec:
    containers:
    - image: '{{ .Values.serverConfig.rclone.image.registry }}/{{ .Values.serverConfig.rclone.image.repository
        }}:{{ .Values.serverConfig.rclone.image.tag }}'
      imagePullPolicy: '{{ .Values.serverConfig.rclone.image.pullPolicy }}'
      lifecycle:
        preStop:
          httpGet:
            path: terminate
            port: 9007
      name: rclone
      ports:
      - containerPort: 5572
        name: rclone
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        tcpSocket:
          port: 5572
        timeoutSeconds: 1
      resources:
        limits:
          memory: '{{ .Values.serverConfig.rclone.resources.memory }}'
        requests:
          cpu: '{{ .Values.serverConfig.rclone.resources.cpu }}'
          memory: '{{ .Values.serverConfig.rclone.resources.memory }}'
      volumeMounts:
      - mountPath: /mnt/agent
        name: mlserver-models
    - args:
      - --tracing-config-path=/mnt/tracing/tracing.json
      command:
      - /bin/agent
      env:
      - name: SELDON_SERVER_CAPABILITIES
        value: '{{ .Values.serverConfig.mlserver.serverCapabilities }}'
      - name: SELDON_MODEL_INFERENCE_LAG_THRESHOLD
        value: '{{ .Values.serverConfig.agent.modelInferenceLagThreshold }}'
      - name: SELDON_MODEL_INACTIVE_SECONDS_THRESHOLD
        value: '{{ .Values.serverConfig.agent.modelInactiveSecondsThreshold }}'
      - name: SELDON_SCALING_STATS_PERIOD_SECONDS
        value: '{{ .Values.serverConfig.agent.scalingStatsPeriodSeconds }}'
      - name: SELDON_OVERCOMMIT_PERCENTAGE
        value: '{{ .Values.serverConfig.agent.overcommitPercentage }}'
      - name: CONTROL_PLANE_SECURITY_PROTOCOL
        value: '{{ .Values.security.controlplane.protocol }}'
      - name: CONTROL_PLANE_CLIENT_TLS_SECRET_NAME
        value: '{{ .Values.security.controlplane.ssl.client.secret }}'
      - name: CONTROL_PLANE_SERVER_TLS_SECRET_NAME
        value: '{{ .Values.security.controlplane.ssl.client.serverValidationSecret
          }}'
      - name: CONTROL_PLANE_CLIENT_TLS_KEY_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.keyPath }}'
      - name: CONTROL_PLANE_CLIENT_TLS_CRT_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.crtPath }}'
      - name: CONTROL_PLANE_CLIENT_TLS_CA_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.caPath }}'
      - name: CONTROL_PLANE_SERVER_TLS_CA_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.serverCaPath }}'
      - name: ENVOY_SECURITY_PROTOCOL
        value: '{{ .Values.security.envoy.protocol }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME
        value: '{{ .Values.security.envoy.ssl.upstream.server.secret }}'
      - name: ENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME
        value: '{{ .Values.security.envoy.ssl.upstream.server.clientValidationSecret
          }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_KEY_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.keyPath }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_CRT_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.crtPath }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.caPath }}'
      - name: ENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.clientCaPath }}'
      - name: SELDON_SERVER_HTTP_PORT
        value: "9000"
      - name: SELDON_SERVER_GRPC_PORT
        value: "9500"
      - name: SELDON_REVERSE_PROXY_HTTP_PORT
        value: "9001"
      - name: SELDON_REVERSE_PROXY_GRPC_PORT
        value: "9501"
      - name: SELDON_SCHEDULER_HOST
        value: seldon-scheduler
      - name: SELDON_SCHEDULER_PORT
        value: "9005"
      - name: SELDON_SCHEDULER_TLS_PORT
        value: "9055"
      - name: SELDON_METRICS_PORT
        value: "9006"
      - name: SELDON_DRAINER_PORT
        value: "9007"
      - name: AGENT_TLS_SECRET_NAME
        value: ""
      - name: AGENT_TLS_FOLDER_PATH
        value: ""
      - name: SELDON_SERVER_TYPE
        value: mlserver
      - name: SELDON_ENVOY_HOST
        value: seldon-mesh
      - name: SELDON_ENVOY_PORT
        value: "80"
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: MEMORY_REQUEST
        valueFrom:
          resourceFieldRef:
            containerName: mlserver
            resource: requests.memory
      image: '{{ .Values.serverConfig.agent.image.registry }}/{{ .Values.serverConfig.agent.image.repository
        }}:{{ .Values.serverConfig.agent.image.tag }}'
      imagePullPolicy: '{{ .Values.serverConfig.agent.image.pullPolicy }}'
      lifecycle:
        preStop:
          httpGet:
            path: terminate
            port: 9007
      name: agent
      ports:
      - containerPort: 9501
        name: grpc
        protocol: TCP
      - containerPort: 9001
        name: http
        protocol: TCP
      - containerPort: 9006
        name: metrics
        protocol: TCP
      resources:
        limits:
          memory: '{{ .Values.serverConfig.agent.resources.memory }}'
        requests:
          cpu: '{{ .Values.serverConfig.agent.resources.cpu }}'
          memory: '{{ .Values.serverConfig.agent.resources.memory }}'
      volumeMounts:
      - mountPath: /mnt/agent
        name: mlserver-models
      - mountPath: /mnt/config
        name: config-volume
      - mountPath: /mnt/tracing
        name: tracing-config-volume
    - env:
      - name: MLSERVER_HTTP_PORT
        value: "9000"
      - name: MLSERVER_GRPC_PORT
        value: "9500"
      - name: MLSERVER_MODELS_DIR
        value: /mnt/agent/models
      - name: MLSERVER_MODEL_PARALLEL_WORKERS
        value: "1"
      - name: MLSERVER_LOAD_MODELS_AT_STARTUP
        value: "false"
      - name: MLSERVER_GRPC_MAX_MESSAGE_LENGTH
        value: "1048576000"
      image: '{{ .Values.serverConfig.mlserver.image.registry }}/{{ .Values.serverConfig.mlserver.image.repository
        }}:{{ .Values.serverConfig.mlserver.image.tag }}'
      imagePullPolicy: '{{ .Values.serverConfig.mlserver.image.pullPolicy }}'
      lifecycle:
        preStop:
          httpGet:
            path: terminate
            port: 9007
      livenessProbe:
        httpGet:
          path: /v2/health/live
          port: server-http
      name: mlserver
      ports:
      - containerPort: 9500
        name: server-grpc
        protocol: TCP
      - containerPort: 9000
        name: server-http
        protocol: TCP
      readinessProbe:
        httpGet:
          path: /v2/health/live
          port: server-http
        initialDelaySeconds: 5
        periodSeconds: 5
      resources:
        limits:
          memory: '{{ .Values.serverConfig.mlserver.resources.memory }}'
        requests:
          cpu: '{{ .Values.serverConfig.mlserver.resources.cpu }}'
          memory: '{{ .Values.serverConfig.mlserver.resources.memory }}'
      startupProbe:
        failureThreshold: 10
        httpGet:
          path: /v2/health/live
          port: server-http
        periodSeconds: 10
      volumeMounts:
      - mountPath: /mnt/agent
        name: mlserver-models
        readOnly: true
      - mountPath: /mnt/certs
        name: downstream-ca-certs
        readOnly: true
    imagePullSecrets:
    - name: '{{ .Values.imagePullSecret }}'
    securityContext: {{- toYaml .Values.serverConfig.securityContext
      | nindent 6 }}
    serviceAccountName: seldon-server
    terminationGracePeriodSeconds: {{ .Values.serverConfig.terminationGracePeriodSeconds
      }}
    volumes:
    - name: downstream-ca-certs
      secret:
        optional: true
        secretName: '{{ .Values.security.envoy.ssl.downstream.client.serverValidationSecret
          }}'
    - configMap:
        name: seldon-agent
      name: config-volume
    - configMap:
        name: seldon-tracing
      name: tracing-config-volume
  volumeClaimTemplates:
  - name: mlserver-models
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: '{{ .Values.serverConfig.mlserver.modelVolumeStorage }}'
---
apiVersion: mlops.seldon.io/v1alpha1
kind: ServerConfig
metadata:
  name: triton
  namespace: '{{ .Release.Namespace }}'
spec:
  podSpec:
    containers:
    - image: '{{ .Values.serverConfig.rclone.image.registry }}/{{ .Values.serverConfig.rclone.image.repository
        }}:{{ .Values.serverConfig.rclone.image.tag }}'
      imagePullPolicy: '{{ .Values.serverConfig.rclone.image.pullPolicy }}'
      lifecycle:
        preStop:
          httpGet:
            path: terminate
            port: 9007
      name: rclone
      ports:
      - containerPort: 5572
        name: rclone
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        tcpSocket:
          port: 5572
        timeoutSeconds: 1
      resources:
        limits:
          memory: '{{ .Values.serverConfig.rclone.resources.memory }}'
        requests:
          cpu: '{{ .Values.serverConfig.rclone.resources.cpu }}'
          memory: '{{ .Values.serverConfig.rclone.resources.memory }}'
      volumeMounts:
      - mountPath: /mnt/agent
        name: triton-models
    - args:
      - --tracing-config-path=/mnt/tracing/tracing.json
      command:
      - /bin/agent
      env:
      - name: SELDON_SERVER_CAPABILITIES
        value: '{{ .Values.serverConfig.triton.serverCapabilities }}'
      - name: SELDON_MODEL_INFERENCE_LAG_THRESHOLD
        value: '{{ .Values.serverConfig.agent.modelInferenceLagThreshold }}'
      - name: SELDON_MODEL_INACTIVE_SECONDS_THRESHOLD
        value: '{{ .Values.serverConfig.agent.modelInactiveSecondsThreshold }}'
      - name: SELDON_SCALING_STATS_PERIOD_SECONDS
        value: '{{ .Values.serverConfig.agent.scalingStatsPeriodSeconds }}'
      - name: SELDON_OVERCOMMIT_PERCENTAGE
        value: '{{ .Values.serverConfig.agent.overcommitPercentage }}'
      - name: CONTROL_PLANE_SECURITY_PROTOCOL
        value: '{{ .Values.security.controlplane.protocol }}'
      - name: CONTROL_PLANE_CLIENT_TLS_SECRET_NAME
        value: '{{ .Values.security.controlplane.ssl.client.secret }}'
      - name: CONTROL_PLANE_SERVER_TLS_SECRET_NAME
        value: '{{ .Values.security.controlplane.ssl.client.serverValidationSecret
          }}'
      - name: CONTROL_PLANE_CLIENT_TLS_KEY_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.keyPath }}'
      - name: CONTROL_PLANE_CLIENT_TLS_CRT_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.crtPath }}'
      - name: CONTROL_PLANE_CLIENT_TLS_CA_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.caPath }}'
      - name: CONTROL_PLANE_SERVER_TLS_CA_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.serverCaPath }}'
      - name: ENVOY_SECURITY_PROTOCOL
        value: '{{ .Values.security.envoy.protocol }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME
        value: '{{ .Values.security.envoy.ssl.upstream.server.secret }}'
      - name: ENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME
        value: '{{ .Values.security.envoy.ssl.upstream.server.clientValidationSecret
          }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_KEY_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.keyPath }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_CRT_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.crtPath }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.caPath }}'
      - name: ENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.clientCaPath }}'
      - name: SELDON_SERVER_HTTP_PORT
        value: "9000"
      - name: SELDON_SERVER_GRPC_PORT
        value: "9500"
      - name: SELDON_REVERSE_PROXY_HTTP_PORT
        value: "9001"
      - name: SELDON_REVERSE_PROXY_GRPC_PORT
        value: "9501"
      - name: AGENT_TLS_SECRET_NAME
        value: ""
      - name: AGENT_TLS_FOLDER_PATH
        value: ""
      - name: SELDON_SCHEDULER_HOST
        value: seldon-scheduler
      - name: SELDON_SCHEDULER_PORT
        value: "9005"
      - name: SELDON_METRICS_PORT
        value: "9006"
      - name: SELDON_DRAINER_PORT
        value: "9007"
      - name: SELDON_SERVER_TYPE
        value: triton
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: MEMORY_REQUEST
        valueFrom:
          resourceFieldRef:
            containerName: triton
            resource: requests.memory
      image: '{{ .Values.serverConfig.agent.image.registry }}/{{ .Values.serverConfig.agent.image.repository
        }}:{{ .Values.serverConfig.agent.image.tag }}'
      imagePullPolicy: '{{ .Values.serverConfig.agent.image.pullPolicy }}'
      lifecycle:
        preStop:
          httpGet:
            path: terminate
            port: 9007
      name: agent
      ports:
      - containerPort: 9501
        name: grpc
        protocol: TCP
      - containerPort: 9001
        name: http
        protocol: TCP
      - containerPort: 9006
        name: metrics
        protocol: TCP
      resources:
        limits:
          memory: '{{ .Values.serverConfig.agent.resources.memory }}'
        requests:
          cpu: '{{ .Values.serverConfig.agent.resources.cpu }}'
          memory: '{{ .Values.serverConfig.agent.resources.memory }}'
      volumeMounts:
      - mountPath: /mnt/agent
        name: triton-models
      - mountPath: /mnt/config
        name: config-volume
      - mountPath: /mnt/tracing
        name: tracing-config-volume
    - args:
      - --model-repository=$(SERVER_MODELS_DIR)
      - --http-port=$(SERVER_HTTP_PORT)
      - --grpc-port=$(SERVER_GRPC_PORT)
      - --log-verbose=1
      - --model-control-mode=explicit
      - --backend-config=python,shm-default-byte-size=16777216
      command:
      - /opt/tritonserver/bin/tritonserver
      env:
      - name: SERVER_HTTP_PORT
        value: "9000"
      - name: SERVER_GRPC_PORT
        value: "9500"
      - name: SERVER_MODELS_DIR
        value: /mnt/agent/models
      - name: LD_PRELOAD
        value: /usr/lib/x86_64-linux-gnu/libtcmalloc.so.4
      image: '{{ .Values.serverConfig.triton.image.registry }}/{{ .Values.serverConfig.triton.image.repository
        }}:{{ .Values.serverConfig.triton.image.tag }}'
      imagePullPolicy: '{{ .Values.serverConfig.triton.image.pullPolicy }}'
      lifecycle:
        preStop:
          httpGet:
            path: terminate
            port: 9007
      livenessProbe:
        httpGet:
          path: /v2/health/live
          port: server-http
      name: triton
      ports:
      - containerPort: 9500
        name: server-grpc
        protocol: TCP
      - containerPort: 9000
        name: server-http
        protocol: TCP
      - containerPort: 8002
        name: server-metrics
      readinessProbe:
        httpGet:
          path: /v2/health/live
          port: server-http
        initialDelaySeconds: 5
        periodSeconds: 5
      resources:
        limits:
          memory: '{{ .Values.serverConfig.triton.resources.memory }}'
        requests:
          cpu: '{{ .Values.serverConfig.triton.resources.cpu }}'
          memory: '{{ .Values.serverConfig.triton.resources.memory }}'
      startupProbe:
        failureThreshold: 10
        httpGet:
          path: /v2/health/live
          port: server-http
        periodSeconds: 10
      volumeMounts:
      - mountPath: /mnt/agent
        name: triton-models
        readOnly: true
      - mountPath: /dev/shm
        name: dshm
        readOnly: false
    imagePullSecrets:
    - name: '{{ .Values.imagePullSecret }}'
    securityContext: {{- toYaml .Values.serverConfig.securityContext
      | nindent 6 }}
    serviceAccountName: seldon-server
    terminationGracePeriodSeconds: {{ .Values.serverConfig.terminationGracePeriodSeconds
      }}
    volumes:
    - configMap:
        name: seldon-agent
      name: config-volume
    - configMap:
        name: seldon-tracing
      name: tracing-config-volume
    - emptyDir:
        medium: Memory
        sizeLimit: 256Mi
      name: dshm
  volumeClaimTemplates:
  - name: triton-models
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: '{{ .Values.serverConfig.triton.modelVolumeStorage }}'
