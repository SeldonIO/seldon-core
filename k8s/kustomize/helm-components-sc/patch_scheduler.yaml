apiVersion: mlops.seldon.io/v1alpha1
kind: SeldonConfig
metadata:
  name: default
spec:
  components:
  - name: seldon-scheduler
    replicas: 1
    podSpec:
      imagePullSecrets: []
      containers:
      - image: '{{ .Values.scheduler.image.registry }}/{{ .Values.scheduler.image.repository }}:{{ .Values.scheduler.image.tag }}'
        imagePullPolicy: '{{ .Values.scheduler.image.pullPolicy }}'
        name: scheduler
        resources:
          requests:
            cpu: '{{ .Values.scheduler.resources.cpu }}'
            memory: '{{ .Values.scheduler.resources.memory }}'
          limits:
            memory: '{{ .Values.scheduler.resources.memory }}'
        env:
          - name: KAFKA_SECURITY_PROTOCOL
            value: '{{ .Values.security.kafka.protocol }}'
          - name: KAFKA_SASL_MECHANISM
            value: '{{ .Values.security.kafka.sasl.mechanism }}'
          - name: KAFKA_CLIENT_TLS_ENDPOINT_IDENTIFICATION_ALGORITHM
            value: '{{ .Values.security.kafka.ssl.client.endpointIdentificationAlgorithm }}'
          - name: KAFKA_CLIENT_TLS_SECRET_NAME
            value: '{{ .Values.security.kafka.ssl.client.secret }}'
          - name: KAFKA_CLIENT_TLS_KEY_LOCATION
            value: '{{ .Values.security.kafka.ssl.client.keyPath }}'
          - name: KAFKA_CLIENT_TLS_CRT_LOCATION
            value: '{{ .Values.security.kafka.ssl.client.crtPath }}'
          - name: KAFKA_CLIENT_TLS_CA_LOCATION
            value: '{{ .Values.security.kafka.ssl.client.caPath }}'
          - name: KAFKA_CLIENT_SASL_USERNAME
            value: '{{ .Values.security.kafka.sasl.client.username }}'
          - name: KAFKA_CLIENT_SASL_SECRET_NAME
            value: '{{ .Values.security.kafka.sasl.client.secret }}'
          - name: KAFKA_CLIENT_SASL_PASSWORD_LOCATION
            value: '{{ .Values.security.kafka.sasl.client.passwordPath }}'
          - name: KAFKA_BROKER_TLS_SECRET_NAME
            value: '{{ .Values.security.kafka.ssl.client.brokerValidationSecret }}'
          - name: KAFKA_BROKER_TLS_CA_LOCATION
            value: '{{ .Values.security.kafka.ssl.client.brokerCaPath }}'
          - name: CONTROL_PLANE_SECURITY_PROTOCOL
            value: '{{ .Values.security.controlplane.protocol }}'
          - name: CONTROL_PLANE_SERVER_TLS_SECRET_NAME
            value: '{{ .Values.security.controlplane.ssl.server.secret }}'
          - name: CONTROL_PLANE_CLIENT_TLS_SECRET_NAME
            value: '{{ .Values.security.controlplane.ssl.server.clientValidationSecret }}'
          - name: CONTROL_PLANE_SERVER_TLS_KEY_LOCATION
            value: '{{ .Values.security.controlplane.ssl.server.keyPath }}'
          - name: CONTROL_PLANE_SERVER_TLS_CRT_LOCATION
            value: '{{ .Values.security.controlplane.ssl.server.crtPath }}'
          - name: CONTROL_PLANE_SERVER_TLS_CA_LOCATION
            value: '{{ .Values.security.controlplane.ssl.server.caPath }}'
          - name: CONTROL_PLANE_CLIENT_TLS_CA_LOCATION
            value: '{{ .Values.security.controlplane.ssl.server.clientCaPath }}'
          - name: ENVOY_SECURITY_PROTOCOL
            value: '{{ .Values.security.envoy.protocol }}'
          - name: ENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME
            value: '{{ .Values.security.envoy.ssl.upstream.client.secret }}'
          - name: ENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME
            value: '{{ .Values.security.envoy.ssl.upstream.client.serverValidationSecret }}'
          - name: ENVOY_UPSTREAM_CLIENT_TLS_KEY_LOCATION
            value: '{{ .Values.security.envoy.ssl.upstream.client.keyPath }}'
          - name: ENVOY_UPSTREAM_CLIENT_TLS_CRT_LOCATION
            value: '{{ .Values.security.envoy.ssl.upstream.client.crtPath }}'
          - name: ENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION
            value: '{{ .Values.security.envoy.ssl.upstream.client.caPath }}'
          - name: ENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION
            value: '{{ .Values.security.envoy.ssl.upstream.client.serverCaPath }}'
          - name: ENVOY_DOWNSTREAM_SERVER_TLS_SECRET_NAME
            value: '{{ .Values.security.envoy.ssl.downstream.server.secret }}'
          - name: ENVOY_DOWNSTREAM_CLIENT_TLS_SECRET_NAME
            value: '{{ .Values.security.envoy.ssl.downstream.server.clientValidationSecret }}'
          - name: ENVOY_DOWNSTREAM_SERVER_TLS_KEY_LOCATION
            value: '{{ .Values.security.envoy.ssl.downstream.server.keyPath }}'
          - name: ENVOY_DOWNSTREAM_SERVER_TLS_CRT_LOCATION
            value: '{{ .Values.security.envoy.ssl.downstream.server.crtPath }}'
          - name: ENVOY_DOWNSTREAM_SERVER_TLS_CA_LOCATION
            value: '{{ .Values.security.envoy.ssl.downstream.server.caPath }}'
          - name: ENVOY_DOWNSTREAM_CLIENT_TLS_CA_LOCATION
            value: '{{ .Values.security.envoy.ssl.downstream.server.clientCaPath }}'
          - name: SCHEDULER_READY_TIMEOUT_SECONDS
            value: '{{ .Values.scheduler.schedulerReadyTimeoutSeconds }}'
          - name: SERVER_PACKING_ENABLED
            value: '{{ .Values.autoscaling.serverPackingEnabled }}'
          - name: SERVER_PACKING_PERCENTAGE
            value: '{{ .Values.autoscaling.serverPackingPercentage }}'
          - name: ENVOY_ACCESSLOG_PATH
            value: '{{ .Values.envoy.accesslogPath }}'
          - name: ENABLE_ENVOY_ACCESSLOG
            value: '{{ .Values.envoy.enableAccesslog }}'
          - name: INCLUDE_SUCCESSFUL_REQUESTS_ENVOY_ACCESSLOG
            value: '{{ .Values.envoy.includeSuccessfulRequests }}'
          - name: ENABLE_MODEL_AUTOSCALING
            value: '{{ .Values.autoscaling.autoscalingModelEnabled }}'
          - name: ENABLE_SERVER_AUTOSCALING
            value: '{{ .Values.autoscaling.autoscalingServerEnabled }}'
          - name: LOG_LEVEL
            value: '{{ hasKey .Values.scheduler "logLevel" | ternary .Values.scheduler.logLevel .Values.logging.logLevel }}'
    volumeClaimTemplates:
    - name: scheduler-state
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: '{{ .Values.scheduler.resources.storage }}'
