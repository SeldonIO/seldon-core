// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction.proto

#include "prediction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DefaultData_prediction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Meta_prediction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Meta_RequestPathEntry_DoNotUse_prediction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Meta_RoutingEntry_DoNotUse_prediction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Meta_TagsEntry_DoNotUse_prediction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metric_prediction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Metric_TagsEntry_DoNotUse_prediction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SeldonGraphMetadata_ModelsEntry_DoNotUse_prediction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SeldonMessage_prediction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SeldonMessageMetadata_prediction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SeldonModelMetadata_prediction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SeldonModelMetadata_CustomEntry_DoNotUse_prediction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_prediction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tensor_prediction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto;
namespace seldon {
namespace protos {
class SeldonMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeldonMessage> _instance;
} _SeldonMessage_default_instance_;
class DefaultDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefaultData> _instance;
} _DefaultData_default_instance_;
class TensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tensor> _instance;
} _Tensor_default_instance_;
class Meta_TagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Meta_TagsEntry_DoNotUse> _instance;
} _Meta_TagsEntry_DoNotUse_default_instance_;
class Meta_RoutingEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Meta_RoutingEntry_DoNotUse> _instance;
} _Meta_RoutingEntry_DoNotUse_default_instance_;
class Meta_RequestPathEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Meta_RequestPathEntry_DoNotUse> _instance;
} _Meta_RequestPathEntry_DoNotUse_default_instance_;
class MetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Meta> _instance;
} _Meta_default_instance_;
class Metric_TagsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metric_TagsEntry_DoNotUse> _instance;
} _Metric_TagsEntry_DoNotUse_default_instance_;
class MetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metric> _instance;
} _Metric_default_instance_;
class SeldonMessageListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeldonMessageList> _instance;
} _SeldonMessageList_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class FeedbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Feedback> _instance;
} _Feedback_default_instance_;
class RequestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestResponse> _instance;
} _RequestResponse_default_instance_;
class SeldonModelMetadataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeldonModelMetadataRequest> _instance;
} _SeldonModelMetadataRequest_default_instance_;
class SeldonMessageMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeldonMessageMetadata> _instance;
} _SeldonMessageMetadata_default_instance_;
class SeldonModelMetadata_CustomEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeldonModelMetadata_CustomEntry_DoNotUse> _instance;
} _SeldonModelMetadata_CustomEntry_DoNotUse_default_instance_;
class SeldonModelMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeldonModelMetadata> _instance;
} _SeldonModelMetadata_default_instance_;
class SeldonGraphMetadata_ModelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeldonGraphMetadata_ModelsEntry_DoNotUse> _instance;
} _SeldonGraphMetadata_ModelsEntry_DoNotUse_default_instance_;
class SeldonGraphMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeldonGraphMetadata> _instance;
} _SeldonGraphMetadata_default_instance_;
}  // namespace protos
}  // namespace seldon
static void InitDefaultsscc_info_DefaultData_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_DefaultData_default_instance_;
    new (ptr) ::seldon::protos::DefaultData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DefaultData_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DefaultData_prediction_2eproto}, {
      &scc_info_Tensor_prediction_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto.base,}};

static void InitDefaultsscc_info_Feedback_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_Feedback_default_instance_;
    new (ptr) ::seldon::protos::Feedback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Feedback_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Feedback_prediction_2eproto}, {
      &scc_info_SeldonMessage_prediction_2eproto.base,}};

static void InitDefaultsscc_info_Meta_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_Meta_default_instance_;
    new (ptr) ::seldon::protos::Meta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Meta_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Meta_prediction_2eproto}, {
      &scc_info_Meta_TagsEntry_DoNotUse_prediction_2eproto.base,
      &scc_info_Meta_RoutingEntry_DoNotUse_prediction_2eproto.base,
      &scc_info_Meta_RequestPathEntry_DoNotUse_prediction_2eproto.base,
      &scc_info_Metric_prediction_2eproto.base,}};

static void InitDefaultsscc_info_Meta_RequestPathEntry_DoNotUse_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_Meta_RequestPathEntry_DoNotUse_default_instance_;
    new (ptr) ::seldon::protos::Meta_RequestPathEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Meta_RequestPathEntry_DoNotUse_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Meta_RequestPathEntry_DoNotUse_prediction_2eproto}, {}};

static void InitDefaultsscc_info_Meta_RoutingEntry_DoNotUse_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_Meta_RoutingEntry_DoNotUse_default_instance_;
    new (ptr) ::seldon::protos::Meta_RoutingEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Meta_RoutingEntry_DoNotUse_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Meta_RoutingEntry_DoNotUse_prediction_2eproto}, {}};

static void InitDefaultsscc_info_Meta_TagsEntry_DoNotUse_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_Meta_TagsEntry_DoNotUse_default_instance_;
    new (ptr) ::seldon::protos::Meta_TagsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Meta_TagsEntry_DoNotUse_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Meta_TagsEntry_DoNotUse_prediction_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_Metric_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_Metric_default_instance_;
    new (ptr) ::seldon::protos::Metric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metric_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Metric_prediction_2eproto}, {
      &scc_info_Metric_TagsEntry_DoNotUse_prediction_2eproto.base,}};

static void InitDefaultsscc_info_Metric_TagsEntry_DoNotUse_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_Metric_TagsEntry_DoNotUse_default_instance_;
    new (ptr) ::seldon::protos::Metric_TagsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Metric_TagsEntry_DoNotUse_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Metric_TagsEntry_DoNotUse_prediction_2eproto}, {}};

static void InitDefaultsscc_info_RequestResponse_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_RequestResponse_default_instance_;
    new (ptr) ::seldon::protos::RequestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestResponse_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RequestResponse_prediction_2eproto}, {
      &scc_info_SeldonMessage_prediction_2eproto.base,}};

static void InitDefaultsscc_info_SeldonGraphMetadata_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_SeldonGraphMetadata_default_instance_;
    new (ptr) ::seldon::protos::SeldonGraphMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SeldonGraphMetadata_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SeldonGraphMetadata_prediction_2eproto}, {
      &scc_info_SeldonGraphMetadata_ModelsEntry_DoNotUse_prediction_2eproto.base,
      &scc_info_SeldonMessageMetadata_prediction_2eproto.base,}};

static void InitDefaultsscc_info_SeldonGraphMetadata_ModelsEntry_DoNotUse_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_SeldonGraphMetadata_ModelsEntry_DoNotUse_default_instance_;
    new (ptr) ::seldon::protos::SeldonGraphMetadata_ModelsEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SeldonGraphMetadata_ModelsEntry_DoNotUse_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SeldonGraphMetadata_ModelsEntry_DoNotUse_prediction_2eproto}, {
      &scc_info_SeldonModelMetadata_prediction_2eproto.base,}};

static void InitDefaultsscc_info_SeldonMessage_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_SeldonMessage_default_instance_;
    new (ptr) ::seldon::protos::SeldonMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_SeldonMessage_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_SeldonMessage_prediction_2eproto}, {
      &scc_info_Status_prediction_2eproto.base,
      &scc_info_Meta_prediction_2eproto.base,
      &scc_info_DefaultData_prediction_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_SeldonMessageList_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_SeldonMessageList_default_instance_;
    new (ptr) ::seldon::protos::SeldonMessageList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SeldonMessageList_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SeldonMessageList_prediction_2eproto}, {
      &scc_info_SeldonMessage_prediction_2eproto.base,}};

static void InitDefaultsscc_info_SeldonMessageMetadata_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_SeldonMessageMetadata_default_instance_;
    new (ptr) ::seldon::protos::SeldonMessageMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SeldonMessageMetadata_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SeldonMessageMetadata_prediction_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_SeldonModelMetadata_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_SeldonModelMetadata_default_instance_;
    new (ptr) ::seldon::protos::SeldonModelMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SeldonModelMetadata_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SeldonModelMetadata_prediction_2eproto}, {
      &scc_info_SeldonMessageMetadata_prediction_2eproto.base,
      &scc_info_SeldonModelMetadata_CustomEntry_DoNotUse_prediction_2eproto.base,}};

static void InitDefaultsscc_info_SeldonModelMetadata_CustomEntry_DoNotUse_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_SeldonModelMetadata_CustomEntry_DoNotUse_default_instance_;
    new (ptr) ::seldon::protos::SeldonModelMetadata_CustomEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SeldonModelMetadata_CustomEntry_DoNotUse_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SeldonModelMetadata_CustomEntry_DoNotUse_prediction_2eproto}, {}};

static void InitDefaultsscc_info_SeldonModelMetadataRequest_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_SeldonModelMetadataRequest_default_instance_;
    new (ptr) ::seldon::protos::SeldonModelMetadataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SeldonModelMetadataRequest_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SeldonModelMetadataRequest_prediction_2eproto}, {}};

static void InitDefaultsscc_info_Status_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_Status_default_instance_;
    new (ptr) ::seldon::protos::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Status_prediction_2eproto}, {}};

static void InitDefaultsscc_info_Tensor_prediction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::seldon::protos::_Tensor_default_instance_;
    new (ptr) ::seldon::protos::Tensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tensor_prediction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Tensor_prediction_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_prediction_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_prediction_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_prediction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_prediction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonMessage, status_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonMessage, meta_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonMessage, data_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::DefaultData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::DefaultData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::DefaultData, names_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::seldon::protos::DefaultData, data_oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Tensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Tensor, shape_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Tensor, values_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta_TagsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta_RoutingEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta_RoutingEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta_RoutingEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta_RoutingEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta_RequestPathEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta_RequestPathEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta_RequestPathEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta_RequestPathEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta, puid_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta, tags_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta, routing_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta, requestpath_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Meta, metrics_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Metric_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Metric_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Metric_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Metric_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Metric, key_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Metric, type_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Metric, value_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Metric, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonMessageList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonMessageList, seldonmessages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Status, code_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Status, info_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Status, reason_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Status, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Feedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Feedback, request_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Feedback, response_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Feedback, reward_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::Feedback, truth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::RequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::RequestResponse, request_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::RequestResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonModelMetadataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonModelMetadataRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonMessageMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonMessageMetadata, messagetype_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonMessageMetadata, schema_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonMessageMetadata, name_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonMessageMetadata, datatype_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonMessageMetadata, shape_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonModelMetadata_CustomEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonModelMetadata_CustomEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonModelMetadata_CustomEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonModelMetadata_CustomEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonModelMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonModelMetadata, name_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonModelMetadata, versions_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonModelMetadata, platform_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonModelMetadata, inputs_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonModelMetadata, outputs_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonModelMetadata, custom_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonGraphMetadata_ModelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonGraphMetadata_ModelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonGraphMetadata_ModelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonGraphMetadata_ModelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonGraphMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonGraphMetadata, name_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonGraphMetadata, models_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonGraphMetadata, inputs_),
  PROTOBUF_FIELD_OFFSET(::seldon::protos::SeldonGraphMetadata, outputs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::seldon::protos::SeldonMessage)},
  { 13, -1, sizeof(::seldon::protos::DefaultData)},
  { 23, -1, sizeof(::seldon::protos::Tensor)},
  { 30, 37, sizeof(::seldon::protos::Meta_TagsEntry_DoNotUse)},
  { 39, 46, sizeof(::seldon::protos::Meta_RoutingEntry_DoNotUse)},
  { 48, 55, sizeof(::seldon::protos::Meta_RequestPathEntry_DoNotUse)},
  { 57, -1, sizeof(::seldon::protos::Meta)},
  { 67, 74, sizeof(::seldon::protos::Metric_TagsEntry_DoNotUse)},
  { 76, -1, sizeof(::seldon::protos::Metric)},
  { 85, -1, sizeof(::seldon::protos::SeldonMessageList)},
  { 91, -1, sizeof(::seldon::protos::Status)},
  { 100, -1, sizeof(::seldon::protos::Feedback)},
  { 109, -1, sizeof(::seldon::protos::RequestResponse)},
  { 116, -1, sizeof(::seldon::protos::SeldonModelMetadataRequest)},
  { 122, -1, sizeof(::seldon::protos::SeldonMessageMetadata)},
  { 132, 139, sizeof(::seldon::protos::SeldonModelMetadata_CustomEntry_DoNotUse)},
  { 141, -1, sizeof(::seldon::protos::SeldonModelMetadata)},
  { 152, 159, sizeof(::seldon::protos::SeldonGraphMetadata_ModelsEntry_DoNotUse)},
  { 161, -1, sizeof(::seldon::protos::SeldonGraphMetadata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_SeldonMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_DefaultData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_Tensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_Meta_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_Meta_RoutingEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_Meta_RequestPathEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_Meta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_Metric_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_Metric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_SeldonMessageList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_Feedback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_RequestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_SeldonModelMetadataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_SeldonMessageMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_SeldonModelMetadata_CustomEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_SeldonModelMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_SeldonGraphMetadata_ModelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::seldon::protos::_SeldonGraphMetadata_default_instance_),
};

const char descriptor_table_protodef_prediction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020prediction.proto\022\rseldon.protos\032\031googl"
  "e/protobuf/any.proto\032\034google/protobuf/st"
  "ruct.proto\032\033google/protobuf/empty.proto\032"
  "&tensorflow/core/framework/tensor.proto\""
  "\221\002\n\rSeldonMessage\022%\n\006status\030\001 \001(\0132\025.seld"
  "on.protos.Status\022!\n\004meta\030\002 \001(\0132\023.seldon."
  "protos.Meta\022*\n\004data\030\003 \001(\0132\032.seldon.proto"
  "s.DefaultDataH\000\022\021\n\007binData\030\004 \001(\014H\000\022\021\n\007st"
  "rData\030\005 \001(\tH\000\022*\n\010jsonData\030\006 \001(\0132\026.google"
  ".protobuf.ValueH\000\022*\n\ncustomData\030\007 \001(\0132\024."
  "google.protobuf.AnyH\000B\014\n\ndata_oneof\"\257\001\n\013"
  "DefaultData\022\r\n\005names\030\001 \003(\t\022\'\n\006tensor\030\002 \001"
  "(\0132\025.seldon.protos.TensorH\000\022-\n\007ndarray\030\003"
  " \001(\0132\032.google.protobuf.ListValueH\000\022+\n\010tf"
  "tensor\030\004 \001(\0132\027.tensorflow.TensorProtoH\000B"
  "\014\n\ndata_oneof\"/\n\006Tensor\022\021\n\005shape\030\001 \003(\005B\002"
  "\020\001\022\022\n\006values\030\002 \003(\001B\002\020\001\"\200\003\n\004Meta\022\014\n\004puid\030"
  "\001 \001(\t\022+\n\004tags\030\002 \003(\0132\035.seldon.protos.Meta"
  ".TagsEntry\0221\n\007routing\030\003 \003(\0132 .seldon.pro"
  "tos.Meta.RoutingEntry\0229\n\013requestPath\030\004 \003"
  "(\0132$.seldon.protos.Meta.RequestPathEntry"
  "\022&\n\007metrics\030\005 \003(\0132\025.seldon.protos.Metric"
  "\032C\n\tTagsEntry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001("
  "\0132\026.google.protobuf.Value:\0028\001\032.\n\014Routing"
  "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\0322\n"
  "\020RequestPathEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t:\0028\001\"\341\001\n\006Metric\022\013\n\003key\030\001 \001(\t\022.\n\004typ"
  "e\030\002 \001(\0162 .seldon.protos.Metric.MetricTyp"
  "e\022\r\n\005value\030\003 \001(\002\022-\n\004tags\030\004 \003(\0132\037.seldon."
  "protos.Metric.TagsEntry\032+\n\tTagsEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"/\n\nMetricTy"
  "pe\022\013\n\007COUNTER\020\000\022\t\n\005GAUGE\020\001\022\t\n\005TIMER\020\002\"I\n"
  "\021SeldonMessageList\0224\n\016seldonMessages\030\001 \003"
  "(\0132\034.seldon.protos.SeldonMessage\"\216\001\n\006Sta"
  "tus\022\014\n\004code\030\001 \001(\005\022\014\n\004info\030\002 \001(\t\022\016\n\006reaso"
  "n\030\003 \001(\t\0220\n\006status\030\004 \001(\0162 .seldon.protos."
  "Status.StatusFlag\"&\n\nStatusFlag\022\013\n\007SUCCE"
  "SS\020\000\022\013\n\007FAILURE\020\001\"\246\001\n\010Feedback\022-\n\007reques"
  "t\030\001 \001(\0132\034.seldon.protos.SeldonMessage\022.\n"
  "\010response\030\002 \001(\0132\034.seldon.protos.SeldonMe"
  "ssage\022\016\n\006reward\030\003 \001(\002\022+\n\005truth\030\004 \001(\0132\034.s"
  "eldon.protos.SeldonMessage\"p\n\017RequestRes"
  "ponse\022-\n\007request\030\001 \001(\0132\034.seldon.protos.S"
  "eldonMessage\022.\n\010response\030\002 \001(\0132\034.seldon."
  "protos.SeldonMessage\"*\n\032SeldonModelMetad"
  "ataRequest\022\014\n\004name\030\001 \001(\t\"\203\001\n\025SeldonMessa"
  "geMetadata\022\023\n\013messagetype\030\001 \001(\t\022&\n\006schem"
  "a\030\002 \001(\0132\026.google.protobuf.Value\022\014\n\004name\030"
  "\003 \001(\t\022\020\n\010datatype\030\004 \001(\t\022\r\n\005shape\030\005 \003(\003\"\243"
  "\002\n\023SeldonModelMetadata\022\014\n\004name\030\001 \001(\t\022\020\n\010"
  "versions\030\002 \003(\t\022\020\n\010platform\030\003 \001(\t\0224\n\006inpu"
  "ts\030\004 \003(\0132$.seldon.protos.SeldonMessageMe"
  "tadata\0225\n\007outputs\030\005 \003(\0132$.seldon.protos."
  "SeldonMessageMetadata\022>\n\006custom\030\006 \003(\0132.."
  "seldon.protos.SeldonModelMetadata.Custom"
  "Entry\032-\n\013CustomEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
  "ue\030\002 \001(\t:\0028\001\"\243\002\n\023SeldonGraphMetadata\022\014\n\004"
  "name\030\001 \001(\t\022>\n\006models\030\002 \003(\0132..seldon.prot"
  "os.SeldonGraphMetadata.ModelsEntry\0224\n\006in"
  "puts\030\003 \003(\0132$.seldon.protos.SeldonMessage"
  "Metadata\0225\n\007outputs\030\004 \003(\0132$.seldon.proto"
  "s.SeldonMessageMetadata\032Q\n\013ModelsEntry\022\013"
  "\n\003key\030\001 \001(\t\0221\n\005value\030\002 \001(\0132\".seldon.prot"
  "os.SeldonModelMetadata:\0028\0012\211\003\n\007Generic\022N"
  "\n\016TransformInput\022\034.seldon.protos.SeldonM"
  "essage\032\034.seldon.protos.SeldonMessage\"\000\022O"
  "\n\017TransformOutput\022\034.seldon.protos.Seldon"
  "Message\032\034.seldon.protos.SeldonMessage\"\000\022"
  "E\n\005Route\022\034.seldon.protos.SeldonMessage\032\034"
  ".seldon.protos.SeldonMessage\"\000\022M\n\tAggreg"
  "ate\022 .seldon.protos.SeldonMessageList\032\034."
  "seldon.protos.SeldonMessage\"\000\022G\n\014SendFee"
  "dback\022\027.seldon.protos.Feedback\032\034.seldon."
  "protos.SeldonMessage\"\0002\343\001\n\005Model\022G\n\007Pred"
  "ict\022\034.seldon.protos.SeldonMessage\032\034.seld"
  "on.protos.SeldonMessage\"\000\022G\n\014SendFeedbac"
  "k\022\027.seldon.protos.Feedback\032\034.seldon.prot"
  "os.SeldonMessage\"\000\022H\n\010Metadata\022\026.google."
  "protobuf.Empty\032\".seldon.protos.SeldonMod"
  "elMetadata\"\0002\230\001\n\006Router\022E\n\005Route\022\034.seldo"
  "n.protos.SeldonMessage\032\034.seldon.protos.S"
  "eldonMessage\"\000\022G\n\014SendFeedback\022\027.seldon."
  "protos.Feedback\032\034.seldon.protos.SeldonMe"
  "ssage\"\0002]\n\013Transformer\022N\n\016TransformInput"
  "\022\034.seldon.protos.SeldonMessage\032\034.seldon."
  "protos.SeldonMessage\"\0002d\n\021OutputTransfor"
  "mer\022O\n\017TransformOutput\022\034.seldon.protos.S"
  "eldonMessage\032\034.seldon.protos.SeldonMessa"
  "ge\"\0002Y\n\010Combiner\022M\n\tAggregate\022 .seldon.p"
  "rotos.SeldonMessageList\032\034.seldon.protos."
  "SeldonMessage\"\0002\313\002\n\006Seldon\022G\n\007Predict\022\034."
  "seldon.protos.SeldonMessage\032\034.seldon.pro"
  "tos.SeldonMessage\"\000\022G\n\014SendFeedback\022\027.se"
  "ldon.protos.Feedback\032\034.seldon.protos.Sel"
  "donMessage\"\000\022`\n\rModelMetadata\022).seldon.p"
  "rotos.SeldonModelMetadataRequest\032\".seldo"
  "n.protos.SeldonModelMetadata\"\000\022M\n\rGraphM"
  "etadata\022\026.google.protobuf.Empty\032\".seldon"
  ".protos.SeldonGraphMetadata\"\000Bh\n\020io.seld"
  "on.protosB\020PredictionProtosZBgithub.com/"
  "seldonio/seldon-core/incubating/wrappers"
  "/s2i/go/pkg/apib\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_prediction_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_prediction_2eproto_sccs[19] = {
  &scc_info_DefaultData_prediction_2eproto.base,
  &scc_info_Feedback_prediction_2eproto.base,
  &scc_info_Meta_prediction_2eproto.base,
  &scc_info_Meta_RequestPathEntry_DoNotUse_prediction_2eproto.base,
  &scc_info_Meta_RoutingEntry_DoNotUse_prediction_2eproto.base,
  &scc_info_Meta_TagsEntry_DoNotUse_prediction_2eproto.base,
  &scc_info_Metric_prediction_2eproto.base,
  &scc_info_Metric_TagsEntry_DoNotUse_prediction_2eproto.base,
  &scc_info_RequestResponse_prediction_2eproto.base,
  &scc_info_SeldonGraphMetadata_prediction_2eproto.base,
  &scc_info_SeldonGraphMetadata_ModelsEntry_DoNotUse_prediction_2eproto.base,
  &scc_info_SeldonMessage_prediction_2eproto.base,
  &scc_info_SeldonMessageList_prediction_2eproto.base,
  &scc_info_SeldonMessageMetadata_prediction_2eproto.base,
  &scc_info_SeldonModelMetadata_prediction_2eproto.base,
  &scc_info_SeldonModelMetadata_CustomEntry_DoNotUse_prediction_2eproto.base,
  &scc_info_SeldonModelMetadataRequest_prediction_2eproto.base,
  &scc_info_Status_prediction_2eproto.base,
  &scc_info_Tensor_prediction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_prediction_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prediction_2eproto = {
  false, false, descriptor_table_protodef_prediction_2eproto, "prediction.proto", 4063,
  &descriptor_table_prediction_2eproto_once, descriptor_table_prediction_2eproto_sccs, descriptor_table_prediction_2eproto_deps, 19, 4,
  schemas, file_default_instances, TableStruct_prediction_2eproto::offsets,
  file_level_metadata_prediction_2eproto, 19, file_level_enum_descriptors_prediction_2eproto, file_level_service_descriptors_prediction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_prediction_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_prediction_2eproto)), true);
namespace seldon {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Metric_MetricType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_prediction_2eproto);
  return file_level_enum_descriptors_prediction_2eproto[0];
}
bool Metric_MetricType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Metric_MetricType Metric::COUNTER;
constexpr Metric_MetricType Metric::GAUGE;
constexpr Metric_MetricType Metric::TIMER;
constexpr Metric_MetricType Metric::MetricType_MIN;
constexpr Metric_MetricType Metric::MetricType_MAX;
constexpr int Metric::MetricType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_StatusFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_prediction_2eproto);
  return file_level_enum_descriptors_prediction_2eproto[1];
}
bool Status_StatusFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Status_StatusFlag Status::SUCCESS;
constexpr Status_StatusFlag Status::FAILURE;
constexpr Status_StatusFlag Status::StatusFlag_MIN;
constexpr Status_StatusFlag Status::StatusFlag_MAX;
constexpr int Status::StatusFlag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SeldonMessage::_Internal {
 public:
  static const ::seldon::protos::Status& status(const SeldonMessage* msg);
  static const ::seldon::protos::Meta& meta(const SeldonMessage* msg);
  static const ::seldon::protos::DefaultData& data(const SeldonMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::Value& jsondata(const SeldonMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& customdata(const SeldonMessage* msg);
};

const ::seldon::protos::Status&
SeldonMessage::_Internal::status(const SeldonMessage* msg) {
  return *msg->status_;
}
const ::seldon::protos::Meta&
SeldonMessage::_Internal::meta(const SeldonMessage* msg) {
  return *msg->meta_;
}
const ::seldon::protos::DefaultData&
SeldonMessage::_Internal::data(const SeldonMessage* msg) {
  return *msg->data_oneof_.data_;
}
const PROTOBUF_NAMESPACE_ID::Value&
SeldonMessage::_Internal::jsondata(const SeldonMessage* msg) {
  return *msg->data_oneof_.jsondata_;
}
const PROTOBUF_NAMESPACE_ID::Any&
SeldonMessage::_Internal::customdata(const SeldonMessage* msg) {
  return *msg->data_oneof_.customdata_;
}
void SeldonMessage::set_allocated_data(::seldon::protos::DefaultData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data_oneof();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    data_oneof_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.data)
}
void SeldonMessage::set_allocated_jsondata(PROTOBUF_NAMESPACE_ID::Value* jsondata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data_oneof();
  if (jsondata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jsondata)->GetArena();
    if (message_arena != submessage_arena) {
      jsondata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jsondata, submessage_arena);
    }
    set_has_jsondata();
    data_oneof_.jsondata_ = jsondata;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.jsonData)
}
void SeldonMessage::clear_jsondata() {
  if (_internal_has_jsondata()) {
    if (GetArena() == nullptr) {
      delete data_oneof_.jsondata_;
    }
    clear_has_data_oneof();
  }
}
void SeldonMessage::set_allocated_customdata(PROTOBUF_NAMESPACE_ID::Any* customdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data_oneof();
  if (customdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customdata)->GetArena();
    if (message_arena != submessage_arena) {
      customdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customdata, submessage_arena);
    }
    set_has_customdata();
    data_oneof_.customdata_ = customdata;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.customData)
}
void SeldonMessage::clear_customdata() {
  if (_internal_has_customdata()) {
    if (GetArena() == nullptr) {
      delete data_oneof_.customdata_;
    }
    clear_has_data_oneof();
  }
}
SeldonMessage::SeldonMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:seldon.protos.SeldonMessage)
}
SeldonMessage::SeldonMessage(const SeldonMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::seldon::protos::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_meta()) {
    meta_ = new ::seldon::protos::Meta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  clear_has_data_oneof();
  switch (from.data_oneof_case()) {
    case kData: {
      _internal_mutable_data()->::seldon::protos::DefaultData::MergeFrom(from._internal_data());
      break;
    }
    case kBinData: {
      _internal_set_bindata(from._internal_bindata());
      break;
    }
    case kStrData: {
      _internal_set_strdata(from._internal_strdata());
      break;
    }
    case kJsonData: {
      _internal_mutable_jsondata()->PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_jsondata());
      break;
    }
    case kCustomData: {
      _internal_mutable_customdata()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_customdata());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:seldon.protos.SeldonMessage)
}

void SeldonMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SeldonMessage_prediction_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&meta_) -
      reinterpret_cast<char*>(&status_)) + sizeof(meta_));
  clear_has_data_oneof();
}

SeldonMessage::~SeldonMessage() {
  // @@protoc_insertion_point(destructor:seldon.protos.SeldonMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SeldonMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete meta_;
  if (has_data_oneof()) {
    clear_data_oneof();
  }
}

void SeldonMessage::ArenaDtor(void* object) {
  SeldonMessage* _this = reinterpret_cast< SeldonMessage* >(object);
  (void)_this;
}
void SeldonMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SeldonMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeldonMessage& SeldonMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeldonMessage_prediction_2eproto.base);
  return *internal_default_instance();
}


void SeldonMessage::clear_data_oneof() {
// @@protoc_insertion_point(one_of_clear_start:seldon.protos.SeldonMessage)
  switch (data_oneof_case()) {
    case kData: {
      if (GetArena() == nullptr) {
        delete data_oneof_.data_;
      }
      break;
    }
    case kBinData: {
      data_oneof_.bindata_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kStrData: {
      data_oneof_.strdata_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kJsonData: {
      if (GetArena() == nullptr) {
        delete data_oneof_.jsondata_;
      }
      break;
    }
    case kCustomData: {
      if (GetArena() == nullptr) {
        delete data_oneof_.customdata_;
      }
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}


void SeldonMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.SeldonMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  clear_data_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeldonMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .seldon.protos.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .seldon.protos.Meta meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .seldon.protos.DefaultData data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes binData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_bindata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_strdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "seldon.protos.SeldonMessage.strData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Value jsonData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_jsondata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any customData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_customdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeldonMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.SeldonMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .seldon.protos.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .seldon.protos.Meta meta = 2;
  if (this->has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::meta(this), target, stream);
  }

  // .seldon.protos.DefaultData data = 3;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  // bytes binData = 4;
  if (_internal_has_bindata()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_bindata(), target);
  }

  // string strData = 5;
  if (_internal_has_strdata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strdata().data(), static_cast<int>(this->_internal_strdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonMessage.strData");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strdata(), target);
  }

  // .google.protobuf.Value jsonData = 6;
  if (_internal_has_jsondata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::jsondata(this), target, stream);
  }

  // .google.protobuf.Any customData = 7;
  if (_internal_has_customdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::customdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.SeldonMessage)
  return target;
}

size_t SeldonMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.SeldonMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .seldon.protos.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .seldon.protos.Meta meta = 2;
  if (this->has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  switch (data_oneof_case()) {
    // .seldon.protos.DefaultData data = 3;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_oneof_.data_);
      break;
    }
    // bytes binData = 4;
    case kBinData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bindata());
      break;
    }
    // string strData = 5;
    case kStrData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strdata());
      break;
    }
    // .google.protobuf.Value jsonData = 6;
    case kJsonData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_oneof_.jsondata_);
      break;
    }
    // .google.protobuf.Any customData = 7;
    case kCustomData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_oneof_.customdata_);
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeldonMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.SeldonMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SeldonMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeldonMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.SeldonMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.SeldonMessage)
    MergeFrom(*source);
  }
}

void SeldonMessage::MergeFrom(const SeldonMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.SeldonMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::seldon::protos::Status::MergeFrom(from._internal_status());
  }
  if (from.has_meta()) {
    _internal_mutable_meta()->::seldon::protos::Meta::MergeFrom(from._internal_meta());
  }
  switch (from.data_oneof_case()) {
    case kData: {
      _internal_mutable_data()->::seldon::protos::DefaultData::MergeFrom(from._internal_data());
      break;
    }
    case kBinData: {
      _internal_set_bindata(from._internal_bindata());
      break;
    }
    case kStrData: {
      _internal_set_strdata(from._internal_strdata());
      break;
    }
    case kJsonData: {
      _internal_mutable_jsondata()->PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_jsondata());
      break;
    }
    case kCustomData: {
      _internal_mutable_customdata()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_customdata());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
}

void SeldonMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.SeldonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeldonMessage::CopyFrom(const SeldonMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.SeldonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeldonMessage::IsInitialized() const {
  return true;
}

void SeldonMessage::InternalSwap(SeldonMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SeldonMessage, meta_)
      + sizeof(SeldonMessage::meta_)
      - PROTOBUF_FIELD_OFFSET(SeldonMessage, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
  swap(data_oneof_, other->data_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeldonMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DefaultData::_Internal {
 public:
  static const ::seldon::protos::Tensor& tensor(const DefaultData* msg);
  static const PROTOBUF_NAMESPACE_ID::ListValue& ndarray(const DefaultData* msg);
  static const ::tensorflow::TensorProto& tftensor(const DefaultData* msg);
};

const ::seldon::protos::Tensor&
DefaultData::_Internal::tensor(const DefaultData* msg) {
  return *msg->data_oneof_.tensor_;
}
const PROTOBUF_NAMESPACE_ID::ListValue&
DefaultData::_Internal::ndarray(const DefaultData* msg) {
  return *msg->data_oneof_.ndarray_;
}
const ::tensorflow::TensorProto&
DefaultData::_Internal::tftensor(const DefaultData* msg) {
  return *msg->data_oneof_.tftensor_;
}
void DefaultData::set_allocated_tensor(::seldon::protos::Tensor* tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data_oneof();
  if (tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tensor);
    if (message_arena != submessage_arena) {
      tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor, submessage_arena);
    }
    set_has_tensor();
    data_oneof_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.DefaultData.tensor)
}
void DefaultData::set_allocated_ndarray(PROTOBUF_NAMESPACE_ID::ListValue* ndarray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data_oneof();
  if (ndarray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ndarray)->GetArena();
    if (message_arena != submessage_arena) {
      ndarray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ndarray, submessage_arena);
    }
    set_has_ndarray();
    data_oneof_.ndarray_ = ndarray;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.DefaultData.ndarray)
}
void DefaultData::clear_ndarray() {
  if (_internal_has_ndarray()) {
    if (GetArena() == nullptr) {
      delete data_oneof_.ndarray_;
    }
    clear_has_data_oneof();
  }
}
void DefaultData::set_allocated_tftensor(::tensorflow::TensorProto* tftensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data_oneof();
  if (tftensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tftensor)->GetArena();
    if (message_arena != submessage_arena) {
      tftensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tftensor, submessage_arena);
    }
    set_has_tftensor();
    data_oneof_.tftensor_ = tftensor;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.DefaultData.tftensor)
}
void DefaultData::clear_tftensor() {
  if (_internal_has_tftensor()) {
    if (GetArena() == nullptr) {
      delete data_oneof_.tftensor_;
    }
    clear_has_data_oneof();
  }
}
DefaultData::DefaultData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:seldon.protos.DefaultData)
}
DefaultData::DefaultData(const DefaultData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data_oneof();
  switch (from.data_oneof_case()) {
    case kTensor: {
      _internal_mutable_tensor()->::seldon::protos::Tensor::MergeFrom(from._internal_tensor());
      break;
    }
    case kNdarray: {
      _internal_mutable_ndarray()->PROTOBUF_NAMESPACE_ID::ListValue::MergeFrom(from._internal_ndarray());
      break;
    }
    case kTftensor: {
      _internal_mutable_tftensor()->::tensorflow::TensorProto::MergeFrom(from._internal_tftensor());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:seldon.protos.DefaultData)
}

void DefaultData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefaultData_prediction_2eproto.base);
  clear_has_data_oneof();
}

DefaultData::~DefaultData() {
  // @@protoc_insertion_point(destructor:seldon.protos.DefaultData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DefaultData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data_oneof()) {
    clear_data_oneof();
  }
}

void DefaultData::ArenaDtor(void* object) {
  DefaultData* _this = reinterpret_cast< DefaultData* >(object);
  (void)_this;
}
void DefaultData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefaultData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefaultData& DefaultData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefaultData_prediction_2eproto.base);
  return *internal_default_instance();
}


void DefaultData::clear_data_oneof() {
// @@protoc_insertion_point(one_of_clear_start:seldon.protos.DefaultData)
  switch (data_oneof_case()) {
    case kTensor: {
      if (GetArena() == nullptr) {
        delete data_oneof_.tensor_;
      }
      break;
    }
    case kNdarray: {
      if (GetArena() == nullptr) {
        delete data_oneof_.ndarray_;
      }
      break;
    }
    case kTftensor: {
      if (GetArena() == nullptr) {
        delete data_oneof_.tftensor_;
      }
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}


void DefaultData::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.DefaultData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  clear_data_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefaultData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "seldon.protos.DefaultData.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .seldon.protos.Tensor tensor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.ListValue ndarray = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ndarray(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.TensorProto tftensor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tftensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefaultData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.DefaultData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.DefaultData.names");
    target = stream->WriteString(1, s, target);
  }

  // .seldon.protos.Tensor tensor = 2;
  if (_internal_has_tensor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tensor(this), target, stream);
  }

  // .google.protobuf.ListValue ndarray = 3;
  if (_internal_has_ndarray()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ndarray(this), target, stream);
  }

  // .tensorflow.TensorProto tftensor = 4;
  if (_internal_has_tftensor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tftensor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.DefaultData)
  return target;
}

size_t DefaultData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.DefaultData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  switch (data_oneof_case()) {
    // .seldon.protos.Tensor tensor = 2;
    case kTensor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_oneof_.tensor_);
      break;
    }
    // .google.protobuf.ListValue ndarray = 3;
    case kNdarray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_oneof_.ndarray_);
      break;
    }
    // .tensorflow.TensorProto tftensor = 4;
    case kTftensor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_oneof_.tftensor_);
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefaultData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.DefaultData)
  GOOGLE_DCHECK_NE(&from, this);
  const DefaultData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefaultData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.DefaultData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.DefaultData)
    MergeFrom(*source);
  }
}

void DefaultData::MergeFrom(const DefaultData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.DefaultData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  switch (from.data_oneof_case()) {
    case kTensor: {
      _internal_mutable_tensor()->::seldon::protos::Tensor::MergeFrom(from._internal_tensor());
      break;
    }
    case kNdarray: {
      _internal_mutable_ndarray()->PROTOBUF_NAMESPACE_ID::ListValue::MergeFrom(from._internal_ndarray());
      break;
    }
    case kTftensor: {
      _internal_mutable_tftensor()->::tensorflow::TensorProto::MergeFrom(from._internal_tftensor());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
}

void DefaultData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.DefaultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultData::CopyFrom(const DefaultData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.DefaultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultData::IsInitialized() const {
  return true;
}

void DefaultData::InternalSwap(DefaultData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
  swap(data_oneof_, other->data_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Tensor::_Internal {
 public:
};

Tensor::Tensor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shape_(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:seldon.protos.Tensor)
}
Tensor::Tensor(const Tensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.Tensor)
}

void Tensor::SharedCtor() {
}

Tensor::~Tensor() {
  // @@protoc_insertion_point(destructor:seldon.protos.Tensor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tensor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Tensor::ArenaDtor(void* object) {
  Tensor* _this = reinterpret_cast< Tensor* >(object);
  (void)_this;
}
void Tensor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tensor& Tensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tensor_prediction_2eproto.base);
  return *internal_default_instance();
}


void Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.Tensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 shape = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double values = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tensor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.Tensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 shape = 1 [packed = true];
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_shape(), byte_size, target);
    }
  }

  // repeated double values = 2 [packed = true];
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.Tensor)
  return target;
}

size_t Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.Tensor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double values = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Tensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.Tensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.Tensor)
    MergeFrom(*source);
  }
}

void Tensor::MergeFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.Tensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  values_.MergeFrom(from.values_);
}

void Tensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tensor::CopyFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tensor::IsInitialized() const {
  return true;
}

void Tensor::InternalSwap(Tensor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tensor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Meta_TagsEntry_DoNotUse::Meta_TagsEntry_DoNotUse() {}
Meta_TagsEntry_DoNotUse::Meta_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Meta_TagsEntry_DoNotUse::MergeFrom(const Meta_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Meta_TagsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Meta_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Meta_RoutingEntry_DoNotUse::Meta_RoutingEntry_DoNotUse() {}
Meta_RoutingEntry_DoNotUse::Meta_RoutingEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Meta_RoutingEntry_DoNotUse::MergeFrom(const Meta_RoutingEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Meta_RoutingEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Meta_RoutingEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Meta_RequestPathEntry_DoNotUse::Meta_RequestPathEntry_DoNotUse() {}
Meta_RequestPathEntry_DoNotUse::Meta_RequestPathEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Meta_RequestPathEntry_DoNotUse::MergeFrom(const Meta_RequestPathEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Meta_RequestPathEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Meta_RequestPathEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Meta::_Internal {
 public:
};

void Meta::clear_tags() {
  tags_.Clear();
}
Meta::Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena),
  routing_(arena),
  requestpath_(arena),
  metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:seldon.protos.Meta)
}
Meta::Meta(const Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  routing_.MergeFrom(from.routing_);
  requestpath_.MergeFrom(from.requestpath_);
  puid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_puid().empty()) {
    puid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_puid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:seldon.protos.Meta)
}

void Meta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Meta_prediction_2eproto.base);
  puid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Meta::~Meta() {
  // @@protoc_insertion_point(destructor:seldon.protos.Meta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Meta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  puid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Meta::ArenaDtor(void* object) {
  Meta* _this = reinterpret_cast< Meta* >(object);
  (void)_this;
}
void Meta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Meta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Meta& Meta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Meta_prediction_2eproto.base);
  return *internal_default_instance();
}


void Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  routing_.Clear();
  requestpath_.Clear();
  metrics_.Clear();
  puid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Meta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string puid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_puid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "seldon.protos.Meta.puid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Value> tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, int32> routing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&routing_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> requestPath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&requestpath_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .seldon.protos.Metric metrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Meta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.Meta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string puid = 1;
  if (this->puid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_puid().data(), static_cast<int>(this->_internal_puid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.Meta.puid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_puid(), target);
  }

  // map<string, .google.protobuf.Value> tags = 2;
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Meta.TagsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Meta_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = Meta_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int32> routing = 3;
  if (!this->_internal_routing().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Meta.RoutingEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_routing().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_routing().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_routing().begin();
          it != this->_internal_routing().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Meta_RoutingEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_routing().begin();
          it != this->_internal_routing().end(); ++it) {
        target = Meta_RoutingEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> requestPath = 4;
  if (!this->_internal_requestpath().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Meta.RequestPathEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Meta.RequestPathEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_requestpath().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_requestpath().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_requestpath().begin();
          it != this->_internal_requestpath().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Meta_RequestPathEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_requestpath().begin();
          it != this->_internal_requestpath().end(); ++it) {
        target = Meta_RequestPathEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .seldon.protos.Metric metrics = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.Meta)
  return target;
}

size_t Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.Meta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Value> tags = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += Meta_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> routing = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_routing_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_routing().begin();
      it != this->_internal_routing().end(); ++it) {
    total_size += Meta_RoutingEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> requestPath = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_requestpath_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_requestpath().begin();
      it != this->_internal_requestpath().end(); ++it) {
    total_size += Meta_RequestPathEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .seldon.protos.Metric metrics = 5;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string puid = 1;
  if (this->puid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_puid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Meta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.Meta)
  GOOGLE_DCHECK_NE(&from, this);
  const Meta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Meta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.Meta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.Meta)
    MergeFrom(*source);
  }
}

void Meta::MergeFrom(const Meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.Meta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  routing_.MergeFrom(from.routing_);
  requestpath_.MergeFrom(from.requestpath_);
  metrics_.MergeFrom(from.metrics_);
  if (from.puid().size() > 0) {
    _internal_set_puid(from._internal_puid());
  }
}

void Meta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Meta::CopyFrom(const Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meta::IsInitialized() const {
  return true;
}

void Meta::InternalSwap(Meta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tags_.Swap(&other->tags_);
  routing_.Swap(&other->routing_);
  requestpath_.Swap(&other->requestpath_);
  metrics_.InternalSwap(&other->metrics_);
  puid_.Swap(&other->puid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Meta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Metric_TagsEntry_DoNotUse::Metric_TagsEntry_DoNotUse() {}
Metric_TagsEntry_DoNotUse::Metric_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metric_TagsEntry_DoNotUse::MergeFrom(const Metric_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metric_TagsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Metric_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Metric::_Internal {
 public:
};

Metric::Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:seldon.protos.Metric)
}
Metric::Metric(const Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:seldon.protos.Metric)
}

void Metric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Metric_prediction_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:seldon.protos.Metric)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Metric::ArenaDtor(void* object) {
  Metric* _this = reinterpret_cast< Metric* >(object);
  (void)_this;
}
void Metric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metric& Metric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Metric_prediction_2eproto.base);
  return *internal_default_instance();
}


void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  key_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "seldon.protos.Metric.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .seldon.protos.Metric.MetricType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::seldon::protos::Metric_MetricType>(val));
        } else goto handle_unusual;
        continue;
      // float value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.Metric.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .seldon.protos.Metric.MetricType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // float value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  // map<string, string> tags = 4;
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Metric.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Metric.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Metric_TagsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = Metric_TagsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.Metric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += Metric_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .seldon.protos.Metric.MetricType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // float value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  const Metric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.Metric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.Metric)
    MergeFrom(*source);
  }
}

void Metric::MergeFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void Metric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  return true;
}

void Metric::InternalSwap(Metric* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tags_.Swap(&other->tags_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metric, value_)
      + sizeof(Metric::value_)
      - PROTOBUF_FIELD_OFFSET(Metric, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Metric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SeldonMessageList::_Internal {
 public:
};

SeldonMessageList::SeldonMessageList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  seldonmessages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:seldon.protos.SeldonMessageList)
}
SeldonMessageList::SeldonMessageList(const SeldonMessageList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      seldonmessages_(from.seldonmessages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.SeldonMessageList)
}

void SeldonMessageList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SeldonMessageList_prediction_2eproto.base);
}

SeldonMessageList::~SeldonMessageList() {
  // @@protoc_insertion_point(destructor:seldon.protos.SeldonMessageList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SeldonMessageList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SeldonMessageList::ArenaDtor(void* object) {
  SeldonMessageList* _this = reinterpret_cast< SeldonMessageList* >(object);
  (void)_this;
}
void SeldonMessageList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SeldonMessageList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeldonMessageList& SeldonMessageList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeldonMessageList_prediction_2eproto.base);
  return *internal_default_instance();
}


void SeldonMessageList::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.SeldonMessageList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seldonmessages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeldonMessageList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .seldon.protos.SeldonMessage seldonMessages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_seldonmessages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeldonMessageList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.SeldonMessageList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .seldon.protos.SeldonMessage seldonMessages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_seldonmessages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_seldonmessages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.SeldonMessageList)
  return target;
}

size_t SeldonMessageList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.SeldonMessageList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .seldon.protos.SeldonMessage seldonMessages = 1;
  total_size += 1UL * this->_internal_seldonmessages_size();
  for (const auto& msg : this->seldonmessages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeldonMessageList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.SeldonMessageList)
  GOOGLE_DCHECK_NE(&from, this);
  const SeldonMessageList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeldonMessageList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.SeldonMessageList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.SeldonMessageList)
    MergeFrom(*source);
  }
}

void SeldonMessageList::MergeFrom(const SeldonMessageList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.SeldonMessageList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  seldonmessages_.MergeFrom(from.seldonmessages_);
}

void SeldonMessageList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.SeldonMessageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeldonMessageList::CopyFrom(const SeldonMessageList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.SeldonMessageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeldonMessageList::IsInitialized() const {
  return true;
}

void SeldonMessageList::InternalSwap(SeldonMessageList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  seldonmessages_.InternalSwap(&other->seldonmessages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeldonMessageList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:seldon.protos.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_info(), 
      GetArena());
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reason(), 
      GetArena());
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&code_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:seldon.protos.Status)
}

void Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Status_prediction_2eproto.base);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&code_)) + sizeof(status_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:seldon.protos.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_prediction_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.ClearToEmpty();
  reason_.ClearToEmpty();
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&code_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "seldon.protos.Status.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "seldon.protos.Status.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .seldon.protos.Status.StatusFlag status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::seldon::protos::Status_StatusFlag>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string info = 2;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.Status.info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_info(), target);
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.Status.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  // .seldon.protos.Status.StatusFlag status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string info = 2;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // .seldon.protos.Status.StatusFlag status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.info().size() > 0) {
    _internal_set_info(from._internal_info());
  }
  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, status_)
      + sizeof(Status::status_)
      - PROTOBUF_FIELD_OFFSET(Status, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Feedback::_Internal {
 public:
  static const ::seldon::protos::SeldonMessage& request(const Feedback* msg);
  static const ::seldon::protos::SeldonMessage& response(const Feedback* msg);
  static const ::seldon::protos::SeldonMessage& truth(const Feedback* msg);
};

const ::seldon::protos::SeldonMessage&
Feedback::_Internal::request(const Feedback* msg) {
  return *msg->request_;
}
const ::seldon::protos::SeldonMessage&
Feedback::_Internal::response(const Feedback* msg) {
  return *msg->response_;
}
const ::seldon::protos::SeldonMessage&
Feedback::_Internal::truth(const Feedback* msg) {
  return *msg->truth_;
}
Feedback::Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:seldon.protos.Feedback)
}
Feedback::Feedback(const Feedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::seldon::protos::SeldonMessage(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from._internal_has_response()) {
    response_ = new ::seldon::protos::SeldonMessage(*from.response_);
  } else {
    response_ = nullptr;
  }
  if (from._internal_has_truth()) {
    truth_ = new ::seldon::protos::SeldonMessage(*from.truth_);
  } else {
    truth_ = nullptr;
  }
  reward_ = from.reward_;
  // @@protoc_insertion_point(copy_constructor:seldon.protos.Feedback)
}

void Feedback::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Feedback_prediction_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&request_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&request_)) + sizeof(reward_));
}

Feedback::~Feedback() {
  // @@protoc_insertion_point(destructor:seldon.protos.Feedback)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Feedback::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete response_;
  if (this != internal_default_instance()) delete truth_;
}

void Feedback::ArenaDtor(void* object) {
  Feedback* _this = reinterpret_cast< Feedback* >(object);
  (void)_this;
}
void Feedback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Feedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Feedback& Feedback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Feedback_prediction_2eproto.base);
  return *internal_default_instance();
}


void Feedback::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.Feedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  if (GetArena() == nullptr && truth_ != nullptr) {
    delete truth_;
  }
  truth_ = nullptr;
  reward_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Feedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .seldon.protos.SeldonMessage request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .seldon.protos.SeldonMessage response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float reward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .seldon.protos.SeldonMessage truth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_truth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Feedback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.Feedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .seldon.protos.SeldonMessage request = 1;
  if (this->has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  // .seldon.protos.SeldonMessage response = 2;
  if (this->has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::response(this), target, stream);
  }

  // float reward = 3;
  if (!(this->reward() <= 0 && this->reward() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_reward(), target);
  }

  // .seldon.protos.SeldonMessage truth = 4;
  if (this->has_truth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::truth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.Feedback)
  return target;
}

size_t Feedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.Feedback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .seldon.protos.SeldonMessage request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // .seldon.protos.SeldonMessage response = 2;
  if (this->has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // .seldon.protos.SeldonMessage truth = 4;
  if (this->has_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *truth_);
  }

  // float reward = 3;
  if (!(this->reward() <= 0 && this->reward() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feedback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.Feedback)
  GOOGLE_DCHECK_NE(&from, this);
  const Feedback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Feedback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.Feedback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.Feedback)
    MergeFrom(*source);
  }
}

void Feedback::MergeFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.Feedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request()) {
    _internal_mutable_request()->::seldon::protos::SeldonMessage::MergeFrom(from._internal_request());
  }
  if (from.has_response()) {
    _internal_mutable_response()->::seldon::protos::SeldonMessage::MergeFrom(from._internal_response());
  }
  if (from.has_truth()) {
    _internal_mutable_truth()->::seldon::protos::SeldonMessage::MergeFrom(from._internal_truth());
  }
  if (!(from.reward() <= 0 && from.reward() >= 0)) {
    _internal_set_reward(from._internal_reward());
  }
}

void Feedback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feedback::CopyFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feedback::IsInitialized() const {
  return true;
}

void Feedback::InternalSwap(Feedback* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Feedback, reward_)
      + sizeof(Feedback::reward_)
      - PROTOBUF_FIELD_OFFSET(Feedback, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Feedback::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RequestResponse::_Internal {
 public:
  static const ::seldon::protos::SeldonMessage& request(const RequestResponse* msg);
  static const ::seldon::protos::SeldonMessage& response(const RequestResponse* msg);
};

const ::seldon::protos::SeldonMessage&
RequestResponse::_Internal::request(const RequestResponse* msg) {
  return *msg->request_;
}
const ::seldon::protos::SeldonMessage&
RequestResponse::_Internal::response(const RequestResponse* msg) {
  return *msg->response_;
}
RequestResponse::RequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:seldon.protos.RequestResponse)
}
RequestResponse::RequestResponse(const RequestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::seldon::protos::SeldonMessage(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from._internal_has_response()) {
    response_ = new ::seldon::protos::SeldonMessage(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:seldon.protos.RequestResponse)
}

void RequestResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestResponse_prediction_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&request_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&request_)) + sizeof(response_));
}

RequestResponse::~RequestResponse() {
  // @@protoc_insertion_point(destructor:seldon.protos.RequestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete response_;
}

void RequestResponse::ArenaDtor(void* object) {
  RequestResponse* _this = reinterpret_cast< RequestResponse* >(object);
  (void)_this;
}
void RequestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestResponse& RequestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestResponse_prediction_2eproto.base);
  return *internal_default_instance();
}


void RequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.RequestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .seldon.protos.SeldonMessage request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .seldon.protos.SeldonMessage response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.RequestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .seldon.protos.SeldonMessage request = 1;
  if (this->has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  // .seldon.protos.SeldonMessage response = 2;
  if (this->has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.RequestResponse)
  return target;
}

size_t RequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.RequestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .seldon.protos.SeldonMessage request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // .seldon.protos.SeldonMessage response = 2;
  if (this->has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.RequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.RequestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.RequestResponse)
    MergeFrom(*source);
  }
}

void RequestResponse::MergeFrom(const RequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.RequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request()) {
    _internal_mutable_request()->::seldon::protos::SeldonMessage::MergeFrom(from._internal_request());
  }
  if (from.has_response()) {
    _internal_mutable_response()->::seldon::protos::SeldonMessage::MergeFrom(from._internal_response());
  }
}

void RequestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.RequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResponse::CopyFrom(const RequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.RequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResponse::IsInitialized() const {
  return true;
}

void RequestResponse::InternalSwap(RequestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestResponse, response_)
      + sizeof(RequestResponse::response_)
      - PROTOBUF_FIELD_OFFSET(RequestResponse, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SeldonModelMetadataRequest::_Internal {
 public:
};

SeldonModelMetadataRequest::SeldonModelMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:seldon.protos.SeldonModelMetadataRequest)
}
SeldonModelMetadataRequest::SeldonModelMetadataRequest(const SeldonModelMetadataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:seldon.protos.SeldonModelMetadataRequest)
}

void SeldonModelMetadataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SeldonModelMetadataRequest_prediction_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SeldonModelMetadataRequest::~SeldonModelMetadataRequest() {
  // @@protoc_insertion_point(destructor:seldon.protos.SeldonModelMetadataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SeldonModelMetadataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SeldonModelMetadataRequest::ArenaDtor(void* object) {
  SeldonModelMetadataRequest* _this = reinterpret_cast< SeldonModelMetadataRequest* >(object);
  (void)_this;
}
void SeldonModelMetadataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SeldonModelMetadataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeldonModelMetadataRequest& SeldonModelMetadataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeldonModelMetadataRequest_prediction_2eproto.base);
  return *internal_default_instance();
}


void SeldonModelMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.SeldonModelMetadataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeldonModelMetadataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "seldon.protos.SeldonModelMetadataRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeldonModelMetadataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.SeldonModelMetadataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonModelMetadataRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.SeldonModelMetadataRequest)
  return target;
}

size_t SeldonModelMetadataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.SeldonModelMetadataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeldonModelMetadataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.SeldonModelMetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SeldonModelMetadataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeldonModelMetadataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.SeldonModelMetadataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.SeldonModelMetadataRequest)
    MergeFrom(*source);
  }
}

void SeldonModelMetadataRequest::MergeFrom(const SeldonModelMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.SeldonModelMetadataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void SeldonModelMetadataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.SeldonModelMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeldonModelMetadataRequest::CopyFrom(const SeldonModelMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.SeldonModelMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeldonModelMetadataRequest::IsInitialized() const {
  return true;
}

void SeldonModelMetadataRequest::InternalSwap(SeldonModelMetadataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SeldonModelMetadataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SeldonMessageMetadata::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Value& schema(const SeldonMessageMetadata* msg);
};

const PROTOBUF_NAMESPACE_ID::Value&
SeldonMessageMetadata::_Internal::schema(const SeldonMessageMetadata* msg) {
  return *msg->schema_;
}
void SeldonMessageMetadata::clear_schema() {
  if (GetArena() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
}
SeldonMessageMetadata::SeldonMessageMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shape_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:seldon.protos.SeldonMessageMetadata)
}
SeldonMessageMetadata::SeldonMessageMetadata(const SeldonMessageMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  messagetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_messagetype().empty()) {
    messagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_messagetype(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  datatype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_datatype().empty()) {
    datatype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_datatype(), 
      GetArena());
  }
  if (from._internal_has_schema()) {
    schema_ = new PROTOBUF_NAMESPACE_ID::Value(*from.schema_);
  } else {
    schema_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:seldon.protos.SeldonMessageMetadata)
}

void SeldonMessageMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SeldonMessageMetadata_prediction_2eproto.base);
  messagetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datatype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  schema_ = nullptr;
}

SeldonMessageMetadata::~SeldonMessageMetadata() {
  // @@protoc_insertion_point(destructor:seldon.protos.SeldonMessageMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SeldonMessageMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  messagetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datatype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete schema_;
}

void SeldonMessageMetadata::ArenaDtor(void* object) {
  SeldonMessageMetadata* _this = reinterpret_cast< SeldonMessageMetadata* >(object);
  (void)_this;
}
void SeldonMessageMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SeldonMessageMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeldonMessageMetadata& SeldonMessageMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeldonMessageMetadata_prediction_2eproto.base);
  return *internal_default_instance();
}


void SeldonMessageMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.SeldonMessageMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  messagetype_.ClearToEmpty();
  name_.ClearToEmpty();
  datatype_.ClearToEmpty();
  if (GetArena() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeldonMessageMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string messagetype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_messagetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "seldon.protos.SeldonMessageMetadata.messagetype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Value schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "seldon.protos.SeldonMessageMetadata.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string datatype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_datatype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "seldon.protos.SeldonMessageMetadata.datatype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 shape = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeldonMessageMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.SeldonMessageMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string messagetype = 1;
  if (this->messagetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_messagetype().data(), static_cast<int>(this->_internal_messagetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonMessageMetadata.messagetype");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_messagetype(), target);
  }

  // .google.protobuf.Value schema = 2;
  if (this->has_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::schema(this), target, stream);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonMessageMetadata.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string datatype = 4;
  if (this->datatype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datatype().data(), static_cast<int>(this->_internal_datatype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonMessageMetadata.datatype");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_datatype(), target);
  }

  // repeated int64 shape = 5;
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_shape(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.SeldonMessageMetadata)
  return target;
}

size_t SeldonMessageMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.SeldonMessageMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shape = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string messagetype = 1;
  if (this->messagetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_messagetype());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string datatype = 4;
  if (this->datatype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datatype());
  }

  // .google.protobuf.Value schema = 2;
  if (this->has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schema_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeldonMessageMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.SeldonMessageMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SeldonMessageMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeldonMessageMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.SeldonMessageMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.SeldonMessageMetadata)
    MergeFrom(*source);
  }
}

void SeldonMessageMetadata::MergeFrom(const SeldonMessageMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.SeldonMessageMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  if (from.messagetype().size() > 0) {
    _internal_set_messagetype(from._internal_messagetype());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.datatype().size() > 0) {
    _internal_set_datatype(from._internal_datatype());
  }
  if (from.has_schema()) {
    _internal_mutable_schema()->PROTOBUF_NAMESPACE_ID::Value::MergeFrom(from._internal_schema());
  }
}

void SeldonMessageMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.SeldonMessageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeldonMessageMetadata::CopyFrom(const SeldonMessageMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.SeldonMessageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeldonMessageMetadata::IsInitialized() const {
  return true;
}

void SeldonMessageMetadata::InternalSwap(SeldonMessageMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shape_.InternalSwap(&other->shape_);
  messagetype_.Swap(&other->messagetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  datatype_.Swap(&other->datatype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(schema_, other->schema_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeldonMessageMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SeldonModelMetadata_CustomEntry_DoNotUse::SeldonModelMetadata_CustomEntry_DoNotUse() {}
SeldonModelMetadata_CustomEntry_DoNotUse::SeldonModelMetadata_CustomEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SeldonModelMetadata_CustomEntry_DoNotUse::MergeFrom(const SeldonModelMetadata_CustomEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SeldonModelMetadata_CustomEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SeldonModelMetadata_CustomEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class SeldonModelMetadata::_Internal {
 public:
};

SeldonModelMetadata::SeldonModelMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  versions_(arena),
  inputs_(arena),
  outputs_(arena),
  custom_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:seldon.protos.SeldonModelMetadata)
}
SeldonModelMetadata::SeldonModelMetadata(const SeldonModelMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      versions_(from.versions_),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  custom_.MergeFrom(from.custom_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_platform().empty()) {
    platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_platform(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:seldon.protos.SeldonModelMetadata)
}

void SeldonModelMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SeldonModelMetadata_prediction_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SeldonModelMetadata::~SeldonModelMetadata() {
  // @@protoc_insertion_point(destructor:seldon.protos.SeldonModelMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SeldonModelMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SeldonModelMetadata::ArenaDtor(void* object) {
  SeldonModelMetadata* _this = reinterpret_cast< SeldonModelMetadata* >(object);
  (void)_this;
}
void SeldonModelMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SeldonModelMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeldonModelMetadata& SeldonModelMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeldonModelMetadata_prediction_2eproto.base);
  return *internal_default_instance();
}


void SeldonModelMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.SeldonModelMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  versions_.Clear();
  inputs_.Clear();
  outputs_.Clear();
  custom_.Clear();
  name_.ClearToEmpty();
  platform_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeldonModelMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "seldon.protos.SeldonModelMetadata.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string versions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_versions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "seldon.protos.SeldonModelMetadata.versions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string platform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "seldon.protos.SeldonModelMetadata.platform"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .seldon.protos.SeldonMessageMetadata inputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .seldon.protos.SeldonMessageMetadata outputs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> custom = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&custom_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeldonModelMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.SeldonModelMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonModelMetadata.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string versions = 2;
  for (int i = 0, n = this->_internal_versions_size(); i < n; i++) {
    const auto& s = this->_internal_versions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonModelMetadata.versions");
    target = stream->WriteString(2, s, target);
  }

  // string platform = 3;
  if (this->platform().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonModelMetadata.platform");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_platform(), target);
  }

  // repeated .seldon.protos.SeldonMessageMetadata inputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_inputs(i), target, stream);
  }

  // repeated .seldon.protos.SeldonMessageMetadata outputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_outputs(i), target, stream);
  }

  // map<string, string> custom = 6;
  if (!this->_internal_custom().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.SeldonModelMetadata.CustomEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.SeldonModelMetadata.CustomEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_custom().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_custom().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_custom().begin();
          it != this->_internal_custom().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SeldonModelMetadata_CustomEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_custom().begin();
          it != this->_internal_custom().end(); ++it) {
        target = SeldonModelMetadata_CustomEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.SeldonModelMetadata)
  return target;
}

size_t SeldonModelMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.SeldonModelMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string versions = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(versions_.size());
  for (int i = 0, n = versions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      versions_.Get(i));
  }

  // repeated .seldon.protos.SeldonMessageMetadata inputs = 4;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .seldon.protos.SeldonMessageMetadata outputs = 5;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> custom = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_custom_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_custom().begin();
      it != this->_internal_custom().end(); ++it) {
    total_size += SeldonModelMetadata_CustomEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string platform = 3;
  if (this->platform().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeldonModelMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.SeldonModelMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SeldonModelMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeldonModelMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.SeldonModelMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.SeldonModelMetadata)
    MergeFrom(*source);
  }
}

void SeldonModelMetadata::MergeFrom(const SeldonModelMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.SeldonModelMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  versions_.MergeFrom(from.versions_);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  custom_.MergeFrom(from.custom_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.platform().size() > 0) {
    _internal_set_platform(from._internal_platform());
  }
}

void SeldonModelMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.SeldonModelMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeldonModelMetadata::CopyFrom(const SeldonModelMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.SeldonModelMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeldonModelMetadata::IsInitialized() const {
  return true;
}

void SeldonModelMetadata::InternalSwap(SeldonModelMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  versions_.InternalSwap(&other->versions_);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  custom_.Swap(&other->custom_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SeldonModelMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SeldonGraphMetadata_ModelsEntry_DoNotUse::SeldonGraphMetadata_ModelsEntry_DoNotUse() {}
SeldonGraphMetadata_ModelsEntry_DoNotUse::SeldonGraphMetadata_ModelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SeldonGraphMetadata_ModelsEntry_DoNotUse::MergeFrom(const SeldonGraphMetadata_ModelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SeldonGraphMetadata_ModelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SeldonGraphMetadata_ModelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class SeldonGraphMetadata::_Internal {
 public:
};

SeldonGraphMetadata::SeldonGraphMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  models_(arena),
  inputs_(arena),
  outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:seldon.protos.SeldonGraphMetadata)
}
SeldonGraphMetadata::SeldonGraphMetadata(const SeldonGraphMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  models_.MergeFrom(from.models_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:seldon.protos.SeldonGraphMetadata)
}

void SeldonGraphMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SeldonGraphMetadata_prediction_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SeldonGraphMetadata::~SeldonGraphMetadata() {
  // @@protoc_insertion_point(destructor:seldon.protos.SeldonGraphMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SeldonGraphMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SeldonGraphMetadata::ArenaDtor(void* object) {
  SeldonGraphMetadata* _this = reinterpret_cast< SeldonGraphMetadata* >(object);
  (void)_this;
}
void SeldonGraphMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SeldonGraphMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeldonGraphMetadata& SeldonGraphMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeldonGraphMetadata_prediction_2eproto.base);
  return *internal_default_instance();
}


void SeldonGraphMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.SeldonGraphMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  models_.Clear();
  inputs_.Clear();
  outputs_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeldonGraphMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "seldon.protos.SeldonGraphMetadata.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .seldon.protos.SeldonModelMetadata> models = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&models_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .seldon.protos.SeldonMessageMetadata inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .seldon.protos.SeldonMessageMetadata outputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeldonGraphMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.SeldonGraphMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonGraphMetadata.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, .seldon.protos.SeldonModelMetadata> models = 2;
  if (!this->_internal_models().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::seldon::protos::SeldonModelMetadata >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.SeldonGraphMetadata.ModelsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_models().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_models().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::seldon::protos::SeldonModelMetadata >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::seldon::protos::SeldonModelMetadata >::const_iterator
          it = this->_internal_models().begin();
          it != this->_internal_models().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SeldonGraphMetadata_ModelsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::seldon::protos::SeldonModelMetadata >::const_iterator
          it = this->_internal_models().begin();
          it != this->_internal_models().end(); ++it) {
        target = SeldonGraphMetadata_ModelsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .seldon.protos.SeldonMessageMetadata inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_inputs(i), target, stream);
  }

  // repeated .seldon.protos.SeldonMessageMetadata outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.SeldonGraphMetadata)
  return target;
}

size_t SeldonGraphMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.SeldonGraphMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .seldon.protos.SeldonModelMetadata> models = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_models_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::seldon::protos::SeldonModelMetadata >::const_iterator
      it = this->_internal_models().begin();
      it != this->_internal_models().end(); ++it) {
    total_size += SeldonGraphMetadata_ModelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .seldon.protos.SeldonMessageMetadata inputs = 3;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .seldon.protos.SeldonMessageMetadata outputs = 4;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeldonGraphMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.SeldonGraphMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SeldonGraphMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeldonGraphMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.SeldonGraphMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.SeldonGraphMetadata)
    MergeFrom(*source);
  }
}

void SeldonGraphMetadata::MergeFrom(const SeldonGraphMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.SeldonGraphMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  models_.MergeFrom(from.models_);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void SeldonGraphMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.SeldonGraphMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeldonGraphMetadata::CopyFrom(const SeldonGraphMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.SeldonGraphMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeldonGraphMetadata::IsInitialized() const {
  return true;
}

void SeldonGraphMetadata::InternalSwap(SeldonGraphMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  models_.Swap(&other->models_);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SeldonGraphMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace seldon
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::seldon::protos::SeldonMessage* Arena::CreateMaybeMessage< ::seldon::protos::SeldonMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::SeldonMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::DefaultData* Arena::CreateMaybeMessage< ::seldon::protos::DefaultData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::DefaultData >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::Tensor* Arena::CreateMaybeMessage< ::seldon::protos::Tensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::Tensor >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::Meta_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::seldon::protos::Meta_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::Meta_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::Meta_RoutingEntry_DoNotUse* Arena::CreateMaybeMessage< ::seldon::protos::Meta_RoutingEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::Meta_RoutingEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::Meta_RequestPathEntry_DoNotUse* Arena::CreateMaybeMessage< ::seldon::protos::Meta_RequestPathEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::Meta_RequestPathEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::Meta* Arena::CreateMaybeMessage< ::seldon::protos::Meta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::Meta >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::Metric_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::seldon::protos::Metric_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::Metric_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::Metric* Arena::CreateMaybeMessage< ::seldon::protos::Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::Metric >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::SeldonMessageList* Arena::CreateMaybeMessage< ::seldon::protos::SeldonMessageList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::SeldonMessageList >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::Status* Arena::CreateMaybeMessage< ::seldon::protos::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::Feedback* Arena::CreateMaybeMessage< ::seldon::protos::Feedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::Feedback >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::RequestResponse* Arena::CreateMaybeMessage< ::seldon::protos::RequestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::RequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::SeldonModelMetadataRequest* Arena::CreateMaybeMessage< ::seldon::protos::SeldonModelMetadataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::SeldonModelMetadataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::SeldonMessageMetadata* Arena::CreateMaybeMessage< ::seldon::protos::SeldonMessageMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::SeldonMessageMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::SeldonModelMetadata_CustomEntry_DoNotUse* Arena::CreateMaybeMessage< ::seldon::protos::SeldonModelMetadata_CustomEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::SeldonModelMetadata_CustomEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::SeldonModelMetadata* Arena::CreateMaybeMessage< ::seldon::protos::SeldonModelMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::SeldonModelMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::SeldonGraphMetadata_ModelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::seldon::protos::SeldonGraphMetadata_ModelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::SeldonGraphMetadata_ModelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::seldon::protos::SeldonGraphMetadata* Arena::CreateMaybeMessage< ::seldon::protos::SeldonGraphMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::seldon::protos::SeldonGraphMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
