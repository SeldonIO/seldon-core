// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "prediction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace seldon {
namespace protos {

namespace {

const ::google::protobuf::Descriptor* SeldonMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeldonMessage_reflection_ = NULL;
struct SeldonMessageOneofInstance {
  const ::seldon::protos::DefaultData* data_;
  ::google::protobuf::internal::ArenaStringPtr bindata_;
  ::google::protobuf::internal::ArenaStringPtr strdata_;
  const ::google::protobuf::Value* jsondata_;
  const ::google::protobuf::Any* customdata_;
}* SeldonMessage_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* DefaultData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DefaultData_reflection_ = NULL;
struct DefaultDataOneofInstance {
  const ::seldon::protos::Tensor* tensor_;
  const ::google::protobuf::ListValue* ndarray_;
  const ::tensorflow::TensorProto* tftensor_;
}* DefaultData_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Tensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tensor_reflection_ = NULL;
const ::google::protobuf::Descriptor* Meta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Meta_reflection_ = NULL;
const ::google::protobuf::Descriptor* Meta_TagsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Meta_RoutingEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Meta_RequestPathEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Metric_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metric_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metric_TagsEntry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Metric_MetricType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SeldonMessageList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeldonMessageList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_StatusFlag_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Feedback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Feedback_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeldonModelMetadataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeldonModelMetadataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeldonMessageMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeldonMessageMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeldonModelMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeldonModelMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeldonModelMetadata_CustomEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SeldonGraphMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeldonGraphMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeldonGraphMetadata_ModelsEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_prediction_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_prediction_2eproto() {
  protobuf_AddDesc_prediction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "prediction.proto");
  GOOGLE_CHECK(file != NULL);
  SeldonMessage_descriptor_ = file->message_type(0);
  static const int SeldonMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessage, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessage, meta_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SeldonMessage_default_oneof_instance_, data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SeldonMessage_default_oneof_instance_, bindata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SeldonMessage_default_oneof_instance_, strdata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SeldonMessage_default_oneof_instance_, jsondata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SeldonMessage_default_oneof_instance_, customdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessage, data_oneof_),
  };
  SeldonMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SeldonMessage_descriptor_,
      SeldonMessage::default_instance_,
      SeldonMessage_offsets_,
      -1,
      -1,
      -1,
      SeldonMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessage, _oneof_case_[0]),
      sizeof(SeldonMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessage, _is_default_instance_));
  DefaultData_descriptor_ = file->message_type(1);
  static const int DefaultData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultData, names_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DefaultData_default_oneof_instance_, tensor_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DefaultData_default_oneof_instance_, ndarray_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DefaultData_default_oneof_instance_, tftensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultData, data_oneof_),
  };
  DefaultData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DefaultData_descriptor_,
      DefaultData::default_instance_,
      DefaultData_offsets_,
      -1,
      -1,
      -1,
      DefaultData_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultData, _oneof_case_[0]),
      sizeof(DefaultData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DefaultData, _is_default_instance_));
  Tensor_descriptor_ = file->message_type(2);
  static const int Tensor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tensor, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tensor, values_),
  };
  Tensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Tensor_descriptor_,
      Tensor::default_instance_,
      Tensor_offsets_,
      -1,
      -1,
      -1,
      sizeof(Tensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tensor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tensor, _is_default_instance_));
  Meta_descriptor_ = file->message_type(3);
  static const int Meta_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, puid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, routing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, requestpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, metrics_),
  };
  Meta_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Meta_descriptor_,
      Meta::default_instance_,
      Meta_offsets_,
      -1,
      -1,
      -1,
      sizeof(Meta),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meta, _is_default_instance_));
  Meta_TagsEntry_descriptor_ = Meta_descriptor_->nested_type(0);
  Meta_RoutingEntry_descriptor_ = Meta_descriptor_->nested_type(1);
  Meta_RequestPathEntry_descriptor_ = Meta_descriptor_->nested_type(2);
  Metric_descriptor_ = file->message_type(4);
  static const int Metric_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, tags_),
  };
  Metric_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Metric_descriptor_,
      Metric::default_instance_,
      Metric_offsets_,
      -1,
      -1,
      -1,
      sizeof(Metric),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, _is_default_instance_));
  Metric_TagsEntry_descriptor_ = Metric_descriptor_->nested_type(0);
  Metric_MetricType_descriptor_ = Metric_descriptor_->enum_type(0);
  SeldonMessageList_descriptor_ = file->message_type(5);
  static const int SeldonMessageList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessageList, seldonmessages_),
  };
  SeldonMessageList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SeldonMessageList_descriptor_,
      SeldonMessageList::default_instance_,
      SeldonMessageList_offsets_,
      -1,
      -1,
      -1,
      sizeof(SeldonMessageList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessageList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessageList, _is_default_instance_));
  Status_descriptor_ = file->message_type(6);
  static const int Status_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, status_),
  };
  Status_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      -1,
      -1,
      -1,
      sizeof(Status),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _is_default_instance_));
  Status_StatusFlag_descriptor_ = Status_descriptor_->enum_type(0);
  Feedback_descriptor_ = file->message_type(7);
  static const int Feedback_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, truth_),
  };
  Feedback_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Feedback_descriptor_,
      Feedback::default_instance_,
      Feedback_offsets_,
      -1,
      -1,
      -1,
      sizeof(Feedback),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, _is_default_instance_));
  RequestResponse_descriptor_ = file->message_type(8);
  static const int RequestResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, response_),
  };
  RequestResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestResponse_descriptor_,
      RequestResponse::default_instance_,
      RequestResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResponse, _is_default_instance_));
  SeldonModelMetadataRequest_descriptor_ = file->message_type(9);
  static const int SeldonModelMetadataRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonModelMetadataRequest, name_),
  };
  SeldonModelMetadataRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SeldonModelMetadataRequest_descriptor_,
      SeldonModelMetadataRequest::default_instance_,
      SeldonModelMetadataRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SeldonModelMetadataRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonModelMetadataRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonModelMetadataRequest, _is_default_instance_));
  SeldonMessageMetadata_descriptor_ = file->message_type(10);
  static const int SeldonMessageMetadata_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessageMetadata, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessageMetadata, schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessageMetadata, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessageMetadata, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessageMetadata, shape_),
  };
  SeldonMessageMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SeldonMessageMetadata_descriptor_,
      SeldonMessageMetadata::default_instance_,
      SeldonMessageMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(SeldonMessageMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessageMetadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonMessageMetadata, _is_default_instance_));
  SeldonModelMetadata_descriptor_ = file->message_type(11);
  static const int SeldonModelMetadata_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonModelMetadata, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonModelMetadata, versions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonModelMetadata, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonModelMetadata, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonModelMetadata, outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonModelMetadata, custom_),
  };
  SeldonModelMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SeldonModelMetadata_descriptor_,
      SeldonModelMetadata::default_instance_,
      SeldonModelMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(SeldonModelMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonModelMetadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonModelMetadata, _is_default_instance_));
  SeldonModelMetadata_CustomEntry_descriptor_ = SeldonModelMetadata_descriptor_->nested_type(0);
  SeldonGraphMetadata_descriptor_ = file->message_type(12);
  static const int SeldonGraphMetadata_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonGraphMetadata, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonGraphMetadata, models_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonGraphMetadata, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonGraphMetadata, outputs_),
  };
  SeldonGraphMetadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SeldonGraphMetadata_descriptor_,
      SeldonGraphMetadata::default_instance_,
      SeldonGraphMetadata_offsets_,
      -1,
      -1,
      -1,
      sizeof(SeldonGraphMetadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonGraphMetadata, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeldonGraphMetadata, _is_default_instance_));
  SeldonGraphMetadata_ModelsEntry_descriptor_ = SeldonGraphMetadata_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_prediction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SeldonMessage_descriptor_, &SeldonMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DefaultData_descriptor_, &DefaultData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Tensor_descriptor_, &Tensor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Meta_descriptor_, &Meta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Meta_TagsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::Value,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Meta_TagsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Meta_RoutingEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                Meta_RoutingEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Meta_RequestPathEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Meta_RequestPathEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Metric_descriptor_, &Metric::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Metric_TagsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Metric_TagsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SeldonMessageList_descriptor_, &SeldonMessageList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Status_descriptor_, &Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Feedback_descriptor_, &Feedback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestResponse_descriptor_, &RequestResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SeldonModelMetadataRequest_descriptor_, &SeldonModelMetadataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SeldonMessageMetadata_descriptor_, &SeldonMessageMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SeldonModelMetadata_descriptor_, &SeldonModelMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SeldonModelMetadata_CustomEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                SeldonModelMetadata_CustomEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SeldonGraphMetadata_descriptor_, &SeldonGraphMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SeldonGraphMetadata_ModelsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::seldon::protos::SeldonModelMetadata,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                SeldonGraphMetadata_ModelsEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_prediction_2eproto() {
  delete SeldonMessage::default_instance_;
  delete SeldonMessage_default_oneof_instance_;
  delete SeldonMessage_reflection_;
  delete DefaultData::default_instance_;
  delete DefaultData_default_oneof_instance_;
  delete DefaultData_reflection_;
  delete Tensor::default_instance_;
  delete Tensor_reflection_;
  delete Meta::default_instance_;
  delete Meta_reflection_;
  delete Metric::default_instance_;
  delete Metric_reflection_;
  delete SeldonMessageList::default_instance_;
  delete SeldonMessageList_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
  delete Feedback::default_instance_;
  delete Feedback_reflection_;
  delete RequestResponse::default_instance_;
  delete RequestResponse_reflection_;
  delete SeldonModelMetadataRequest::default_instance_;
  delete SeldonModelMetadataRequest_reflection_;
  delete SeldonMessageMetadata::default_instance_;
  delete SeldonMessageMetadata_reflection_;
  delete SeldonModelMetadata::default_instance_;
  delete SeldonModelMetadata_reflection_;
  delete SeldonGraphMetadata::default_instance_;
  delete SeldonGraphMetadata_reflection_;
}

void protobuf_AddDesc_prediction_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_prediction_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fstruct_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fempty_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020prediction.proto\022\rseldon.protos\032\031googl"
    "e/protobuf/any.proto\032\034google/protobuf/st"
    "ruct.proto\032\033google/protobuf/empty.proto\032"
    "&tensorflow/core/framework/tensor.proto\""
    "\221\002\n\rSeldonMessage\022%\n\006status\030\001 \001(\0132\025.seld"
    "on.protos.Status\022!\n\004meta\030\002 \001(\0132\023.seldon."
    "protos.Meta\022*\n\004data\030\003 \001(\0132\032.seldon.proto"
    "s.DefaultDataH\000\022\021\n\007binData\030\004 \001(\014H\000\022\021\n\007st"
    "rData\030\005 \001(\tH\000\022*\n\010jsonData\030\006 \001(\0132\026.google"
    ".protobuf.ValueH\000\022*\n\ncustomData\030\007 \001(\0132\024."
    "google.protobuf.AnyH\000B\014\n\ndata_oneof\"\257\001\n\013"
    "DefaultData\022\r\n\005names\030\001 \003(\t\022\'\n\006tensor\030\002 \001"
    "(\0132\025.seldon.protos.TensorH\000\022-\n\007ndarray\030\003"
    " \001(\0132\032.google.protobuf.ListValueH\000\022+\n\010tf"
    "tensor\030\004 \001(\0132\027.tensorflow.TensorProtoH\000B"
    "\014\n\ndata_oneof\"/\n\006Tensor\022\021\n\005shape\030\001 \003(\005B\002"
    "\020\001\022\022\n\006values\030\002 \003(\001B\002\020\001\"\200\003\n\004Meta\022\014\n\004puid\030"
    "\001 \001(\t\022+\n\004tags\030\002 \003(\0132\035.seldon.protos.Meta"
    ".TagsEntry\0221\n\007routing\030\003 \003(\0132 .seldon.pro"
    "tos.Meta.RoutingEntry\0229\n\013requestPath\030\004 \003"
    "(\0132$.seldon.protos.Meta.RequestPathEntry"
    "\022&\n\007metrics\030\005 \003(\0132\025.seldon.protos.Metric"
    "\032C\n\tTagsEntry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001("
    "\0132\026.google.protobuf.Value:\0028\001\032.\n\014Routing"
    "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\0322\n"
    "\020RequestPathEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
    "\002 \001(\t:\0028\001\"\341\001\n\006Metric\022\013\n\003key\030\001 \001(\t\022.\n\004typ"
    "e\030\002 \001(\0162 .seldon.protos.Metric.MetricTyp"
    "e\022\r\n\005value\030\003 \001(\002\022-\n\004tags\030\004 \003(\0132\037.seldon."
    "protos.Metric.TagsEntry\032+\n\tTagsEntry\022\013\n\003"
    "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"/\n\nMetricTy"
    "pe\022\013\n\007COUNTER\020\000\022\t\n\005GAUGE\020\001\022\t\n\005TIMER\020\002\"I\n"
    "\021SeldonMessageList\0224\n\016seldonMessages\030\001 \003"
    "(\0132\034.seldon.protos.SeldonMessage\"\216\001\n\006Sta"
    "tus\022\014\n\004code\030\001 \001(\005\022\014\n\004info\030\002 \001(\t\022\016\n\006reaso"
    "n\030\003 \001(\t\0220\n\006status\030\004 \001(\0162 .seldon.protos."
    "Status.StatusFlag\"&\n\nStatusFlag\022\013\n\007SUCCE"
    "SS\020\000\022\013\n\007FAILURE\020\001\"\246\001\n\010Feedback\022-\n\007reques"
    "t\030\001 \001(\0132\034.seldon.protos.SeldonMessage\022.\n"
    "\010response\030\002 \001(\0132\034.seldon.protos.SeldonMe"
    "ssage\022\016\n\006reward\030\003 \001(\002\022+\n\005truth\030\004 \001(\0132\034.s"
    "eldon.protos.SeldonMessage\"p\n\017RequestRes"
    "ponse\022-\n\007request\030\001 \001(\0132\034.seldon.protos.S"
    "eldonMessage\022.\n\010response\030\002 \001(\0132\034.seldon."
    "protos.SeldonMessage\"*\n\032SeldonModelMetad"
    "ataRequest\022\014\n\004name\030\001 \001(\t\"\203\001\n\025SeldonMessa"
    "geMetadata\022\023\n\013messagetype\030\001 \001(\t\022&\n\006schem"
    "a\030\002 \001(\0132\026.google.protobuf.Value\022\014\n\004name\030"
    "\003 \001(\t\022\020\n\010datatype\030\004 \001(\t\022\r\n\005shape\030\005 \003(\003\"\243"
    "\002\n\023SeldonModelMetadata\022\014\n\004name\030\001 \001(\t\022\020\n\010"
    "versions\030\002 \003(\t\022\020\n\010platform\030\003 \001(\t\0224\n\006inpu"
    "ts\030\004 \003(\0132$.seldon.protos.SeldonMessageMe"
    "tadata\0225\n\007outputs\030\005 \003(\0132$.seldon.protos."
    "SeldonMessageMetadata\022>\n\006custom\030\006 \003(\0132.."
    "seldon.protos.SeldonModelMetadata.Custom"
    "Entry\032-\n\013CustomEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
    "ue\030\002 \001(\t:\0028\001\"\243\002\n\023SeldonGraphMetadata\022\014\n\004"
    "name\030\001 \001(\t\022>\n\006models\030\002 \003(\0132..seldon.prot"
    "os.SeldonGraphMetadata.ModelsEntry\0224\n\006in"
    "puts\030\003 \003(\0132$.seldon.protos.SeldonMessage"
    "Metadata\0225\n\007outputs\030\004 \003(\0132$.seldon.proto"
    "s.SeldonMessageMetadata\032Q\n\013ModelsEntry\022\013"
    "\n\003key\030\001 \001(\t\0221\n\005value\030\002 \001(\0132\".seldon.prot"
    "os.SeldonModelMetadata:\0028\0012\211\003\n\007Generic\022N"
    "\n\016TransformInput\022\034.seldon.protos.SeldonM"
    "essage\032\034.seldon.protos.SeldonMessage\"\000\022O"
    "\n\017TransformOutput\022\034.seldon.protos.Seldon"
    "Message\032\034.seldon.protos.SeldonMessage\"\000\022"
    "E\n\005Route\022\034.seldon.protos.SeldonMessage\032\034"
    ".seldon.protos.SeldonMessage\"\000\022M\n\tAggreg"
    "ate\022 .seldon.protos.SeldonMessageList\032\034."
    "seldon.protos.SeldonMessage\"\000\022G\n\014SendFee"
    "dback\022\027.seldon.protos.Feedback\032\034.seldon."
    "protos.SeldonMessage\"\0002\343\001\n\005Model\022G\n\007Pred"
    "ict\022\034.seldon.protos.SeldonMessage\032\034.seld"
    "on.protos.SeldonMessage\"\000\022G\n\014SendFeedbac"
    "k\022\027.seldon.protos.Feedback\032\034.seldon.prot"
    "os.SeldonMessage\"\000\022H\n\010Metadata\022\026.google."
    "protobuf.Empty\032\".seldon.protos.SeldonMod"
    "elMetadata\"\0002\230\001\n\006Router\022E\n\005Route\022\034.seldo"
    "n.protos.SeldonMessage\032\034.seldon.protos.S"
    "eldonMessage\"\000\022G\n\014SendFeedback\022\027.seldon."
    "protos.Feedback\032\034.seldon.protos.SeldonMe"
    "ssage\"\0002]\n\013Transformer\022N\n\016TransformInput"
    "\022\034.seldon.protos.SeldonMessage\032\034.seldon."
    "protos.SeldonMessage\"\0002d\n\021OutputTransfor"
    "mer\022O\n\017TransformOutput\022\034.seldon.protos.S"
    "eldonMessage\032\034.seldon.protos.SeldonMessa"
    "ge\"\0002Y\n\010Combiner\022M\n\tAggregate\022 .seldon.p"
    "rotos.SeldonMessageList\032\034.seldon.protos."
    "SeldonMessage\"\0002\313\002\n\006Seldon\022G\n\007Predict\022\034."
    "seldon.protos.SeldonMessage\032\034.seldon.pro"
    "tos.SeldonMessage\"\000\022G\n\014SendFeedback\022\027.se"
    "ldon.protos.Feedback\032\034.seldon.protos.Sel"
    "donMessage\"\000\022`\n\rModelMetadata\022).seldon.p"
    "rotos.SeldonModelMetadataRequest\032\".seldo"
    "n.protos.SeldonModelMetadata\"\000\022M\n\rGraphM"
    "etadata\022\026.google.protobuf.Empty\032\".seldon"
    ".protos.SeldonGraphMetadata\"\000Bh\n\020io.seld"
    "on.protosB\020PredictionProtosZBgithub.com/"
    "seldonio/seldon-core/incubating/wrappers"
    "/s2i/go/pkg/apib\006proto3", 4063);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "prediction.proto", &protobuf_RegisterTypes);
  SeldonMessage::default_instance_ = new SeldonMessage();
  SeldonMessage_default_oneof_instance_ = new SeldonMessageOneofInstance();
  DefaultData::default_instance_ = new DefaultData();
  DefaultData_default_oneof_instance_ = new DefaultDataOneofInstance();
  Tensor::default_instance_ = new Tensor();
  Meta::default_instance_ = new Meta();
  Metric::default_instance_ = new Metric();
  SeldonMessageList::default_instance_ = new SeldonMessageList();
  Status::default_instance_ = new Status();
  Feedback::default_instance_ = new Feedback();
  RequestResponse::default_instance_ = new RequestResponse();
  SeldonModelMetadataRequest::default_instance_ = new SeldonModelMetadataRequest();
  SeldonMessageMetadata::default_instance_ = new SeldonMessageMetadata();
  SeldonModelMetadata::default_instance_ = new SeldonModelMetadata();
  SeldonGraphMetadata::default_instance_ = new SeldonGraphMetadata();
  SeldonMessage::default_instance_->InitAsDefaultInstance();
  DefaultData::default_instance_->InitAsDefaultInstance();
  Tensor::default_instance_->InitAsDefaultInstance();
  Meta::default_instance_->InitAsDefaultInstance();
  Metric::default_instance_->InitAsDefaultInstance();
  SeldonMessageList::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  Feedback::default_instance_->InitAsDefaultInstance();
  RequestResponse::default_instance_->InitAsDefaultInstance();
  SeldonModelMetadataRequest::default_instance_->InitAsDefaultInstance();
  SeldonMessageMetadata::default_instance_->InitAsDefaultInstance();
  SeldonModelMetadata::default_instance_->InitAsDefaultInstance();
  SeldonGraphMetadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_prediction_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_prediction_2eproto {
  StaticDescriptorInitializer_prediction_2eproto() {
    protobuf_AddDesc_prediction_2eproto();
  }
} static_descriptor_initializer_prediction_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeldonMessage::kStatusFieldNumber;
const int SeldonMessage::kMetaFieldNumber;
const int SeldonMessage::kDataFieldNumber;
const int SeldonMessage::kBinDataFieldNumber;
const int SeldonMessage::kStrDataFieldNumber;
const int SeldonMessage::kJsonDataFieldNumber;
const int SeldonMessage::kCustomDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeldonMessage::SeldonMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seldon.protos.SeldonMessage)
}

void SeldonMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::seldon::protos::Status*>(&::seldon::protos::Status::default_instance());
  meta_ = const_cast< ::seldon::protos::Meta*>(&::seldon::protos::Meta::default_instance());
  SeldonMessage_default_oneof_instance_->data_ = const_cast< ::seldon::protos::DefaultData*>(&::seldon::protos::DefaultData::default_instance());
  SeldonMessage_default_oneof_instance_->bindata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  SeldonMessage_default_oneof_instance_->strdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  SeldonMessage_default_oneof_instance_->jsondata_ = const_cast< ::google::protobuf::Value*>(&::google::protobuf::Value::default_instance());
  SeldonMessage_default_oneof_instance_->customdata_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

SeldonMessage::SeldonMessage(const SeldonMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.SeldonMessage)
}

void SeldonMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = NULL;
  meta_ = NULL;
  clear_has_data_oneof();
}

SeldonMessage::~SeldonMessage() {
  // @@protoc_insertion_point(destructor:seldon.protos.SeldonMessage)
  SharedDtor();
}

void SeldonMessage::SharedDtor() {
  if (has_data_oneof()) {
    clear_data_oneof();
  }
  if (this != default_instance_) {
    delete status_;
    delete meta_;
  }
}

void SeldonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeldonMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeldonMessage_descriptor_;
}

const SeldonMessage& SeldonMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2eproto();
  return *default_instance_;
}

SeldonMessage* SeldonMessage::default_instance_ = NULL;

SeldonMessage* SeldonMessage::New(::google::protobuf::Arena* arena) const {
  SeldonMessage* n = new SeldonMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeldonMessage::clear_data_oneof() {
// @@protoc_insertion_point(one_of_clear_start:seldon.protos.SeldonMessage)
  switch(data_oneof_case()) {
    case kData: {
      delete data_oneof_.data_;
      break;
    }
    case kBinData: {
      data_oneof_.bindata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kStrData: {
      data_oneof_.strdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kJsonData: {
      delete data_oneof_.jsondata_;
      break;
    }
    case kCustomData: {
      delete data_oneof_.customdata_;
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}


void SeldonMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.SeldonMessage)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
  clear_data_oneof();
}

bool SeldonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seldon.protos.SeldonMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .seldon.protos.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_meta;
        break;
      }

      // optional .seldon.protos.Meta meta = 2;
      case 2: {
        if (tag == 18) {
         parse_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .seldon.protos.DefaultData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_binData;
        break;
      }

      // optional bytes binData = 4;
      case 4: {
        if (tag == 34) {
         parse_binData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bindata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_strData;
        break;
      }

      // optional string strData = 5;
      case 5: {
        if (tag == 42) {
         parse_strData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strdata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strdata().data(), this->strdata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.SeldonMessage.strData"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_jsonData;
        break;
      }

      // optional .google.protobuf.Value jsonData = 6;
      case 6: {
        if (tag == 50) {
         parse_jsonData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jsondata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_customData;
        break;
      }

      // optional .google.protobuf.Any customData = 7;
      case 7: {
        if (tag == 58) {
         parse_customData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seldon.protos.SeldonMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seldon.protos.SeldonMessage)
  return false;
#undef DO_
}

void SeldonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seldon.protos.SeldonMessage)
  // optional .seldon.protos.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // optional .seldon.protos.Meta meta = 2;
  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->meta_, output);
  }

  // optional .seldon.protos.DefaultData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *data_oneof_.data_, output);
  }

  // optional bytes binData = 4;
  if (has_bindata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->bindata(), output);
  }

  // optional string strData = 5;
  if (has_strdata()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strdata().data(), this->strdata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonMessage.strData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->strdata(), output);
  }

  // optional .google.protobuf.Value jsonData = 6;
  if (has_jsondata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *data_oneof_.jsondata_, output);
  }

  // optional .google.protobuf.Any customData = 7;
  if (has_customdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *data_oneof_.customdata_, output);
  }

  // @@protoc_insertion_point(serialize_end:seldon.protos.SeldonMessage)
}

::google::protobuf::uint8* SeldonMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.SeldonMessage)
  // optional .seldon.protos.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, false, target);
  }

  // optional .seldon.protos.Meta meta = 2;
  if (this->has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->meta_, false, target);
  }

  // optional .seldon.protos.DefaultData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *data_oneof_.data_, false, target);
  }

  // optional bytes binData = 4;
  if (has_bindata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->bindata(), target);
  }

  // optional string strData = 5;
  if (has_strdata()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strdata().data(), this->strdata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonMessage.strData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strdata(), target);
  }

  // optional .google.protobuf.Value jsonData = 6;
  if (has_jsondata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *data_oneof_.jsondata_, false, target);
  }

  // optional .google.protobuf.Any customData = 7;
  if (has_customdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *data_oneof_.customdata_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.SeldonMessage)
  return target;
}

int SeldonMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.SeldonMessage)
  int total_size = 0;

  // optional .seldon.protos.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // optional .seldon.protos.Meta meta = 2;
  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->meta_);
  }

  switch (data_oneof_case()) {
    // optional .seldon.protos.DefaultData data = 3;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_oneof_.data_);
      break;
    }
    // optional bytes binData = 4;
    case kBinData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bindata());
      break;
    }
    // optional string strData = 5;
    case kStrData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strdata());
      break;
    }
    // optional .google.protobuf.Value jsonData = 6;
    case kJsonData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_oneof_.jsondata_);
      break;
    }
    // optional .google.protobuf.Any customData = 7;
    case kCustomData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_oneof_.customdata_);
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeldonMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.SeldonMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SeldonMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SeldonMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.SeldonMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.SeldonMessage)
    MergeFrom(*source);
  }
}

void SeldonMessage::MergeFrom(const SeldonMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.SeldonMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.data_oneof_case()) {
    case kData: {
      mutable_data()->::seldon::protos::DefaultData::MergeFrom(from.data());
      break;
    }
    case kBinData: {
      set_bindata(from.bindata());
      break;
    }
    case kStrData: {
      set_strdata(from.strdata());
      break;
    }
    case kJsonData: {
      mutable_jsondata()->::google::protobuf::Value::MergeFrom(from.jsondata());
      break;
    }
    case kCustomData: {
      mutable_customdata()->::google::protobuf::Any::MergeFrom(from.customdata());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from.has_status()) {
    mutable_status()->::seldon::protos::Status::MergeFrom(from.status());
  }
  if (from.has_meta()) {
    mutable_meta()->::seldon::protos::Meta::MergeFrom(from.meta());
  }
}

void SeldonMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.SeldonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeldonMessage::CopyFrom(const SeldonMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.SeldonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeldonMessage::IsInitialized() const {

  return true;
}

void SeldonMessage::Swap(SeldonMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeldonMessage::InternalSwap(SeldonMessage* other) {
  std::swap(status_, other->status_);
  std::swap(meta_, other->meta_);
  std::swap(data_oneof_, other->data_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeldonMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeldonMessage_descriptor_;
  metadata.reflection = SeldonMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeldonMessage

// optional .seldon.protos.Status status = 1;
bool SeldonMessage::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void SeldonMessage::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::seldon::protos::Status& SeldonMessage::status() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::seldon::protos::Status* SeldonMessage::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::seldon::protos::Status;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.status)
  return status_;
}
::seldon::protos::Status* SeldonMessage::release_status() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.status)
  
  ::seldon::protos::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void SeldonMessage::set_allocated_status(::seldon::protos::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.status)
}

// optional .seldon.protos.Meta meta = 2;
bool SeldonMessage::has_meta() const {
  return !_is_default_instance_ && meta_ != NULL;
}
void SeldonMessage::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
const ::seldon::protos::Meta& SeldonMessage::meta() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.meta)
  return meta_ != NULL ? *meta_ : *default_instance_->meta_;
}
::seldon::protos::Meta* SeldonMessage::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::seldon::protos::Meta;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.meta)
  return meta_;
}
::seldon::protos::Meta* SeldonMessage::release_meta() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.meta)
  
  ::seldon::protos::Meta* temp = meta_;
  meta_ = NULL;
  return temp;
}
void SeldonMessage::set_allocated_meta(::seldon::protos::Meta* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.meta)
}

// optional .seldon.protos.DefaultData data = 3;
bool SeldonMessage::has_data() const {
  return data_oneof_case() == kData;
}
void SeldonMessage::set_has_data() {
  _oneof_case_[0] = kData;
}
void SeldonMessage::clear_data() {
  if (has_data()) {
    delete data_oneof_.data_;
    clear_has_data_oneof();
  }
}
 const ::seldon::protos::DefaultData& SeldonMessage::data() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.data)
  return has_data()
      ? *data_oneof_.data_
      : ::seldon::protos::DefaultData::default_instance();
}
::seldon::protos::DefaultData* SeldonMessage::mutable_data() {
  if (!has_data()) {
    clear_data_oneof();
    set_has_data();
    data_oneof_.data_ = new ::seldon::protos::DefaultData;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.data)
  return data_oneof_.data_;
}
::seldon::protos::DefaultData* SeldonMessage::release_data() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.data)
  if (has_data()) {
    clear_has_data_oneof();
    ::seldon::protos::DefaultData* temp = data_oneof_.data_;
    data_oneof_.data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SeldonMessage::set_allocated_data(::seldon::protos::DefaultData* data) {
  clear_data_oneof();
  if (data) {
    set_has_data();
    data_oneof_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.data)
}

// optional bytes binData = 4;
bool SeldonMessage::has_bindata() const {
  return data_oneof_case() == kBinData;
}
void SeldonMessage::set_has_bindata() {
  _oneof_case_[0] = kBinData;
}
void SeldonMessage::clear_bindata() {
  if (has_bindata()) {
    data_oneof_.bindata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data_oneof();
  }
}
 const ::std::string& SeldonMessage::bindata() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.binData)
  if (has_bindata()) {
    return data_oneof_.bindata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void SeldonMessage::set_bindata(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessage.binData)
  if (!has_bindata()) {
    clear_data_oneof();
    set_has_bindata();
    data_oneof_.bindata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessage.binData)
}
 void SeldonMessage::set_bindata(const char* value) {
  if (!has_bindata()) {
    clear_data_oneof();
    set_has_bindata();
    data_oneof_.bindata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessage.binData)
}
 void SeldonMessage::set_bindata(const void* value, size_t size) {
  if (!has_bindata()) {
    clear_data_oneof();
    set_has_bindata();
    data_oneof_.bindata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessage.binData)
}
 ::std::string* SeldonMessage::mutable_bindata() {
  if (!has_bindata()) {
    clear_data_oneof();
    set_has_bindata();
    data_oneof_.bindata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.binData)
  return data_oneof_.bindata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SeldonMessage::release_bindata() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.binData)
  if (has_bindata()) {
    clear_has_data_oneof();
    return data_oneof_.bindata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void SeldonMessage::set_allocated_bindata(::std::string* bindata) {
  if (!has_bindata()) {
    data_oneof_.bindata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_oneof();
  if (bindata != NULL) {
    set_has_bindata();
    data_oneof_.bindata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        bindata);
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.binData)
}

// optional string strData = 5;
bool SeldonMessage::has_strdata() const {
  return data_oneof_case() == kStrData;
}
void SeldonMessage::set_has_strdata() {
  _oneof_case_[0] = kStrData;
}
void SeldonMessage::clear_strdata() {
  if (has_strdata()) {
    data_oneof_.strdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data_oneof();
  }
}
 const ::std::string& SeldonMessage::strdata() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.strData)
  if (has_strdata()) {
    return data_oneof_.strdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void SeldonMessage::set_strdata(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessage.strData)
  if (!has_strdata()) {
    clear_data_oneof();
    set_has_strdata();
    data_oneof_.strdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.strdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessage.strData)
}
 void SeldonMessage::set_strdata(const char* value) {
  if (!has_strdata()) {
    clear_data_oneof();
    set_has_strdata();
    data_oneof_.strdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.strdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessage.strData)
}
 void SeldonMessage::set_strdata(const char* value, size_t size) {
  if (!has_strdata()) {
    clear_data_oneof();
    set_has_strdata();
    data_oneof_.strdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.strdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessage.strData)
}
 ::std::string* SeldonMessage::mutable_strdata() {
  if (!has_strdata()) {
    clear_data_oneof();
    set_has_strdata();
    data_oneof_.strdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.strData)
  return data_oneof_.strdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SeldonMessage::release_strdata() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.strData)
  if (has_strdata()) {
    clear_has_data_oneof();
    return data_oneof_.strdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void SeldonMessage::set_allocated_strdata(::std::string* strdata) {
  if (!has_strdata()) {
    data_oneof_.strdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_oneof();
  if (strdata != NULL) {
    set_has_strdata();
    data_oneof_.strdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        strdata);
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.strData)
}

// optional .google.protobuf.Value jsonData = 6;
bool SeldonMessage::has_jsondata() const {
  return data_oneof_case() == kJsonData;
}
void SeldonMessage::set_has_jsondata() {
  _oneof_case_[0] = kJsonData;
}
void SeldonMessage::clear_jsondata() {
  if (has_jsondata()) {
    delete data_oneof_.jsondata_;
    clear_has_data_oneof();
  }
}
 const ::google::protobuf::Value& SeldonMessage::jsondata() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.jsonData)
  return has_jsondata()
      ? *data_oneof_.jsondata_
      : ::google::protobuf::Value::default_instance();
}
::google::protobuf::Value* SeldonMessage::mutable_jsondata() {
  if (!has_jsondata()) {
    clear_data_oneof();
    set_has_jsondata();
    data_oneof_.jsondata_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.jsonData)
  return data_oneof_.jsondata_;
}
::google::protobuf::Value* SeldonMessage::release_jsondata() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.jsonData)
  if (has_jsondata()) {
    clear_has_data_oneof();
    ::google::protobuf::Value* temp = data_oneof_.jsondata_;
    data_oneof_.jsondata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SeldonMessage::set_allocated_jsondata(::google::protobuf::Value* jsondata) {
  clear_data_oneof();
  if (jsondata) {
    set_has_jsondata();
    data_oneof_.jsondata_ = jsondata;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.jsonData)
}

// optional .google.protobuf.Any customData = 7;
bool SeldonMessage::has_customdata() const {
  return data_oneof_case() == kCustomData;
}
void SeldonMessage::set_has_customdata() {
  _oneof_case_[0] = kCustomData;
}
void SeldonMessage::clear_customdata() {
  if (has_customdata()) {
    delete data_oneof_.customdata_;
    clear_has_data_oneof();
  }
}
 const ::google::protobuf::Any& SeldonMessage::customdata() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.customData)
  return has_customdata()
      ? *data_oneof_.customdata_
      : ::google::protobuf::Any::default_instance();
}
::google::protobuf::Any* SeldonMessage::mutable_customdata() {
  if (!has_customdata()) {
    clear_data_oneof();
    set_has_customdata();
    data_oneof_.customdata_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.customData)
  return data_oneof_.customdata_;
}
::google::protobuf::Any* SeldonMessage::release_customdata() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.customData)
  if (has_customdata()) {
    clear_has_data_oneof();
    ::google::protobuf::Any* temp = data_oneof_.customdata_;
    data_oneof_.customdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SeldonMessage::set_allocated_customdata(::google::protobuf::Any* customdata) {
  clear_data_oneof();
  if (customdata) {
    set_has_customdata();
    data_oneof_.customdata_ = customdata;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.customData)
}

bool SeldonMessage::has_data_oneof() const {
  return data_oneof_case() != DATA_ONEOF_NOT_SET;
}
void SeldonMessage::clear_has_data_oneof() {
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}
SeldonMessage::DataOneofCase SeldonMessage::data_oneof_case() const {
  return SeldonMessage::DataOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DefaultData::kNamesFieldNumber;
const int DefaultData::kTensorFieldNumber;
const int DefaultData::kNdarrayFieldNumber;
const int DefaultData::kTftensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DefaultData::DefaultData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seldon.protos.DefaultData)
}

void DefaultData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  DefaultData_default_oneof_instance_->tensor_ = const_cast< ::seldon::protos::Tensor*>(&::seldon::protos::Tensor::default_instance());
  DefaultData_default_oneof_instance_->ndarray_ = const_cast< ::google::protobuf::ListValue*>(&::google::protobuf::ListValue::default_instance());
  DefaultData_default_oneof_instance_->tftensor_ = const_cast< ::tensorflow::TensorProto*>(&::tensorflow::TensorProto::default_instance());
}

DefaultData::DefaultData(const DefaultData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.DefaultData)
}

void DefaultData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_data_oneof();
}

DefaultData::~DefaultData() {
  // @@protoc_insertion_point(destructor:seldon.protos.DefaultData)
  SharedDtor();
}

void DefaultData::SharedDtor() {
  if (has_data_oneof()) {
    clear_data_oneof();
  }
  if (this != default_instance_) {
  }
}

void DefaultData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DefaultData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DefaultData_descriptor_;
}

const DefaultData& DefaultData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2eproto();
  return *default_instance_;
}

DefaultData* DefaultData::default_instance_ = NULL;

DefaultData* DefaultData::New(::google::protobuf::Arena* arena) const {
  DefaultData* n = new DefaultData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DefaultData::clear_data_oneof() {
// @@protoc_insertion_point(one_of_clear_start:seldon.protos.DefaultData)
  switch(data_oneof_case()) {
    case kTensor: {
      delete data_oneof_.tensor_;
      break;
    }
    case kNdarray: {
      delete data_oneof_.ndarray_;
      break;
    }
    case kTftensor: {
      delete data_oneof_.tftensor_;
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}


void DefaultData::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.DefaultData)
  names_.Clear();
  clear_data_oneof();
}

bool DefaultData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seldon.protos.DefaultData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (tag == 10) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.DefaultData.names"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectTag(18)) goto parse_tensor;
        break;
      }

      // optional .seldon.protos.Tensor tensor = 2;
      case 2: {
        if (tag == 18) {
         parse_tensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ndarray;
        break;
      }

      // optional .google.protobuf.ListValue ndarray = 3;
      case 3: {
        if (tag == 26) {
         parse_ndarray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ndarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tftensor;
        break;
      }

      // optional .tensorflow.TensorProto tftensor = 4;
      case 4: {
        if (tag == 34) {
         parse_tftensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tftensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seldon.protos.DefaultData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seldon.protos.DefaultData)
  return false;
#undef DO_
}

void DefaultData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seldon.protos.DefaultData)
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.DefaultData.names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }

  // optional .seldon.protos.Tensor tensor = 2;
  if (has_tensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *data_oneof_.tensor_, output);
  }

  // optional .google.protobuf.ListValue ndarray = 3;
  if (has_ndarray()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *data_oneof_.ndarray_, output);
  }

  // optional .tensorflow.TensorProto tftensor = 4;
  if (has_tftensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *data_oneof_.tftensor_, output);
  }

  // @@protoc_insertion_point(serialize_end:seldon.protos.DefaultData)
}

::google::protobuf::uint8* DefaultData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.DefaultData)
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.DefaultData.names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }

  // optional .seldon.protos.Tensor tensor = 2;
  if (has_tensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *data_oneof_.tensor_, false, target);
  }

  // optional .google.protobuf.ListValue ndarray = 3;
  if (has_ndarray()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *data_oneof_.ndarray_, false, target);
  }

  // optional .tensorflow.TensorProto tftensor = 4;
  if (has_tftensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *data_oneof_.tftensor_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.DefaultData)
  return target;
}

int DefaultData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.DefaultData)
  int total_size = 0;

  // repeated string names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  switch (data_oneof_case()) {
    // optional .seldon.protos.Tensor tensor = 2;
    case kTensor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_oneof_.tensor_);
      break;
    }
    // optional .google.protobuf.ListValue ndarray = 3;
    case kNdarray: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_oneof_.ndarray_);
      break;
    }
    // optional .tensorflow.TensorProto tftensor = 4;
    case kTftensor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_oneof_.tftensor_);
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefaultData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.DefaultData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DefaultData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DefaultData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.DefaultData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.DefaultData)
    MergeFrom(*source);
  }
}

void DefaultData::MergeFrom(const DefaultData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.DefaultData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  names_.MergeFrom(from.names_);
  switch (from.data_oneof_case()) {
    case kTensor: {
      mutable_tensor()->::seldon::protos::Tensor::MergeFrom(from.tensor());
      break;
    }
    case kNdarray: {
      mutable_ndarray()->::google::protobuf::ListValue::MergeFrom(from.ndarray());
      break;
    }
    case kTftensor: {
      mutable_tftensor()->::tensorflow::TensorProto::MergeFrom(from.tftensor());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
}

void DefaultData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.DefaultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultData::CopyFrom(const DefaultData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.DefaultData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultData::IsInitialized() const {

  return true;
}

void DefaultData::Swap(DefaultData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DefaultData::InternalSwap(DefaultData* other) {
  names_.UnsafeArenaSwap(&other->names_);
  std::swap(data_oneof_, other->data_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DefaultData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DefaultData_descriptor_;
  metadata.reflection = DefaultData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DefaultData

// repeated string names = 1;
int DefaultData::names_size() const {
  return names_.size();
}
void DefaultData::clear_names() {
  names_.Clear();
}
 const ::std::string& DefaultData::names(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.DefaultData.names)
  return names_.Get(index);
}
 ::std::string* DefaultData::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.DefaultData.names)
  return names_.Mutable(index);
}
 void DefaultData::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:seldon.protos.DefaultData.names)
  names_.Mutable(index)->assign(value);
}
 void DefaultData::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:seldon.protos.DefaultData.names)
}
 void DefaultData::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.DefaultData.names)
}
 ::std::string* DefaultData::add_names() {
  // @@protoc_insertion_point(field_add_mutable:seldon.protos.DefaultData.names)
  return names_.Add();
}
 void DefaultData::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:seldon.protos.DefaultData.names)
}
 void DefaultData::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:seldon.protos.DefaultData.names)
}
 void DefaultData::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:seldon.protos.DefaultData.names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
DefaultData::names() const {
  // @@protoc_insertion_point(field_list:seldon.protos.DefaultData.names)
  return names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
DefaultData::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.DefaultData.names)
  return &names_;
}

// optional .seldon.protos.Tensor tensor = 2;
bool DefaultData::has_tensor() const {
  return data_oneof_case() == kTensor;
}
void DefaultData::set_has_tensor() {
  _oneof_case_[0] = kTensor;
}
void DefaultData::clear_tensor() {
  if (has_tensor()) {
    delete data_oneof_.tensor_;
    clear_has_data_oneof();
  }
}
 const ::seldon::protos::Tensor& DefaultData::tensor() const {
  // @@protoc_insertion_point(field_get:seldon.protos.DefaultData.tensor)
  return has_tensor()
      ? *data_oneof_.tensor_
      : ::seldon::protos::Tensor::default_instance();
}
::seldon::protos::Tensor* DefaultData::mutable_tensor() {
  if (!has_tensor()) {
    clear_data_oneof();
    set_has_tensor();
    data_oneof_.tensor_ = new ::seldon::protos::Tensor;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.DefaultData.tensor)
  return data_oneof_.tensor_;
}
::seldon::protos::Tensor* DefaultData::release_tensor() {
  // @@protoc_insertion_point(field_release:seldon.protos.DefaultData.tensor)
  if (has_tensor()) {
    clear_has_data_oneof();
    ::seldon::protos::Tensor* temp = data_oneof_.tensor_;
    data_oneof_.tensor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DefaultData::set_allocated_tensor(::seldon::protos::Tensor* tensor) {
  clear_data_oneof();
  if (tensor) {
    set_has_tensor();
    data_oneof_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.DefaultData.tensor)
}

// optional .google.protobuf.ListValue ndarray = 3;
bool DefaultData::has_ndarray() const {
  return data_oneof_case() == kNdarray;
}
void DefaultData::set_has_ndarray() {
  _oneof_case_[0] = kNdarray;
}
void DefaultData::clear_ndarray() {
  if (has_ndarray()) {
    delete data_oneof_.ndarray_;
    clear_has_data_oneof();
  }
}
 const ::google::protobuf::ListValue& DefaultData::ndarray() const {
  // @@protoc_insertion_point(field_get:seldon.protos.DefaultData.ndarray)
  return has_ndarray()
      ? *data_oneof_.ndarray_
      : ::google::protobuf::ListValue::default_instance();
}
::google::protobuf::ListValue* DefaultData::mutable_ndarray() {
  if (!has_ndarray()) {
    clear_data_oneof();
    set_has_ndarray();
    data_oneof_.ndarray_ = new ::google::protobuf::ListValue;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.DefaultData.ndarray)
  return data_oneof_.ndarray_;
}
::google::protobuf::ListValue* DefaultData::release_ndarray() {
  // @@protoc_insertion_point(field_release:seldon.protos.DefaultData.ndarray)
  if (has_ndarray()) {
    clear_has_data_oneof();
    ::google::protobuf::ListValue* temp = data_oneof_.ndarray_;
    data_oneof_.ndarray_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DefaultData::set_allocated_ndarray(::google::protobuf::ListValue* ndarray) {
  clear_data_oneof();
  if (ndarray) {
    set_has_ndarray();
    data_oneof_.ndarray_ = ndarray;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.DefaultData.ndarray)
}

// optional .tensorflow.TensorProto tftensor = 4;
bool DefaultData::has_tftensor() const {
  return data_oneof_case() == kTftensor;
}
void DefaultData::set_has_tftensor() {
  _oneof_case_[0] = kTftensor;
}
void DefaultData::clear_tftensor() {
  if (has_tftensor()) {
    delete data_oneof_.tftensor_;
    clear_has_data_oneof();
  }
}
 const ::tensorflow::TensorProto& DefaultData::tftensor() const {
  // @@protoc_insertion_point(field_get:seldon.protos.DefaultData.tftensor)
  return has_tftensor()
      ? *data_oneof_.tftensor_
      : ::tensorflow::TensorProto::default_instance();
}
::tensorflow::TensorProto* DefaultData::mutable_tftensor() {
  if (!has_tftensor()) {
    clear_data_oneof();
    set_has_tftensor();
    data_oneof_.tftensor_ = new ::tensorflow::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.DefaultData.tftensor)
  return data_oneof_.tftensor_;
}
::tensorflow::TensorProto* DefaultData::release_tftensor() {
  // @@protoc_insertion_point(field_release:seldon.protos.DefaultData.tftensor)
  if (has_tftensor()) {
    clear_has_data_oneof();
    ::tensorflow::TensorProto* temp = data_oneof_.tftensor_;
    data_oneof_.tftensor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DefaultData::set_allocated_tftensor(::tensorflow::TensorProto* tftensor) {
  clear_data_oneof();
  if (tftensor) {
    if (static_cast< ::tensorflow::TensorProto*>(tftensor)->GetArena() != NULL) {
      ::tensorflow::TensorProto* new_tftensor = new ::tensorflow::TensorProto;
      new_tftensor->CopyFrom(*tftensor);
      tftensor = new_tftensor;
    }
    set_has_tftensor();
    data_oneof_.tftensor_ = tftensor;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.DefaultData.tftensor)
}

bool DefaultData::has_data_oneof() const {
  return data_oneof_case() != DATA_ONEOF_NOT_SET;
}
void DefaultData::clear_has_data_oneof() {
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}
DefaultData::DataOneofCase DefaultData::data_oneof_case() const {
  return DefaultData::DataOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tensor::kShapeFieldNumber;
const int Tensor::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tensor::Tensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seldon.protos.Tensor)
}

void Tensor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Tensor::Tensor(const Tensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.Tensor)
}

void Tensor::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Tensor::~Tensor() {
  // @@protoc_insertion_point(destructor:seldon.protos.Tensor)
  SharedDtor();
}

void Tensor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tensor_descriptor_;
}

const Tensor& Tensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2eproto();
  return *default_instance_;
}

Tensor* Tensor::default_instance_ = NULL;

Tensor* Tensor::New(::google::protobuf::Arena* arena) const {
  Tensor* n = new Tensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.Tensor)
  shape_.Clear();
  values_.Clear();
}

bool Tensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seldon.protos.Tensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 shape = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shape())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated double values = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seldon.protos.Tensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seldon.protos.Tensor)
  return false;
#undef DO_
}

void Tensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seldon.protos.Tensor)
  // repeated int32 shape = 1 [packed = true];
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->shape(i), output);
  }

  // repeated double values = 2 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:seldon.protos.Tensor)
}

::google::protobuf::uint8* Tensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.Tensor)
  // repeated int32 shape = 1 [packed = true];
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->shape(i), target);
  }

  // repeated double values = 2 [packed = true];
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.Tensor)
  return target;
}

int Tensor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.Tensor)
  int total_size = 0;

  // repeated int32 shape = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shape(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double values = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.Tensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Tensor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Tensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.Tensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.Tensor)
    MergeFrom(*source);
  }
}

void Tensor::MergeFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.Tensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  shape_.MergeFrom(from.shape_);
  values_.MergeFrom(from.values_);
}

void Tensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tensor::CopyFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tensor::IsInitialized() const {

  return true;
}

void Tensor::Swap(Tensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tensor::InternalSwap(Tensor* other) {
  shape_.UnsafeArenaSwap(&other->shape_);
  values_.UnsafeArenaSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tensor_descriptor_;
  metadata.reflection = Tensor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tensor

// repeated int32 shape = 1 [packed = true];
int Tensor::shape_size() const {
  return shape_.size();
}
void Tensor::clear_shape() {
  shape_.Clear();
}
 ::google::protobuf::int32 Tensor::shape(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.Tensor.shape)
  return shape_.Get(index);
}
 void Tensor::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:seldon.protos.Tensor.shape)
}
 void Tensor::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:seldon.protos.Tensor.shape)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Tensor::shape() const {
  // @@protoc_insertion_point(field_list:seldon.protos.Tensor.shape)
  return shape_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Tensor::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.Tensor.shape)
  return &shape_;
}

// repeated double values = 2 [packed = true];
int Tensor::values_size() const {
  return values_.size();
}
void Tensor::clear_values() {
  values_.Clear();
}
 double Tensor::values(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.Tensor.values)
  return values_.Get(index);
}
 void Tensor::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:seldon.protos.Tensor.values)
}
 void Tensor::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:seldon.protos.Tensor.values)
}
 const ::google::protobuf::RepeatedField< double >&
Tensor::values() const {
  // @@protoc_insertion_point(field_list:seldon.protos.Tensor.values)
  return values_;
}
 ::google::protobuf::RepeatedField< double >*
Tensor::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.Tensor.values)
  return &values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Meta::kPuidFieldNumber;
const int Meta::kTagsFieldNumber;
const int Meta::kRoutingFieldNumber;
const int Meta::kRequestPathFieldNumber;
const int Meta::kMetricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Meta::Meta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seldon.protos.Meta)
}

void Meta::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Meta::Meta(const Meta& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.Meta)
}

void Meta::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  puid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tags_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tags_.SetEntryDescriptor(
      &::seldon::protos::Meta_TagsEntry_descriptor_);
  routing_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  routing_.SetEntryDescriptor(
      &::seldon::protos::Meta_RoutingEntry_descriptor_);
  requestpath_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  requestpath_.SetEntryDescriptor(
      &::seldon::protos::Meta_RequestPathEntry_descriptor_);
}

Meta::~Meta() {
  // @@protoc_insertion_point(destructor:seldon.protos.Meta)
  SharedDtor();
}

void Meta::SharedDtor() {
  puid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Meta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Meta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Meta_descriptor_;
}

const Meta& Meta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2eproto();
  return *default_instance_;
}

Meta* Meta::default_instance_ = NULL;

Meta* Meta::New(::google::protobuf::Arena* arena) const {
  Meta* n = new Meta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.Meta)
  puid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tags_.Clear();
  routing_.Clear();
  requestpath_.Clear();
  metrics_.Clear();
}

bool Meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seldon.protos.Meta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string puid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_puid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->puid().data(), this->puid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.Meta.puid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }

      // map<string, .google.protobuf.Value> tags = 2;
      case 2: {
        if (tag == 18) {
         parse_tags:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tags:
          Meta_TagsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::Value,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::Value > > parser(&tags_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.Meta.TagsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_tags;
        if (input->ExpectTag(26)) goto parse_loop_routing;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, int32> routing = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_routing:
          Meta_RoutingEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&routing_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.Meta.RoutingEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_routing;
        if (input->ExpectTag(34)) goto parse_loop_requestPath;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> requestPath = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_requestPath:
          Meta_RequestPathEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&requestpath_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.Meta.RequestPathEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.Meta.RequestPathEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_requestPath;
        if (input->ExpectTag(42)) goto parse_loop_metrics;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .seldon.protos.Metric metrics = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_metrics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seldon.protos.Meta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seldon.protos.Meta)
  return false;
#undef DO_
}

void Meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seldon.protos.Meta)
  // optional string puid = 1;
  if (this->puid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->puid().data(), this->puid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.Meta.puid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->puid(), output);
  }

  // map<string, .google.protobuf.Value> tags = 2;
  if (!this->tags().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Value >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Meta.TagsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->tags().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tags().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Value >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Value >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Meta_TagsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tags_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Meta_TagsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Value >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it) {
        entry.reset(tags_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int32> routing = 3;
  if (!this->routing().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Meta.RoutingEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->routing().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->routing().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->routing().begin();
          it != this->routing().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Meta_RoutingEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(routing_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Meta_RoutingEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->routing().begin();
          it != this->routing().end(); ++it) {
        entry.reset(routing_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> requestPath = 4;
  if (!this->requestpath().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Meta.RequestPathEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Meta.RequestPathEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->requestpath().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->requestpath().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->requestpath().begin();
          it != this->requestpath().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Meta_RequestPathEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(requestpath_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Meta_RequestPathEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->requestpath().begin();
          it != this->requestpath().end(); ++it) {
        entry.reset(requestpath_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .seldon.protos.Metric metrics = 5;
  for (unsigned int i = 0, n = this->metrics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->metrics(i), output);
  }

  // @@protoc_insertion_point(serialize_end:seldon.protos.Meta)
}

::google::protobuf::uint8* Meta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.Meta)
  // optional string puid = 1;
  if (this->puid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->puid().data(), this->puid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.Meta.puid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->puid(), target);
  }

  // map<string, .google.protobuf.Value> tags = 2;
  if (!this->tags().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Value >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Meta.TagsEntry.key");
      }
    };

    if (deterministic &&
        this->tags().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tags().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Value >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Value >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Meta_TagsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tags_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Meta_TagsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Value >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it) {
        entry.reset(tags_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int32> routing = 3;
  if (!this->routing().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Meta.RoutingEntry.key");
      }
    };

    if (deterministic &&
        this->routing().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->routing().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->routing().begin();
          it != this->routing().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Meta_RoutingEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(routing_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Meta_RoutingEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->routing().begin();
          it != this->routing().end(); ++it) {
        entry.reset(routing_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> requestPath = 4;
  if (!this->requestpath().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Meta.RequestPathEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Meta.RequestPathEntry.value");
      }
    };

    if (deterministic &&
        this->requestpath().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->requestpath().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->requestpath().begin();
          it != this->requestpath().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Meta_RequestPathEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(requestpath_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Meta_RequestPathEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->requestpath().begin();
          it != this->requestpath().end(); ++it) {
        entry.reset(requestpath_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .seldon.protos.Metric metrics = 5;
  for (unsigned int i = 0, n = this->metrics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->metrics(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.Meta)
  return target;
}

int Meta::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.Meta)
  int total_size = 0;

  // optional string puid = 1;
  if (this->puid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->puid());
  }

  // map<string, .google.protobuf.Value> tags = 2;
  total_size += 1 * this->tags_size();
  {
    ::google::protobuf::scoped_ptr<Meta_TagsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::Value >::const_iterator
        it = this->tags().begin();
        it != this->tags().end(); ++it) {
      entry.reset(tags_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, int32> routing = 3;
  total_size += 1 * this->routing_size();
  {
    ::google::protobuf::scoped_ptr<Meta_RoutingEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->routing().begin();
        it != this->routing().end(); ++it) {
      entry.reset(routing_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> requestPath = 4;
  total_size += 1 * this->requestpath_size();
  {
    ::google::protobuf::scoped_ptr<Meta_RequestPathEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->requestpath().begin();
        it != this->requestpath().end(); ++it) {
      entry.reset(requestpath_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .seldon.protos.Metric metrics = 5;
  total_size += 1 * this->metrics_size();
  for (int i = 0; i < this->metrics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metrics(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Meta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.Meta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Meta* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Meta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.Meta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.Meta)
    MergeFrom(*source);
  }
}

void Meta::MergeFrom(const Meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.Meta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tags_.MergeFrom(from.tags_);
  routing_.MergeFrom(from.routing_);
  requestpath_.MergeFrom(from.requestpath_);
  metrics_.MergeFrom(from.metrics_);
  if (from.puid().size() > 0) {

    puid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.puid_);
  }
}

void Meta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Meta::CopyFrom(const Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meta::IsInitialized() const {

  return true;
}

void Meta::Swap(Meta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Meta::InternalSwap(Meta* other) {
  puid_.Swap(&other->puid_);
  tags_.Swap(&other->tags_);
  routing_.Swap(&other->routing_);
  requestpath_.Swap(&other->requestpath_);
  metrics_.UnsafeArenaSwap(&other->metrics_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Meta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Meta_descriptor_;
  metadata.reflection = Meta_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Meta

// optional string puid = 1;
void Meta::clear_puid() {
  puid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Meta::puid() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Meta.puid)
  return puid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Meta::set_puid(const ::std::string& value) {
  
  puid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.Meta.puid)
}
 void Meta::set_puid(const char* value) {
  
  puid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.Meta.puid)
}
 void Meta::set_puid(const char* value, size_t size) {
  
  puid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.Meta.puid)
}
 ::std::string* Meta::mutable_puid() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.Meta.puid)
  return puid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Meta::release_puid() {
  // @@protoc_insertion_point(field_release:seldon.protos.Meta.puid)
  
  return puid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Meta::set_allocated_puid(::std::string* puid) {
  if (puid != NULL) {
    
  } else {
    
  }
  puid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), puid);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Meta.puid)
}

// map<string, .google.protobuf.Value> tags = 2;
int Meta::tags_size() const {
  return tags_.size();
}
void Meta::clear_tags() {
  tags_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::Value >&
Meta::tags() const {
  // @@protoc_insertion_point(field_map:seldon.protos.Meta.tags)
  return tags_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::Value >*
Meta::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.Meta.tags)
  return tags_.MutableMap();
}

// map<string, int32> routing = 3;
int Meta::routing_size() const {
  return routing_.size();
}
void Meta::clear_routing() {
  routing_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
Meta::routing() const {
  // @@protoc_insertion_point(field_map:seldon.protos.Meta.routing)
  return routing_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
Meta::mutable_routing() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.Meta.routing)
  return routing_.MutableMap();
}

// map<string, string> requestPath = 4;
int Meta::requestpath_size() const {
  return requestpath_.size();
}
void Meta::clear_requestpath() {
  requestpath_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Meta::requestpath() const {
  // @@protoc_insertion_point(field_map:seldon.protos.Meta.requestPath)
  return requestpath_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Meta::mutable_requestpath() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.Meta.requestPath)
  return requestpath_.MutableMap();
}

// repeated .seldon.protos.Metric metrics = 5;
int Meta::metrics_size() const {
  return metrics_.size();
}
void Meta::clear_metrics() {
  metrics_.Clear();
}
const ::seldon::protos::Metric& Meta::metrics(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.Meta.metrics)
  return metrics_.Get(index);
}
::seldon::protos::Metric* Meta::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.Meta.metrics)
  return metrics_.Mutable(index);
}
::seldon::protos::Metric* Meta::add_metrics() {
  // @@protoc_insertion_point(field_add:seldon.protos.Meta.metrics)
  return metrics_.Add();
}
::google::protobuf::RepeatedPtrField< ::seldon::protos::Metric >*
Meta::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.Meta.metrics)
  return &metrics_;
}
const ::google::protobuf::RepeatedPtrField< ::seldon::protos::Metric >&
Meta::metrics() const {
  // @@protoc_insertion_point(field_list:seldon.protos.Meta.metrics)
  return metrics_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Metric_MetricType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metric_MetricType_descriptor_;
}
bool Metric_MetricType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Metric_MetricType Metric::COUNTER;
const Metric_MetricType Metric::GAUGE;
const Metric_MetricType Metric::TIMER;
const Metric_MetricType Metric::MetricType_MIN;
const Metric_MetricType Metric::MetricType_MAX;
const int Metric::MetricType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metric::kKeyFieldNumber;
const int Metric::kTypeFieldNumber;
const int Metric::kValueFieldNumber;
const int Metric::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metric::Metric()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seldon.protos.Metric)
}

void Metric::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Metric::Metric(const Metric& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.Metric)
}

void Metric::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  value_ = 0;
  tags_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  tags_.SetEntryDescriptor(
      &::seldon::protos::Metric_TagsEntry_descriptor_);
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:seldon.protos.Metric)
  SharedDtor();
}

void Metric::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Metric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metric::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metric_descriptor_;
}

const Metric& Metric::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2eproto();
  return *default_instance_;
}

Metric* Metric::default_instance_ = NULL;

Metric* Metric::New(::google::protobuf::Arena* arena) const {
  Metric* n = new Metric;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.Metric)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Metric, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Metric*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, value_);
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  tags_.Clear();
}

bool Metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seldon.protos.Metric)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.Metric.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .seldon.protos.Metric.MetricType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::seldon::protos::Metric_MetricType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_value;
        break;
      }

      // optional float value = 3;
      case 3: {
        if (tag == 29) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        break;
      }

      // map<string, string> tags = 4;
      case 4: {
        if (tag == 34) {
         parse_tags:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tags:
          Metric_TagsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&tags_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.Metric.TagsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.Metric.TagsEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_tags;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seldon.protos.Metric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seldon.protos.Metric)
  return false;
#undef DO_
}

void Metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seldon.protos.Metric)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.Metric.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional .seldon.protos.Metric.MetricType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional float value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }

  // map<string, string> tags = 4;
  if (!this->tags().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Metric.TagsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Metric.TagsEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->tags().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tags().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Metric_TagsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tags_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Metric_TagsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it) {
        entry.reset(tags_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:seldon.protos.Metric)
}

::google::protobuf::uint8* Metric::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.Metric)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.Metric.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional .seldon.protos.Metric.MetricType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional float value = 3;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }

  // map<string, string> tags = 4;
  if (!this->tags().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Metric.TagsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.Metric.TagsEntry.value");
      }
    };

    if (deterministic &&
        this->tags().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->tags().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Metric_TagsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(tags_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Metric_TagsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->tags().begin();
          it != this->tags().end(); ++it) {
        entry.reset(tags_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.Metric)
  return target;
}

int Metric::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.Metric)
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional .seldon.protos.Metric.MetricType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional float value = 3;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  // map<string, string> tags = 4;
  total_size += 1 * this->tags_size();
  {
    ::google::protobuf::scoped_ptr<Metric_TagsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->tags().begin();
        it != this->tags().end(); ++it) {
      entry.reset(tags_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.Metric)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Metric* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Metric>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.Metric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.Metric)
    MergeFrom(*source);
  }
}

void Metric::MergeFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.Metric)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tags_.MergeFrom(from.tags_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Metric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {

  return true;
}

void Metric::Swap(Metric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metric::InternalSwap(Metric* other) {
  key_.Swap(&other->key_);
  std::swap(type_, other->type_);
  std::swap(value_, other->value_);
  tags_.Swap(&other->tags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metric::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metric_descriptor_;
  metadata.reflection = Metric_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metric

// optional string key = 1;
void Metric::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Metric::key() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Metric.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metric::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.Metric.key)
}
 void Metric::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.Metric.key)
}
 void Metric::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.Metric.key)
}
 ::std::string* Metric::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.Metric.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Metric::release_key() {
  // @@protoc_insertion_point(field_release:seldon.protos.Metric.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Metric::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Metric.key)
}

// optional .seldon.protos.Metric.MetricType type = 2;
void Metric::clear_type() {
  type_ = 0;
}
 ::seldon::protos::Metric_MetricType Metric::type() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Metric.type)
  return static_cast< ::seldon::protos::Metric_MetricType >(type_);
}
 void Metric::set_type(::seldon::protos::Metric_MetricType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:seldon.protos.Metric.type)
}

// optional float value = 3;
void Metric::clear_value() {
  value_ = 0;
}
 float Metric::value() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Metric.value)
  return value_;
}
 void Metric::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:seldon.protos.Metric.value)
}

// map<string, string> tags = 4;
int Metric::tags_size() const {
  return tags_.size();
}
void Metric::clear_tags() {
  tags_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Metric::tags() const {
  // @@protoc_insertion_point(field_map:seldon.protos.Metric.tags)
  return tags_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Metric::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.Metric.tags)
  return tags_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeldonMessageList::kSeldonMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeldonMessageList::SeldonMessageList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seldon.protos.SeldonMessageList)
}

void SeldonMessageList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SeldonMessageList::SeldonMessageList(const SeldonMessageList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.SeldonMessageList)
}

void SeldonMessageList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SeldonMessageList::~SeldonMessageList() {
  // @@protoc_insertion_point(destructor:seldon.protos.SeldonMessageList)
  SharedDtor();
}

void SeldonMessageList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeldonMessageList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeldonMessageList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeldonMessageList_descriptor_;
}

const SeldonMessageList& SeldonMessageList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2eproto();
  return *default_instance_;
}

SeldonMessageList* SeldonMessageList::default_instance_ = NULL;

SeldonMessageList* SeldonMessageList::New(::google::protobuf::Arena* arena) const {
  SeldonMessageList* n = new SeldonMessageList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeldonMessageList::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.SeldonMessageList)
  seldonmessages_.Clear();
}

bool SeldonMessageList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seldon.protos.SeldonMessageList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .seldon.protos.SeldonMessage seldonMessages = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_seldonMessages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_seldonmessages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_seldonMessages;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seldon.protos.SeldonMessageList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seldon.protos.SeldonMessageList)
  return false;
#undef DO_
}

void SeldonMessageList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seldon.protos.SeldonMessageList)
  // repeated .seldon.protos.SeldonMessage seldonMessages = 1;
  for (unsigned int i = 0, n = this->seldonmessages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->seldonmessages(i), output);
  }

  // @@protoc_insertion_point(serialize_end:seldon.protos.SeldonMessageList)
}

::google::protobuf::uint8* SeldonMessageList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.SeldonMessageList)
  // repeated .seldon.protos.SeldonMessage seldonMessages = 1;
  for (unsigned int i = 0, n = this->seldonmessages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->seldonmessages(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.SeldonMessageList)
  return target;
}

int SeldonMessageList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.SeldonMessageList)
  int total_size = 0;

  // repeated .seldon.protos.SeldonMessage seldonMessages = 1;
  total_size += 1 * this->seldonmessages_size();
  for (int i = 0; i < this->seldonmessages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seldonmessages(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeldonMessageList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.SeldonMessageList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SeldonMessageList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SeldonMessageList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.SeldonMessageList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.SeldonMessageList)
    MergeFrom(*source);
  }
}

void SeldonMessageList::MergeFrom(const SeldonMessageList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.SeldonMessageList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  seldonmessages_.MergeFrom(from.seldonmessages_);
}

void SeldonMessageList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.SeldonMessageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeldonMessageList::CopyFrom(const SeldonMessageList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.SeldonMessageList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeldonMessageList::IsInitialized() const {

  return true;
}

void SeldonMessageList::Swap(SeldonMessageList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeldonMessageList::InternalSwap(SeldonMessageList* other) {
  seldonmessages_.UnsafeArenaSwap(&other->seldonmessages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeldonMessageList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeldonMessageList_descriptor_;
  metadata.reflection = SeldonMessageList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeldonMessageList

// repeated .seldon.protos.SeldonMessage seldonMessages = 1;
int SeldonMessageList::seldonmessages_size() const {
  return seldonmessages_.size();
}
void SeldonMessageList::clear_seldonmessages() {
  seldonmessages_.Clear();
}
const ::seldon::protos::SeldonMessage& SeldonMessageList::seldonmessages(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageList.seldonMessages)
  return seldonmessages_.Get(index);
}
::seldon::protos::SeldonMessage* SeldonMessageList::mutable_seldonmessages(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageList.seldonMessages)
  return seldonmessages_.Mutable(index);
}
::seldon::protos::SeldonMessage* SeldonMessageList::add_seldonmessages() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonMessageList.seldonMessages)
  return seldonmessages_.Add();
}
::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessage >*
SeldonMessageList::mutable_seldonmessages() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonMessageList.seldonMessages)
  return &seldonmessages_;
}
const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessage >&
SeldonMessageList::seldonmessages() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonMessageList.seldonMessages)
  return seldonmessages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Status_StatusFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_StatusFlag_descriptor_;
}
bool Status_StatusFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Status_StatusFlag Status::SUCCESS;
const Status_StatusFlag Status::FAILURE;
const Status_StatusFlag Status::StatusFlag_MIN;
const Status_StatusFlag Status::StatusFlag_MAX;
const int Status::StatusFlag_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kCodeFieldNumber;
const int Status::kInfoFieldNumber;
const int Status::kReasonFieldNumber;
const int Status::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seldon.protos.Status)
}

void Status::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Status::Status(const Status& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.Status)
}

void Status::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:seldon.protos.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.Status)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Status, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Status*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(code_, status_);
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seldon.protos.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional string info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.Status.info"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // optional string reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.Status.reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .seldon.protos.Status.StatusFlag status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::seldon::protos::Status_StatusFlag >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seldon.protos.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seldon.protos.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seldon.protos.Status)
  // optional int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string info = 2;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.Status.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->info(), output);
  }

  // optional string reason = 3;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.Status.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  // optional .seldon.protos.Status.StatusFlag status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:seldon.protos.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.Status)
  // optional int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string info = 2;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.Status.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }

  // optional string reason = 3;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.Status.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }

  // optional .seldon.protos.Status.StatusFlag status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.Status)
  return target;
}

int Status::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.Status)
  int total_size = 0;

  // optional int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // optional string info = 2;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // optional string reason = 3;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // optional .seldon.protos.Status.StatusFlag status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Status* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.Status)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {

  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  std::swap(code_, other->code_);
  info_.Swap(&other->info_);
  reason_.Swap(&other->reason_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// optional int32 code = 1;
void Status::clear_code() {
  code_ = 0;
}
 ::google::protobuf::int32 Status::code() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Status.code)
  return code_;
}
 void Status::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:seldon.protos.Status.code)
}

// optional string info = 2;
void Status::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Status::info() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Status.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.Status.info)
}
 void Status::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.Status.info)
}
 void Status::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.Status.info)
}
 ::std::string* Status::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.Status.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_info() {
  // @@protoc_insertion_point(field_release:seldon.protos.Status.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Status.info)
}

// optional string reason = 3;
void Status::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Status::reason() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Status.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.Status.reason)
}
 void Status::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.Status.reason)
}
 void Status::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.Status.reason)
}
 ::std::string* Status::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.Status.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_reason() {
  // @@protoc_insertion_point(field_release:seldon.protos.Status.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Status.reason)
}

// optional .seldon.protos.Status.StatusFlag status = 4;
void Status::clear_status() {
  status_ = 0;
}
 ::seldon::protos::Status_StatusFlag Status::status() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Status.status)
  return static_cast< ::seldon::protos::Status_StatusFlag >(status_);
}
 void Status::set_status(::seldon::protos::Status_StatusFlag value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:seldon.protos.Status.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feedback::kRequestFieldNumber;
const int Feedback::kResponseFieldNumber;
const int Feedback::kRewardFieldNumber;
const int Feedback::kTruthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feedback::Feedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seldon.protos.Feedback)
}

void Feedback::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  request_ = const_cast< ::seldon::protos::SeldonMessage*>(&::seldon::protos::SeldonMessage::default_instance());
  response_ = const_cast< ::seldon::protos::SeldonMessage*>(&::seldon::protos::SeldonMessage::default_instance());
  truth_ = const_cast< ::seldon::protos::SeldonMessage*>(&::seldon::protos::SeldonMessage::default_instance());
}

Feedback::Feedback(const Feedback& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.Feedback)
}

void Feedback::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  reward_ = 0;
  truth_ = NULL;
}

Feedback::~Feedback() {
  // @@protoc_insertion_point(destructor:seldon.protos.Feedback)
  SharedDtor();
}

void Feedback::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
    delete truth_;
  }
}

void Feedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feedback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Feedback_descriptor_;
}

const Feedback& Feedback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2eproto();
  return *default_instance_;
}

Feedback* Feedback::default_instance_ = NULL;

Feedback* Feedback::New(::google::protobuf::Arena* arena) const {
  Feedback* n = new Feedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feedback::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.Feedback)
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
  reward_ = 0;
  if (GetArenaNoVirtual() == NULL && truth_ != NULL) delete truth_;
  truth_ = NULL;
}

bool Feedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seldon.protos.Feedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .seldon.protos.SeldonMessage request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .seldon.protos.SeldonMessage response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_reward;
        break;
      }

      // optional float reward = 3;
      case 3: {
        if (tag == 29) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reward_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_truth;
        break;
      }

      // optional .seldon.protos.SeldonMessage truth = 4;
      case 4: {
        if (tag == 34) {
         parse_truth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seldon.protos.Feedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seldon.protos.Feedback)
  return false;
#undef DO_
}

void Feedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seldon.protos.Feedback)
  // optional .seldon.protos.SeldonMessage request = 1;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->request_, output);
  }

  // optional .seldon.protos.SeldonMessage response = 2;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->response_, output);
  }

  // optional float reward = 3;
  if (this->reward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->reward(), output);
  }

  // optional .seldon.protos.SeldonMessage truth = 4;
  if (this->has_truth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->truth_, output);
  }

  // @@protoc_insertion_point(serialize_end:seldon.protos.Feedback)
}

::google::protobuf::uint8* Feedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.Feedback)
  // optional .seldon.protos.SeldonMessage request = 1;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->request_, false, target);
  }

  // optional .seldon.protos.SeldonMessage response = 2;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->response_, false, target);
  }

  // optional float reward = 3;
  if (this->reward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->reward(), target);
  }

  // optional .seldon.protos.SeldonMessage truth = 4;
  if (this->has_truth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->truth_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.Feedback)
  return target;
}

int Feedback::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.Feedback)
  int total_size = 0;

  // optional .seldon.protos.SeldonMessage request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  // optional .seldon.protos.SeldonMessage response = 2;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // optional float reward = 3;
  if (this->reward() != 0) {
    total_size += 1 + 4;
  }

  // optional .seldon.protos.SeldonMessage truth = 4;
  if (this->has_truth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->truth_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.Feedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Feedback* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Feedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.Feedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.Feedback)
    MergeFrom(*source);
  }
}

void Feedback::MergeFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.Feedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_request()) {
    mutable_request()->::seldon::protos::SeldonMessage::MergeFrom(from.request());
  }
  if (from.has_response()) {
    mutable_response()->::seldon::protos::SeldonMessage::MergeFrom(from.response());
  }
  if (from.reward() != 0) {
    set_reward(from.reward());
  }
  if (from.has_truth()) {
    mutable_truth()->::seldon::protos::SeldonMessage::MergeFrom(from.truth());
  }
}

void Feedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feedback::CopyFrom(const Feedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.Feedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feedback::IsInitialized() const {

  return true;
}

void Feedback::Swap(Feedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feedback::InternalSwap(Feedback* other) {
  std::swap(request_, other->request_);
  std::swap(response_, other->response_);
  std::swap(reward_, other->reward_);
  std::swap(truth_, other->truth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Feedback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Feedback_descriptor_;
  metadata.reflection = Feedback_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feedback

// optional .seldon.protos.SeldonMessage request = 1;
bool Feedback::has_request() const {
  return !_is_default_instance_ && request_ != NULL;
}
void Feedback::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::seldon::protos::SeldonMessage& Feedback::request() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Feedback.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::seldon::protos::SeldonMessage* Feedback::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::seldon::protos::SeldonMessage;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.Feedback.request)
  return request_;
}
::seldon::protos::SeldonMessage* Feedback::release_request() {
  // @@protoc_insertion_point(field_release:seldon.protos.Feedback.request)
  
  ::seldon::protos::SeldonMessage* temp = request_;
  request_ = NULL;
  return temp;
}
void Feedback::set_allocated_request(::seldon::protos::SeldonMessage* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Feedback.request)
}

// optional .seldon.protos.SeldonMessage response = 2;
bool Feedback::has_response() const {
  return !_is_default_instance_ && response_ != NULL;
}
void Feedback::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::seldon::protos::SeldonMessage& Feedback::response() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Feedback.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
::seldon::protos::SeldonMessage* Feedback::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::seldon::protos::SeldonMessage;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.Feedback.response)
  return response_;
}
::seldon::protos::SeldonMessage* Feedback::release_response() {
  // @@protoc_insertion_point(field_release:seldon.protos.Feedback.response)
  
  ::seldon::protos::SeldonMessage* temp = response_;
  response_ = NULL;
  return temp;
}
void Feedback::set_allocated_response(::seldon::protos::SeldonMessage* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Feedback.response)
}

// optional float reward = 3;
void Feedback::clear_reward() {
  reward_ = 0;
}
 float Feedback::reward() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Feedback.reward)
  return reward_;
}
 void Feedback::set_reward(float value) {
  
  reward_ = value;
  // @@protoc_insertion_point(field_set:seldon.protos.Feedback.reward)
}

// optional .seldon.protos.SeldonMessage truth = 4;
bool Feedback::has_truth() const {
  return !_is_default_instance_ && truth_ != NULL;
}
void Feedback::clear_truth() {
  if (GetArenaNoVirtual() == NULL && truth_ != NULL) delete truth_;
  truth_ = NULL;
}
const ::seldon::protos::SeldonMessage& Feedback::truth() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Feedback.truth)
  return truth_ != NULL ? *truth_ : *default_instance_->truth_;
}
::seldon::protos::SeldonMessage* Feedback::mutable_truth() {
  
  if (truth_ == NULL) {
    truth_ = new ::seldon::protos::SeldonMessage;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.Feedback.truth)
  return truth_;
}
::seldon::protos::SeldonMessage* Feedback::release_truth() {
  // @@protoc_insertion_point(field_release:seldon.protos.Feedback.truth)
  
  ::seldon::protos::SeldonMessage* temp = truth_;
  truth_ = NULL;
  return temp;
}
void Feedback::set_allocated_truth(::seldon::protos::SeldonMessage* truth) {
  delete truth_;
  truth_ = truth;
  if (truth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Feedback.truth)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestResponse::kRequestFieldNumber;
const int RequestResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestResponse::RequestResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seldon.protos.RequestResponse)
}

void RequestResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  request_ = const_cast< ::seldon::protos::SeldonMessage*>(&::seldon::protos::SeldonMessage::default_instance());
  response_ = const_cast< ::seldon::protos::SeldonMessage*>(&::seldon::protos::SeldonMessage::default_instance());
}

RequestResponse::RequestResponse(const RequestResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.RequestResponse)
}

void RequestResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
}

RequestResponse::~RequestResponse() {
  // @@protoc_insertion_point(destructor:seldon.protos.RequestResponse)
  SharedDtor();
}

void RequestResponse::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete response_;
  }
}

void RequestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestResponse_descriptor_;
}

const RequestResponse& RequestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2eproto();
  return *default_instance_;
}

RequestResponse* RequestResponse::default_instance_ = NULL;

RequestResponse* RequestResponse::New(::google::protobuf::Arena* arena) const {
  RequestResponse* n = new RequestResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.RequestResponse)
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}

bool RequestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seldon.protos.RequestResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .seldon.protos.SeldonMessage request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .seldon.protos.SeldonMessage response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seldon.protos.RequestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seldon.protos.RequestResponse)
  return false;
#undef DO_
}

void RequestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seldon.protos.RequestResponse)
  // optional .seldon.protos.SeldonMessage request = 1;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->request_, output);
  }

  // optional .seldon.protos.SeldonMessage response = 2;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:seldon.protos.RequestResponse)
}

::google::protobuf::uint8* RequestResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.RequestResponse)
  // optional .seldon.protos.SeldonMessage request = 1;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->request_, false, target);
  }

  // optional .seldon.protos.SeldonMessage response = 2;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.RequestResponse)
  return target;
}

int RequestResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.RequestResponse)
  int total_size = 0;

  // optional .seldon.protos.SeldonMessage request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  // optional .seldon.protos.SeldonMessage response = 2;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.RequestResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.RequestResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.RequestResponse)
    MergeFrom(*source);
  }
}

void RequestResponse::MergeFrom(const RequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.RequestResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_request()) {
    mutable_request()->::seldon::protos::SeldonMessage::MergeFrom(from.request());
  }
  if (from.has_response()) {
    mutable_response()->::seldon::protos::SeldonMessage::MergeFrom(from.response());
  }
}

void RequestResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.RequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResponse::CopyFrom(const RequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.RequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResponse::IsInitialized() const {

  return true;
}

void RequestResponse::Swap(RequestResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestResponse::InternalSwap(RequestResponse* other) {
  std::swap(request_, other->request_);
  std::swap(response_, other->response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestResponse_descriptor_;
  metadata.reflection = RequestResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestResponse

// optional .seldon.protos.SeldonMessage request = 1;
bool RequestResponse::has_request() const {
  return !_is_default_instance_ && request_ != NULL;
}
void RequestResponse::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::seldon::protos::SeldonMessage& RequestResponse::request() const {
  // @@protoc_insertion_point(field_get:seldon.protos.RequestResponse.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
::seldon::protos::SeldonMessage* RequestResponse::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::seldon::protos::SeldonMessage;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.RequestResponse.request)
  return request_;
}
::seldon::protos::SeldonMessage* RequestResponse::release_request() {
  // @@protoc_insertion_point(field_release:seldon.protos.RequestResponse.request)
  
  ::seldon::protos::SeldonMessage* temp = request_;
  request_ = NULL;
  return temp;
}
void RequestResponse::set_allocated_request(::seldon::protos::SeldonMessage* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.RequestResponse.request)
}

// optional .seldon.protos.SeldonMessage response = 2;
bool RequestResponse::has_response() const {
  return !_is_default_instance_ && response_ != NULL;
}
void RequestResponse::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::seldon::protos::SeldonMessage& RequestResponse::response() const {
  // @@protoc_insertion_point(field_get:seldon.protos.RequestResponse.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
::seldon::protos::SeldonMessage* RequestResponse::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::seldon::protos::SeldonMessage;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.RequestResponse.response)
  return response_;
}
::seldon::protos::SeldonMessage* RequestResponse::release_response() {
  // @@protoc_insertion_point(field_release:seldon.protos.RequestResponse.response)
  
  ::seldon::protos::SeldonMessage* temp = response_;
  response_ = NULL;
  return temp;
}
void RequestResponse::set_allocated_response(::seldon::protos::SeldonMessage* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.RequestResponse.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeldonModelMetadataRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeldonModelMetadataRequest::SeldonModelMetadataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seldon.protos.SeldonModelMetadataRequest)
}

void SeldonModelMetadataRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SeldonModelMetadataRequest::SeldonModelMetadataRequest(const SeldonModelMetadataRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.SeldonModelMetadataRequest)
}

void SeldonModelMetadataRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SeldonModelMetadataRequest::~SeldonModelMetadataRequest() {
  // @@protoc_insertion_point(destructor:seldon.protos.SeldonModelMetadataRequest)
  SharedDtor();
}

void SeldonModelMetadataRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SeldonModelMetadataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeldonModelMetadataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeldonModelMetadataRequest_descriptor_;
}

const SeldonModelMetadataRequest& SeldonModelMetadataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2eproto();
  return *default_instance_;
}

SeldonModelMetadataRequest* SeldonModelMetadataRequest::default_instance_ = NULL;

SeldonModelMetadataRequest* SeldonModelMetadataRequest::New(::google::protobuf::Arena* arena) const {
  SeldonModelMetadataRequest* n = new SeldonModelMetadataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeldonModelMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.SeldonModelMetadataRequest)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SeldonModelMetadataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seldon.protos.SeldonModelMetadataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.SeldonModelMetadataRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seldon.protos.SeldonModelMetadataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seldon.protos.SeldonModelMetadataRequest)
  return false;
#undef DO_
}

void SeldonModelMetadataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seldon.protos.SeldonModelMetadataRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonModelMetadataRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:seldon.protos.SeldonModelMetadataRequest)
}

::google::protobuf::uint8* SeldonModelMetadataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.SeldonModelMetadataRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonModelMetadataRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.SeldonModelMetadataRequest)
  return target;
}

int SeldonModelMetadataRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.SeldonModelMetadataRequest)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeldonModelMetadataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.SeldonModelMetadataRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SeldonModelMetadataRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SeldonModelMetadataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.SeldonModelMetadataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.SeldonModelMetadataRequest)
    MergeFrom(*source);
  }
}

void SeldonModelMetadataRequest::MergeFrom(const SeldonModelMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.SeldonModelMetadataRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SeldonModelMetadataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.SeldonModelMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeldonModelMetadataRequest::CopyFrom(const SeldonModelMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.SeldonModelMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeldonModelMetadataRequest::IsInitialized() const {

  return true;
}

void SeldonModelMetadataRequest::Swap(SeldonModelMetadataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeldonModelMetadataRequest::InternalSwap(SeldonModelMetadataRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeldonModelMetadataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeldonModelMetadataRequest_descriptor_;
  metadata.reflection = SeldonModelMetadataRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeldonModelMetadataRequest

// optional string name = 1;
void SeldonModelMetadataRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SeldonModelMetadataRequest::name() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadataRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeldonModelMetadataRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonModelMetadataRequest.name)
}
 void SeldonModelMetadataRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonModelMetadataRequest.name)
}
 void SeldonModelMetadataRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonModelMetadataRequest.name)
}
 ::std::string* SeldonModelMetadataRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadataRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SeldonModelMetadataRequest::release_name() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonModelMetadataRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeldonModelMetadataRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonModelMetadataRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeldonMessageMetadata::kMessagetypeFieldNumber;
const int SeldonMessageMetadata::kSchemaFieldNumber;
const int SeldonMessageMetadata::kNameFieldNumber;
const int SeldonMessageMetadata::kDatatypeFieldNumber;
const int SeldonMessageMetadata::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeldonMessageMetadata::SeldonMessageMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seldon.protos.SeldonMessageMetadata)
}

void SeldonMessageMetadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  schema_ = const_cast< ::google::protobuf::Value*>(&::google::protobuf::Value::default_instance());
}

SeldonMessageMetadata::SeldonMessageMetadata(const SeldonMessageMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.SeldonMessageMetadata)
}

void SeldonMessageMetadata::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  messagetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_ = NULL;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SeldonMessageMetadata::~SeldonMessageMetadata() {
  // @@protoc_insertion_point(destructor:seldon.protos.SeldonMessageMetadata)
  SharedDtor();
}

void SeldonMessageMetadata::SharedDtor() {
  messagetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete schema_;
  }
}

void SeldonMessageMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeldonMessageMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeldonMessageMetadata_descriptor_;
}

const SeldonMessageMetadata& SeldonMessageMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2eproto();
  return *default_instance_;
}

SeldonMessageMetadata* SeldonMessageMetadata::default_instance_ = NULL;

SeldonMessageMetadata* SeldonMessageMetadata::New(::google::protobuf::Arena* arena) const {
  SeldonMessageMetadata* n = new SeldonMessageMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeldonMessageMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.SeldonMessageMetadata)
  messagetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && schema_ != NULL) delete schema_;
  schema_ = NULL;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shape_.Clear();
}

bool SeldonMessageMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seldon.protos.SeldonMessageMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string messagetype = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->messagetype().data(), this->messagetype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.SeldonMessageMetadata.messagetype"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_schema;
        break;
      }

      // optional .google.protobuf.Value schema = 2;
      case 2: {
        if (tag == 18) {
         parse_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schema()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.SeldonMessageMetadata.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datatype;
        break;
      }

      // optional string datatype = 4;
      case 4: {
        if (tag == 34) {
         parse_datatype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datatype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->datatype().data(), this->datatype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.SeldonMessageMetadata.datatype"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_shape;
        break;
      }

      // repeated int64 shape = 5;
      case 5: {
        if (tag == 42) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shape())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 42, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seldon.protos.SeldonMessageMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seldon.protos.SeldonMessageMetadata)
  return false;
#undef DO_
}

void SeldonMessageMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seldon.protos.SeldonMessageMetadata)
  // optional string messagetype = 1;
  if (this->messagetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->messagetype().data(), this->messagetype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonMessageMetadata.messagetype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->messagetype(), output);
  }

  // optional .google.protobuf.Value schema = 2;
  if (this->has_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->schema_, output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonMessageMetadata.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string datatype = 4;
  if (this->datatype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->datatype().data(), this->datatype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonMessageMetadata.datatype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->datatype(), output);
  }

  // repeated int64 shape = 5;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->shape(i), output);
  }

  // @@protoc_insertion_point(serialize_end:seldon.protos.SeldonMessageMetadata)
}

::google::protobuf::uint8* SeldonMessageMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.SeldonMessageMetadata)
  // optional string messagetype = 1;
  if (this->messagetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->messagetype().data(), this->messagetype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonMessageMetadata.messagetype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messagetype(), target);
  }

  // optional .google.protobuf.Value schema = 2;
  if (this->has_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->schema_, false, target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonMessageMetadata.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string datatype = 4;
  if (this->datatype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->datatype().data(), this->datatype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonMessageMetadata.datatype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->datatype(), target);
  }

  // repeated int64 shape = 5;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->shape(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.SeldonMessageMetadata)
  return target;
}

int SeldonMessageMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.SeldonMessageMetadata)
  int total_size = 0;

  // optional string messagetype = 1;
  if (this->messagetype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messagetype());
  }

  // optional .google.protobuf.Value schema = 2;
  if (this->has_schema()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->schema_);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string datatype = 4;
  if (this->datatype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->datatype());
  }

  // repeated int64 shape = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->shape(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeldonMessageMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.SeldonMessageMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SeldonMessageMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SeldonMessageMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.SeldonMessageMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.SeldonMessageMetadata)
    MergeFrom(*source);
  }
}

void SeldonMessageMetadata::MergeFrom(const SeldonMessageMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.SeldonMessageMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  shape_.MergeFrom(from.shape_);
  if (from.messagetype().size() > 0) {

    messagetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagetype_);
  }
  if (from.has_schema()) {
    mutable_schema()->::google::protobuf::Value::MergeFrom(from.schema());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.datatype().size() > 0) {

    datatype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datatype_);
  }
}

void SeldonMessageMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.SeldonMessageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeldonMessageMetadata::CopyFrom(const SeldonMessageMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.SeldonMessageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeldonMessageMetadata::IsInitialized() const {

  return true;
}

void SeldonMessageMetadata::Swap(SeldonMessageMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeldonMessageMetadata::InternalSwap(SeldonMessageMetadata* other) {
  messagetype_.Swap(&other->messagetype_);
  std::swap(schema_, other->schema_);
  name_.Swap(&other->name_);
  datatype_.Swap(&other->datatype_);
  shape_.UnsafeArenaSwap(&other->shape_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeldonMessageMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeldonMessageMetadata_descriptor_;
  metadata.reflection = SeldonMessageMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeldonMessageMetadata

// optional string messagetype = 1;
void SeldonMessageMetadata::clear_messagetype() {
  messagetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SeldonMessageMetadata::messagetype() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.messagetype)
  return messagetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeldonMessageMetadata::set_messagetype(const ::std::string& value) {
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessageMetadata.messagetype)
}
 void SeldonMessageMetadata::set_messagetype(const char* value) {
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessageMetadata.messagetype)
}
 void SeldonMessageMetadata::set_messagetype(const char* value, size_t size) {
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessageMetadata.messagetype)
}
 ::std::string* SeldonMessageMetadata::mutable_messagetype() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageMetadata.messagetype)
  return messagetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SeldonMessageMetadata::release_messagetype() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessageMetadata.messagetype)
  
  return messagetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeldonMessageMetadata::set_allocated_messagetype(::std::string* messagetype) {
  if (messagetype != NULL) {
    
  } else {
    
  }
  messagetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagetype);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessageMetadata.messagetype)
}

// optional .google.protobuf.Value schema = 2;
bool SeldonMessageMetadata::has_schema() const {
  return !_is_default_instance_ && schema_ != NULL;
}
void SeldonMessageMetadata::clear_schema() {
  if (GetArenaNoVirtual() == NULL && schema_ != NULL) delete schema_;
  schema_ = NULL;
}
const ::google::protobuf::Value& SeldonMessageMetadata::schema() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.schema)
  return schema_ != NULL ? *schema_ : *default_instance_->schema_;
}
::google::protobuf::Value* SeldonMessageMetadata::mutable_schema() {
  
  if (schema_ == NULL) {
    schema_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageMetadata.schema)
  return schema_;
}
::google::protobuf::Value* SeldonMessageMetadata::release_schema() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessageMetadata.schema)
  
  ::google::protobuf::Value* temp = schema_;
  schema_ = NULL;
  return temp;
}
void SeldonMessageMetadata::set_allocated_schema(::google::protobuf::Value* schema) {
  delete schema_;
  schema_ = schema;
  if (schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessageMetadata.schema)
}

// optional string name = 3;
void SeldonMessageMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SeldonMessageMetadata::name() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeldonMessageMetadata::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessageMetadata.name)
}
 void SeldonMessageMetadata::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessageMetadata.name)
}
 void SeldonMessageMetadata::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessageMetadata.name)
}
 ::std::string* SeldonMessageMetadata::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SeldonMessageMetadata::release_name() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessageMetadata.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeldonMessageMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessageMetadata.name)
}

// optional string datatype = 4;
void SeldonMessageMetadata::clear_datatype() {
  datatype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SeldonMessageMetadata::datatype() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.datatype)
  return datatype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeldonMessageMetadata::set_datatype(const ::std::string& value) {
  
  datatype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessageMetadata.datatype)
}
 void SeldonMessageMetadata::set_datatype(const char* value) {
  
  datatype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessageMetadata.datatype)
}
 void SeldonMessageMetadata::set_datatype(const char* value, size_t size) {
  
  datatype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessageMetadata.datatype)
}
 ::std::string* SeldonMessageMetadata::mutable_datatype() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageMetadata.datatype)
  return datatype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SeldonMessageMetadata::release_datatype() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessageMetadata.datatype)
  
  return datatype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeldonMessageMetadata::set_allocated_datatype(::std::string* datatype) {
  if (datatype != NULL) {
    
  } else {
    
  }
  datatype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datatype);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessageMetadata.datatype)
}

// repeated int64 shape = 5;
int SeldonMessageMetadata::shape_size() const {
  return shape_.size();
}
void SeldonMessageMetadata::clear_shape() {
  shape_.Clear();
}
 ::google::protobuf::int64 SeldonMessageMetadata::shape(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.shape)
  return shape_.Get(index);
}
 void SeldonMessageMetadata::set_shape(int index, ::google::protobuf::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessageMetadata.shape)
}
 void SeldonMessageMetadata::add_shape(::google::protobuf::int64 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonMessageMetadata.shape)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SeldonMessageMetadata::shape() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonMessageMetadata.shape)
  return shape_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SeldonMessageMetadata::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonMessageMetadata.shape)
  return &shape_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeldonModelMetadata::kNameFieldNumber;
const int SeldonModelMetadata::kVersionsFieldNumber;
const int SeldonModelMetadata::kPlatformFieldNumber;
const int SeldonModelMetadata::kInputsFieldNumber;
const int SeldonModelMetadata::kOutputsFieldNumber;
const int SeldonModelMetadata::kCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeldonModelMetadata::SeldonModelMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seldon.protos.SeldonModelMetadata)
}

void SeldonModelMetadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SeldonModelMetadata::SeldonModelMetadata(const SeldonModelMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.SeldonModelMetadata)
}

void SeldonModelMetadata::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  custom_.SetEntryDescriptor(
      &::seldon::protos::SeldonModelMetadata_CustomEntry_descriptor_);
}

SeldonModelMetadata::~SeldonModelMetadata() {
  // @@protoc_insertion_point(destructor:seldon.protos.SeldonModelMetadata)
  SharedDtor();
}

void SeldonModelMetadata::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SeldonModelMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeldonModelMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeldonModelMetadata_descriptor_;
}

const SeldonModelMetadata& SeldonModelMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2eproto();
  return *default_instance_;
}

SeldonModelMetadata* SeldonModelMetadata::default_instance_ = NULL;

SeldonModelMetadata* SeldonModelMetadata::New(::google::protobuf::Arena* arena) const {
  SeldonModelMetadata* n = new SeldonModelMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeldonModelMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.SeldonModelMetadata)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  versions_.Clear();
  inputs_.Clear();
  outputs_.Clear();
  custom_.Clear();
}

bool SeldonModelMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seldon.protos.SeldonModelMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.SeldonModelMetadata.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_versions;
        break;
      }

      // repeated string versions = 2;
      case 2: {
        if (tag == 18) {
         parse_versions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_versions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->versions(this->versions_size() - 1).data(),
            this->versions(this->versions_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.SeldonModelMetadata.versions"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_versions;
        if (input->ExpectTag(26)) goto parse_platform;
        break;
      }

      // optional string platform = 3;
      case 3: {
        if (tag == 26) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.SeldonModelMetadata.platform"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_inputs;
        break;
      }

      // repeated .seldon.protos.SeldonMessageMetadata inputs = 4;
      case 4: {
        if (tag == 34) {
         parse_inputs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_inputs;
        if (input->ExpectTag(42)) goto parse_loop_outputs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .seldon.protos.SeldonMessageMetadata outputs = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_outputs;
        if (input->ExpectTag(50)) goto parse_loop_custom;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, string> custom = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_custom:
          SeldonModelMetadata_CustomEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&custom_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.SeldonModelMetadata.CustomEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.SeldonModelMetadata.CustomEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_custom;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seldon.protos.SeldonModelMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seldon.protos.SeldonModelMetadata)
  return false;
#undef DO_
}

void SeldonModelMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seldon.protos.SeldonModelMetadata)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonModelMetadata.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string versions = 2;
  for (int i = 0; i < this->versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->versions(i).data(), this->versions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonModelMetadata.versions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->versions(i), output);
  }

  // optional string platform = 3;
  if (this->platform().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonModelMetadata.platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->platform(), output);
  }

  // repeated .seldon.protos.SeldonMessageMetadata inputs = 4;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->inputs(i), output);
  }

  // repeated .seldon.protos.SeldonMessageMetadata outputs = 5;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->outputs(i), output);
  }

  // map<string, string> custom = 6;
  if (!this->custom().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.SeldonModelMetadata.CustomEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.SeldonModelMetadata.CustomEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->custom().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->custom().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->custom().begin();
          it != this->custom().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SeldonModelMetadata_CustomEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(custom_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SeldonModelMetadata_CustomEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->custom().begin();
          it != this->custom().end(); ++it) {
        entry.reset(custom_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:seldon.protos.SeldonModelMetadata)
}

::google::protobuf::uint8* SeldonModelMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.SeldonModelMetadata)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonModelMetadata.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string versions = 2;
  for (int i = 0; i < this->versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->versions(i).data(), this->versions(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonModelMetadata.versions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->versions(i), target);
  }

  // optional string platform = 3;
  if (this->platform().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonModelMetadata.platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }

  // repeated .seldon.protos.SeldonMessageMetadata inputs = 4;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->inputs(i), false, target);
  }

  // repeated .seldon.protos.SeldonMessageMetadata outputs = 5;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->outputs(i), false, target);
  }

  // map<string, string> custom = 6;
  if (!this->custom().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.SeldonModelMetadata.CustomEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.SeldonModelMetadata.CustomEntry.value");
      }
    };

    if (deterministic &&
        this->custom().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->custom().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->custom().begin();
          it != this->custom().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SeldonModelMetadata_CustomEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(custom_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SeldonModelMetadata_CustomEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->custom().begin();
          it != this->custom().end(); ++it) {
        entry.reset(custom_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.SeldonModelMetadata)
  return target;
}

int SeldonModelMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.SeldonModelMetadata)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string platform = 3;
  if (this->platform().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->platform());
  }

  // repeated string versions = 2;
  total_size += 1 * this->versions_size();
  for (int i = 0; i < this->versions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->versions(i));
  }

  // repeated .seldon.protos.SeldonMessageMetadata inputs = 4;
  total_size += 1 * this->inputs_size();
  for (int i = 0; i < this->inputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inputs(i));
  }

  // repeated .seldon.protos.SeldonMessageMetadata outputs = 5;
  total_size += 1 * this->outputs_size();
  for (int i = 0; i < this->outputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputs(i));
  }

  // map<string, string> custom = 6;
  total_size += 1 * this->custom_size();
  {
    ::google::protobuf::scoped_ptr<SeldonModelMetadata_CustomEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->custom().begin();
        it != this->custom().end(); ++it) {
      entry.reset(custom_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeldonModelMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.SeldonModelMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SeldonModelMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SeldonModelMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.SeldonModelMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.SeldonModelMetadata)
    MergeFrom(*source);
  }
}

void SeldonModelMetadata::MergeFrom(const SeldonModelMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.SeldonModelMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  versions_.MergeFrom(from.versions_);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  custom_.MergeFrom(from.custom_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.platform().size() > 0) {

    platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
}

void SeldonModelMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.SeldonModelMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeldonModelMetadata::CopyFrom(const SeldonModelMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.SeldonModelMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeldonModelMetadata::IsInitialized() const {

  return true;
}

void SeldonModelMetadata::Swap(SeldonModelMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeldonModelMetadata::InternalSwap(SeldonModelMetadata* other) {
  name_.Swap(&other->name_);
  versions_.UnsafeArenaSwap(&other->versions_);
  platform_.Swap(&other->platform_);
  inputs_.UnsafeArenaSwap(&other->inputs_);
  outputs_.UnsafeArenaSwap(&other->outputs_);
  custom_.Swap(&other->custom_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeldonModelMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeldonModelMetadata_descriptor_;
  metadata.reflection = SeldonModelMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeldonModelMetadata

// optional string name = 1;
void SeldonModelMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SeldonModelMetadata::name() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeldonModelMetadata::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonModelMetadata.name)
}
 void SeldonModelMetadata::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonModelMetadata.name)
}
 void SeldonModelMetadata::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonModelMetadata.name)
}
 ::std::string* SeldonModelMetadata::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SeldonModelMetadata::release_name() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonModelMetadata.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeldonModelMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonModelMetadata.name)
}

// repeated string versions = 2;
int SeldonModelMetadata::versions_size() const {
  return versions_.size();
}
void SeldonModelMetadata::clear_versions() {
  versions_.Clear();
}
 const ::std::string& SeldonModelMetadata::versions(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.versions)
  return versions_.Get(index);
}
 ::std::string* SeldonModelMetadata::mutable_versions(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.versions)
  return versions_.Mutable(index);
}
 void SeldonModelMetadata::set_versions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonModelMetadata.versions)
  versions_.Mutable(index)->assign(value);
}
 void SeldonModelMetadata::set_versions(int index, const char* value) {
  versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonModelMetadata.versions)
}
 void SeldonModelMetadata::set_versions(int index, const char* value, size_t size) {
  versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonModelMetadata.versions)
}
 ::std::string* SeldonModelMetadata::add_versions() {
  // @@protoc_insertion_point(field_add_mutable:seldon.protos.SeldonModelMetadata.versions)
  return versions_.Add();
}
 void SeldonModelMetadata::add_versions(const ::std::string& value) {
  versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonModelMetadata.versions)
}
 void SeldonModelMetadata::add_versions(const char* value) {
  versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:seldon.protos.SeldonModelMetadata.versions)
}
 void SeldonModelMetadata::add_versions(const char* value, size_t size) {
  versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:seldon.protos.SeldonModelMetadata.versions)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SeldonModelMetadata::versions() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonModelMetadata.versions)
  return versions_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SeldonModelMetadata::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonModelMetadata.versions)
  return &versions_;
}

// optional string platform = 3;
void SeldonModelMetadata::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SeldonModelMetadata::platform() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.platform)
  return platform_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeldonModelMetadata::set_platform(const ::std::string& value) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonModelMetadata.platform)
}
 void SeldonModelMetadata::set_platform(const char* value) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonModelMetadata.platform)
}
 void SeldonModelMetadata::set_platform(const char* value, size_t size) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonModelMetadata.platform)
}
 ::std::string* SeldonModelMetadata::mutable_platform() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SeldonModelMetadata::release_platform() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonModelMetadata.platform)
  
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeldonModelMetadata::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    
  } else {
    
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonModelMetadata.platform)
}

// repeated .seldon.protos.SeldonMessageMetadata inputs = 4;
int SeldonModelMetadata::inputs_size() const {
  return inputs_.size();
}
void SeldonModelMetadata::clear_inputs() {
  inputs_.Clear();
}
const ::seldon::protos::SeldonMessageMetadata& SeldonModelMetadata::inputs(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.inputs)
  return inputs_.Get(index);
}
::seldon::protos::SeldonMessageMetadata* SeldonModelMetadata::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.inputs)
  return inputs_.Mutable(index);
}
::seldon::protos::SeldonMessageMetadata* SeldonModelMetadata::add_inputs() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonModelMetadata.inputs)
  return inputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
SeldonModelMetadata::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonModelMetadata.inputs)
  return &inputs_;
}
const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
SeldonModelMetadata::inputs() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonModelMetadata.inputs)
  return inputs_;
}

// repeated .seldon.protos.SeldonMessageMetadata outputs = 5;
int SeldonModelMetadata::outputs_size() const {
  return outputs_.size();
}
void SeldonModelMetadata::clear_outputs() {
  outputs_.Clear();
}
const ::seldon::protos::SeldonMessageMetadata& SeldonModelMetadata::outputs(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.outputs)
  return outputs_.Get(index);
}
::seldon::protos::SeldonMessageMetadata* SeldonModelMetadata::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.outputs)
  return outputs_.Mutable(index);
}
::seldon::protos::SeldonMessageMetadata* SeldonModelMetadata::add_outputs() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonModelMetadata.outputs)
  return outputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
SeldonModelMetadata::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonModelMetadata.outputs)
  return &outputs_;
}
const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
SeldonModelMetadata::outputs() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonModelMetadata.outputs)
  return outputs_;
}

// map<string, string> custom = 6;
int SeldonModelMetadata::custom_size() const {
  return custom_.size();
}
void SeldonModelMetadata::clear_custom() {
  custom_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
SeldonModelMetadata::custom() const {
  // @@protoc_insertion_point(field_map:seldon.protos.SeldonModelMetadata.custom)
  return custom_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
SeldonModelMetadata::mutable_custom() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.SeldonModelMetadata.custom)
  return custom_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeldonGraphMetadata::kNameFieldNumber;
const int SeldonGraphMetadata::kModelsFieldNumber;
const int SeldonGraphMetadata::kInputsFieldNumber;
const int SeldonGraphMetadata::kOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeldonGraphMetadata::SeldonGraphMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seldon.protos.SeldonGraphMetadata)
}

void SeldonGraphMetadata::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SeldonGraphMetadata::SeldonGraphMetadata(const SeldonGraphMetadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seldon.protos.SeldonGraphMetadata)
}

void SeldonGraphMetadata::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  models_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  models_.SetEntryDescriptor(
      &::seldon::protos::SeldonGraphMetadata_ModelsEntry_descriptor_);
}

SeldonGraphMetadata::~SeldonGraphMetadata() {
  // @@protoc_insertion_point(destructor:seldon.protos.SeldonGraphMetadata)
  SharedDtor();
}

void SeldonGraphMetadata::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SeldonGraphMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeldonGraphMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeldonGraphMetadata_descriptor_;
}

const SeldonGraphMetadata& SeldonGraphMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prediction_2eproto();
  return *default_instance_;
}

SeldonGraphMetadata* SeldonGraphMetadata::default_instance_ = NULL;

SeldonGraphMetadata* SeldonGraphMetadata::New(::google::protobuf::Arena* arena) const {
  SeldonGraphMetadata* n = new SeldonGraphMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeldonGraphMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:seldon.protos.SeldonGraphMetadata)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  models_.Clear();
  inputs_.Clear();
  outputs_.Clear();
}

bool SeldonGraphMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seldon.protos.SeldonGraphMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.SeldonGraphMetadata.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_models;
        break;
      }

      // map<string, .seldon.protos.SeldonModelMetadata> models = 2;
      case 2: {
        if (tag == 18) {
         parse_models:
          DO_(input->IncrementRecursionDepth());
         parse_loop_models:
          SeldonGraphMetadata_ModelsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::seldon::protos::SeldonModelMetadata,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata > > parser(&models_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seldon.protos.SeldonGraphMetadata.ModelsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_models;
        if (input->ExpectTag(26)) goto parse_loop_inputs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .seldon.protos.SeldonMessageMetadata inputs = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_inputs;
        if (input->ExpectTag(34)) goto parse_loop_outputs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .seldon.protos.SeldonMessageMetadata outputs = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_outputs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seldon.protos.SeldonGraphMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seldon.protos.SeldonGraphMetadata)
  return false;
#undef DO_
}

void SeldonGraphMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seldon.protos.SeldonGraphMetadata)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonGraphMetadata.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<string, .seldon.protos.SeldonModelMetadata> models = 2;
  if (!this->models().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.SeldonGraphMetadata.ModelsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->models().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->models().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >::const_iterator
          it = this->models().begin();
          it != this->models().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SeldonGraphMetadata_ModelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(models_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SeldonGraphMetadata_ModelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >::const_iterator
          it = this->models().begin();
          it != this->models().end(); ++it) {
        entry.reset(models_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .seldon.protos.SeldonMessageMetadata inputs = 3;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->inputs(i), output);
  }

  // repeated .seldon.protos.SeldonMessageMetadata outputs = 4;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->outputs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:seldon.protos.SeldonGraphMetadata)
}

::google::protobuf::uint8* SeldonGraphMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seldon.protos.SeldonGraphMetadata)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seldon.protos.SeldonGraphMetadata.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<string, .seldon.protos.SeldonModelMetadata> models = 2;
  if (!this->models().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "seldon.protos.SeldonGraphMetadata.ModelsEntry.key");
      }
    };

    if (deterministic &&
        this->models().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->models().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >::const_iterator
          it = this->models().begin();
          it != this->models().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SeldonGraphMetadata_ModelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(models_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SeldonGraphMetadata_ModelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >::const_iterator
          it = this->models().begin();
          it != this->models().end(); ++it) {
        entry.reset(models_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .seldon.protos.SeldonMessageMetadata inputs = 3;
  for (unsigned int i = 0, n = this->inputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->inputs(i), false, target);
  }

  // repeated .seldon.protos.SeldonMessageMetadata outputs = 4;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->outputs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seldon.protos.SeldonGraphMetadata)
  return target;
}

int SeldonGraphMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seldon.protos.SeldonGraphMetadata)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // map<string, .seldon.protos.SeldonModelMetadata> models = 2;
  total_size += 1 * this->models_size();
  {
    ::google::protobuf::scoped_ptr<SeldonGraphMetadata_ModelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >::const_iterator
        it = this->models().begin();
        it != this->models().end(); ++it) {
      entry.reset(models_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .seldon.protos.SeldonMessageMetadata inputs = 3;
  total_size += 1 * this->inputs_size();
  for (int i = 0; i < this->inputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inputs(i));
  }

  // repeated .seldon.protos.SeldonMessageMetadata outputs = 4;
  total_size += 1 * this->outputs_size();
  for (int i = 0; i < this->outputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeldonGraphMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seldon.protos.SeldonGraphMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SeldonGraphMetadata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SeldonGraphMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seldon.protos.SeldonGraphMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seldon.protos.SeldonGraphMetadata)
    MergeFrom(*source);
  }
}

void SeldonGraphMetadata::MergeFrom(const SeldonGraphMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seldon.protos.SeldonGraphMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  models_.MergeFrom(from.models_);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SeldonGraphMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seldon.protos.SeldonGraphMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeldonGraphMetadata::CopyFrom(const SeldonGraphMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seldon.protos.SeldonGraphMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeldonGraphMetadata::IsInitialized() const {

  return true;
}

void SeldonGraphMetadata::Swap(SeldonGraphMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeldonGraphMetadata::InternalSwap(SeldonGraphMetadata* other) {
  name_.Swap(&other->name_);
  models_.Swap(&other->models_);
  inputs_.UnsafeArenaSwap(&other->inputs_);
  outputs_.UnsafeArenaSwap(&other->outputs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeldonGraphMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeldonGraphMetadata_descriptor_;
  metadata.reflection = SeldonGraphMetadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeldonGraphMetadata

// optional string name = 1;
void SeldonGraphMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SeldonGraphMetadata::name() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonGraphMetadata.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeldonGraphMetadata::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonGraphMetadata.name)
}
 void SeldonGraphMetadata::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonGraphMetadata.name)
}
 void SeldonGraphMetadata::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonGraphMetadata.name)
}
 ::std::string* SeldonGraphMetadata::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonGraphMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SeldonGraphMetadata::release_name() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonGraphMetadata.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeldonGraphMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonGraphMetadata.name)
}

// map<string, .seldon.protos.SeldonModelMetadata> models = 2;
int SeldonGraphMetadata::models_size() const {
  return models_.size();
}
void SeldonGraphMetadata::clear_models() {
  models_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >&
SeldonGraphMetadata::models() const {
  // @@protoc_insertion_point(field_map:seldon.protos.SeldonGraphMetadata.models)
  return models_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >*
SeldonGraphMetadata::mutable_models() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.SeldonGraphMetadata.models)
  return models_.MutableMap();
}

// repeated .seldon.protos.SeldonMessageMetadata inputs = 3;
int SeldonGraphMetadata::inputs_size() const {
  return inputs_.size();
}
void SeldonGraphMetadata::clear_inputs() {
  inputs_.Clear();
}
const ::seldon::protos::SeldonMessageMetadata& SeldonGraphMetadata::inputs(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonGraphMetadata.inputs)
  return inputs_.Get(index);
}
::seldon::protos::SeldonMessageMetadata* SeldonGraphMetadata::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonGraphMetadata.inputs)
  return inputs_.Mutable(index);
}
::seldon::protos::SeldonMessageMetadata* SeldonGraphMetadata::add_inputs() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonGraphMetadata.inputs)
  return inputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
SeldonGraphMetadata::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonGraphMetadata.inputs)
  return &inputs_;
}
const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
SeldonGraphMetadata::inputs() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonGraphMetadata.inputs)
  return inputs_;
}

// repeated .seldon.protos.SeldonMessageMetadata outputs = 4;
int SeldonGraphMetadata::outputs_size() const {
  return outputs_.size();
}
void SeldonGraphMetadata::clear_outputs() {
  outputs_.Clear();
}
const ::seldon::protos::SeldonMessageMetadata& SeldonGraphMetadata::outputs(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonGraphMetadata.outputs)
  return outputs_.Get(index);
}
::seldon::protos::SeldonMessageMetadata* SeldonGraphMetadata::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonGraphMetadata.outputs)
  return outputs_.Mutable(index);
}
::seldon::protos::SeldonMessageMetadata* SeldonGraphMetadata::add_outputs() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonGraphMetadata.outputs)
  return outputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
SeldonGraphMetadata::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonGraphMetadata.outputs)
  return &outputs_;
}
const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
SeldonGraphMetadata::outputs() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonGraphMetadata.outputs)
  return outputs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace seldon

// @@protoc_insertion_point(global_scope)
