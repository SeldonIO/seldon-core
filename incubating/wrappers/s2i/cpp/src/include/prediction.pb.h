// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_prediction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_prediction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/empty.pb.h>
#include "tensorflow/core/framework/tensor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_prediction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_prediction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prediction_2eproto;
namespace seldon {
namespace protos {
class DefaultData;
class DefaultDataDefaultTypeInternal;
extern DefaultDataDefaultTypeInternal _DefaultData_default_instance_;
class Feedback;
class FeedbackDefaultTypeInternal;
extern FeedbackDefaultTypeInternal _Feedback_default_instance_;
class Meta;
class MetaDefaultTypeInternal;
extern MetaDefaultTypeInternal _Meta_default_instance_;
class Meta_RequestPathEntry_DoNotUse;
class Meta_RequestPathEntry_DoNotUseDefaultTypeInternal;
extern Meta_RequestPathEntry_DoNotUseDefaultTypeInternal _Meta_RequestPathEntry_DoNotUse_default_instance_;
class Meta_RoutingEntry_DoNotUse;
class Meta_RoutingEntry_DoNotUseDefaultTypeInternal;
extern Meta_RoutingEntry_DoNotUseDefaultTypeInternal _Meta_RoutingEntry_DoNotUse_default_instance_;
class Meta_TagsEntry_DoNotUse;
class Meta_TagsEntry_DoNotUseDefaultTypeInternal;
extern Meta_TagsEntry_DoNotUseDefaultTypeInternal _Meta_TagsEntry_DoNotUse_default_instance_;
class Metric;
class MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class Metric_TagsEntry_DoNotUse;
class Metric_TagsEntry_DoNotUseDefaultTypeInternal;
extern Metric_TagsEntry_DoNotUseDefaultTypeInternal _Metric_TagsEntry_DoNotUse_default_instance_;
class RequestResponse;
class RequestResponseDefaultTypeInternal;
extern RequestResponseDefaultTypeInternal _RequestResponse_default_instance_;
class SeldonGraphMetadata;
class SeldonGraphMetadataDefaultTypeInternal;
extern SeldonGraphMetadataDefaultTypeInternal _SeldonGraphMetadata_default_instance_;
class SeldonGraphMetadata_ModelsEntry_DoNotUse;
class SeldonGraphMetadata_ModelsEntry_DoNotUseDefaultTypeInternal;
extern SeldonGraphMetadata_ModelsEntry_DoNotUseDefaultTypeInternal _SeldonGraphMetadata_ModelsEntry_DoNotUse_default_instance_;
class SeldonMessage;
class SeldonMessageDefaultTypeInternal;
extern SeldonMessageDefaultTypeInternal _SeldonMessage_default_instance_;
class SeldonMessageList;
class SeldonMessageListDefaultTypeInternal;
extern SeldonMessageListDefaultTypeInternal _SeldonMessageList_default_instance_;
class SeldonMessageMetadata;
class SeldonMessageMetadataDefaultTypeInternal;
extern SeldonMessageMetadataDefaultTypeInternal _SeldonMessageMetadata_default_instance_;
class SeldonModelMetadata;
class SeldonModelMetadataDefaultTypeInternal;
extern SeldonModelMetadataDefaultTypeInternal _SeldonModelMetadata_default_instance_;
class SeldonModelMetadataRequest;
class SeldonModelMetadataRequestDefaultTypeInternal;
extern SeldonModelMetadataRequestDefaultTypeInternal _SeldonModelMetadataRequest_default_instance_;
class SeldonModelMetadata_CustomEntry_DoNotUse;
class SeldonModelMetadata_CustomEntry_DoNotUseDefaultTypeInternal;
extern SeldonModelMetadata_CustomEntry_DoNotUseDefaultTypeInternal _SeldonModelMetadata_CustomEntry_DoNotUse_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class Tensor;
class TensorDefaultTypeInternal;
extern TensorDefaultTypeInternal _Tensor_default_instance_;
}  // namespace protos
}  // namespace seldon
PROTOBUF_NAMESPACE_OPEN
template<> ::seldon::protos::DefaultData* Arena::CreateMaybeMessage<::seldon::protos::DefaultData>(Arena*);
template<> ::seldon::protos::Feedback* Arena::CreateMaybeMessage<::seldon::protos::Feedback>(Arena*);
template<> ::seldon::protos::Meta* Arena::CreateMaybeMessage<::seldon::protos::Meta>(Arena*);
template<> ::seldon::protos::Meta_RequestPathEntry_DoNotUse* Arena::CreateMaybeMessage<::seldon::protos::Meta_RequestPathEntry_DoNotUse>(Arena*);
template<> ::seldon::protos::Meta_RoutingEntry_DoNotUse* Arena::CreateMaybeMessage<::seldon::protos::Meta_RoutingEntry_DoNotUse>(Arena*);
template<> ::seldon::protos::Meta_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::seldon::protos::Meta_TagsEntry_DoNotUse>(Arena*);
template<> ::seldon::protos::Metric* Arena::CreateMaybeMessage<::seldon::protos::Metric>(Arena*);
template<> ::seldon::protos::Metric_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::seldon::protos::Metric_TagsEntry_DoNotUse>(Arena*);
template<> ::seldon::protos::RequestResponse* Arena::CreateMaybeMessage<::seldon::protos::RequestResponse>(Arena*);
template<> ::seldon::protos::SeldonGraphMetadata* Arena::CreateMaybeMessage<::seldon::protos::SeldonGraphMetadata>(Arena*);
template<> ::seldon::protos::SeldonGraphMetadata_ModelsEntry_DoNotUse* Arena::CreateMaybeMessage<::seldon::protos::SeldonGraphMetadata_ModelsEntry_DoNotUse>(Arena*);
template<> ::seldon::protos::SeldonMessage* Arena::CreateMaybeMessage<::seldon::protos::SeldonMessage>(Arena*);
template<> ::seldon::protos::SeldonMessageList* Arena::CreateMaybeMessage<::seldon::protos::SeldonMessageList>(Arena*);
template<> ::seldon::protos::SeldonMessageMetadata* Arena::CreateMaybeMessage<::seldon::protos::SeldonMessageMetadata>(Arena*);
template<> ::seldon::protos::SeldonModelMetadata* Arena::CreateMaybeMessage<::seldon::protos::SeldonModelMetadata>(Arena*);
template<> ::seldon::protos::SeldonModelMetadataRequest* Arena::CreateMaybeMessage<::seldon::protos::SeldonModelMetadataRequest>(Arena*);
template<> ::seldon::protos::SeldonModelMetadata_CustomEntry_DoNotUse* Arena::CreateMaybeMessage<::seldon::protos::SeldonModelMetadata_CustomEntry_DoNotUse>(Arena*);
template<> ::seldon::protos::Status* Arena::CreateMaybeMessage<::seldon::protos::Status>(Arena*);
template<> ::seldon::protos::Tensor* Arena::CreateMaybeMessage<::seldon::protos::Tensor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace seldon {
namespace protos {

enum Metric_MetricType : int {
  Metric_MetricType_COUNTER = 0,
  Metric_MetricType_GAUGE = 1,
  Metric_MetricType_TIMER = 2,
  Metric_MetricType_Metric_MetricType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Metric_MetricType_Metric_MetricType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Metric_MetricType_IsValid(int value);
constexpr Metric_MetricType Metric_MetricType_MetricType_MIN = Metric_MetricType_COUNTER;
constexpr Metric_MetricType Metric_MetricType_MetricType_MAX = Metric_MetricType_TIMER;
constexpr int Metric_MetricType_MetricType_ARRAYSIZE = Metric_MetricType_MetricType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Metric_MetricType_descriptor();
template<typename T>
inline const std::string& Metric_MetricType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Metric_MetricType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Metric_MetricType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Metric_MetricType_descriptor(), enum_t_value);
}
inline bool Metric_MetricType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Metric_MetricType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Metric_MetricType>(
    Metric_MetricType_descriptor(), name, value);
}
enum Status_StatusFlag : int {
  Status_StatusFlag_SUCCESS = 0,
  Status_StatusFlag_FAILURE = 1,
  Status_StatusFlag_Status_StatusFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_StatusFlag_Status_StatusFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_StatusFlag_IsValid(int value);
constexpr Status_StatusFlag Status_StatusFlag_StatusFlag_MIN = Status_StatusFlag_SUCCESS;
constexpr Status_StatusFlag Status_StatusFlag_StatusFlag_MAX = Status_StatusFlag_FAILURE;
constexpr int Status_StatusFlag_StatusFlag_ARRAYSIZE = Status_StatusFlag_StatusFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_StatusFlag_descriptor();
template<typename T>
inline const std::string& Status_StatusFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_StatusFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_StatusFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_StatusFlag_descriptor(), enum_t_value);
}
inline bool Status_StatusFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status_StatusFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_StatusFlag>(
    Status_StatusFlag_descriptor(), name, value);
}
// ===================================================================

class SeldonMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seldon.protos.SeldonMessage) */ {
 public:
  inline SeldonMessage() : SeldonMessage(nullptr) {}
  virtual ~SeldonMessage();

  SeldonMessage(const SeldonMessage& from);
  SeldonMessage(SeldonMessage&& from) noexcept
    : SeldonMessage() {
    *this = ::std::move(from);
  }

  inline SeldonMessage& operator=(const SeldonMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeldonMessage& operator=(SeldonMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeldonMessage& default_instance();

  enum DataOneofCase {
    kData = 3,
    kBinData = 4,
    kStrData = 5,
    kJsonData = 6,
    kCustomData = 7,
    DATA_ONEOF_NOT_SET = 0,
  };

  static inline const SeldonMessage* internal_default_instance() {
    return reinterpret_cast<const SeldonMessage*>(
               &_SeldonMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SeldonMessage& a, SeldonMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SeldonMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeldonMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeldonMessage* New() const final {
    return CreateMaybeMessage<SeldonMessage>(nullptr);
  }

  SeldonMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeldonMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeldonMessage& from);
  void MergeFrom(const SeldonMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeldonMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seldon.protos.SeldonMessage";
  }
  protected:
  explicit SeldonMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMetaFieldNumber = 2,
    kDataFieldNumber = 3,
    kBinDataFieldNumber = 4,
    kStrDataFieldNumber = 5,
    kJsonDataFieldNumber = 6,
    kCustomDataFieldNumber = 7,
  };
  // .seldon.protos.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::seldon::protos::Status& status() const;
  ::seldon::protos::Status* release_status();
  ::seldon::protos::Status* mutable_status();
  void set_allocated_status(::seldon::protos::Status* status);
  private:
  const ::seldon::protos::Status& _internal_status() const;
  ::seldon::protos::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::seldon::protos::Status* status);
  ::seldon::protos::Status* unsafe_arena_release_status();

  // .seldon.protos.Meta meta = 2;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::seldon::protos::Meta& meta() const;
  ::seldon::protos::Meta* release_meta();
  ::seldon::protos::Meta* mutable_meta();
  void set_allocated_meta(::seldon::protos::Meta* meta);
  private:
  const ::seldon::protos::Meta& _internal_meta() const;
  ::seldon::protos::Meta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::seldon::protos::Meta* meta);
  ::seldon::protos::Meta* unsafe_arena_release_meta();

  // .seldon.protos.DefaultData data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::seldon::protos::DefaultData& data() const;
  ::seldon::protos::DefaultData* release_data();
  ::seldon::protos::DefaultData* mutable_data();
  void set_allocated_data(::seldon::protos::DefaultData* data);
  private:
  const ::seldon::protos::DefaultData& _internal_data() const;
  ::seldon::protos::DefaultData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::seldon::protos::DefaultData* data);
  ::seldon::protos::DefaultData* unsafe_arena_release_data();

  // bytes binData = 4;
  private:
  bool _internal_has_bindata() const;
  public:
  void clear_bindata();
  const std::string& bindata() const;
  void set_bindata(const std::string& value);
  void set_bindata(std::string&& value);
  void set_bindata(const char* value);
  void set_bindata(const void* value, size_t size);
  std::string* mutable_bindata();
  std::string* release_bindata();
  void set_allocated_bindata(std::string* bindata);
  private:
  const std::string& _internal_bindata() const;
  void _internal_set_bindata(const std::string& value);
  std::string* _internal_mutable_bindata();
  public:

  // string strData = 5;
  private:
  bool _internal_has_strdata() const;
  public:
  void clear_strdata();
  const std::string& strdata() const;
  void set_strdata(const std::string& value);
  void set_strdata(std::string&& value);
  void set_strdata(const char* value);
  void set_strdata(const char* value, size_t size);
  std::string* mutable_strdata();
  std::string* release_strdata();
  void set_allocated_strdata(std::string* strdata);
  private:
  const std::string& _internal_strdata() const;
  void _internal_set_strdata(const std::string& value);
  std::string* _internal_mutable_strdata();
  public:

  // .google.protobuf.Value jsonData = 6;
  bool has_jsondata() const;
  private:
  bool _internal_has_jsondata() const;
  public:
  void clear_jsondata();
  const PROTOBUF_NAMESPACE_ID::Value& jsondata() const;
  PROTOBUF_NAMESPACE_ID::Value* release_jsondata();
  PROTOBUF_NAMESPACE_ID::Value* mutable_jsondata();
  void set_allocated_jsondata(PROTOBUF_NAMESPACE_ID::Value* jsondata);
  private:
  const PROTOBUF_NAMESPACE_ID::Value& _internal_jsondata() const;
  PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_jsondata();
  public:
  void unsafe_arena_set_allocated_jsondata(
      PROTOBUF_NAMESPACE_ID::Value* jsondata);
  PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_jsondata();

  // .google.protobuf.Any customData = 7;
  bool has_customdata() const;
  private:
  bool _internal_has_customdata() const;
  public:
  void clear_customdata();
  const PROTOBUF_NAMESPACE_ID::Any& customdata() const;
  PROTOBUF_NAMESPACE_ID::Any* release_customdata();
  PROTOBUF_NAMESPACE_ID::Any* mutable_customdata();
  void set_allocated_customdata(PROTOBUF_NAMESPACE_ID::Any* customdata);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_customdata() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_customdata();
  public:
  void unsafe_arena_set_allocated_customdata(
      PROTOBUF_NAMESPACE_ID::Any* customdata);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_customdata();

  void clear_data_oneof();
  DataOneofCase data_oneof_case() const;
  // @@protoc_insertion_point(class_scope:seldon.protos.SeldonMessage)
 private:
  class _Internal;
  void set_has_data();
  void set_has_bindata();
  void set_has_strdata();
  void set_has_jsondata();
  void set_has_customdata();

  inline bool has_data_oneof() const;
  inline void clear_has_data_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::seldon::protos::Status* status_;
  ::seldon::protos::Meta* meta_;
  union DataOneofUnion {
    DataOneofUnion() {}
    ::seldon::protos::DefaultData* data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bindata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strdata_;
    PROTOBUF_NAMESPACE_ID::Value* jsondata_;
    PROTOBUF_NAMESPACE_ID::Any* customdata_;
  } data_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class DefaultData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seldon.protos.DefaultData) */ {
 public:
  inline DefaultData() : DefaultData(nullptr) {}
  virtual ~DefaultData();

  DefaultData(const DefaultData& from);
  DefaultData(DefaultData&& from) noexcept
    : DefaultData() {
    *this = ::std::move(from);
  }

  inline DefaultData& operator=(const DefaultData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultData& operator=(DefaultData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DefaultData& default_instance();

  enum DataOneofCase {
    kTensor = 2,
    kNdarray = 3,
    kTftensor = 4,
    DATA_ONEOF_NOT_SET = 0,
  };

  static inline const DefaultData* internal_default_instance() {
    return reinterpret_cast<const DefaultData*>(
               &_DefaultData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DefaultData& a, DefaultData& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefaultData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DefaultData* New() const final {
    return CreateMaybeMessage<DefaultData>(nullptr);
  }

  DefaultData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DefaultData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DefaultData& from);
  void MergeFrom(const DefaultData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seldon.protos.DefaultData";
  }
  protected:
  explicit DefaultData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
    kTensorFieldNumber = 2,
    kNdarrayFieldNumber = 3,
    kTftensorFieldNumber = 4,
  };
  // repeated string names = 1;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // .seldon.protos.Tensor tensor = 2;
  bool has_tensor() const;
  private:
  bool _internal_has_tensor() const;
  public:
  void clear_tensor();
  const ::seldon::protos::Tensor& tensor() const;
  ::seldon::protos::Tensor* release_tensor();
  ::seldon::protos::Tensor* mutable_tensor();
  void set_allocated_tensor(::seldon::protos::Tensor* tensor);
  private:
  const ::seldon::protos::Tensor& _internal_tensor() const;
  ::seldon::protos::Tensor* _internal_mutable_tensor();
  public:
  void unsafe_arena_set_allocated_tensor(
      ::seldon::protos::Tensor* tensor);
  ::seldon::protos::Tensor* unsafe_arena_release_tensor();

  // .google.protobuf.ListValue ndarray = 3;
  bool has_ndarray() const;
  private:
  bool _internal_has_ndarray() const;
  public:
  void clear_ndarray();
  const PROTOBUF_NAMESPACE_ID::ListValue& ndarray() const;
  PROTOBUF_NAMESPACE_ID::ListValue* release_ndarray();
  PROTOBUF_NAMESPACE_ID::ListValue* mutable_ndarray();
  void set_allocated_ndarray(PROTOBUF_NAMESPACE_ID::ListValue* ndarray);
  private:
  const PROTOBUF_NAMESPACE_ID::ListValue& _internal_ndarray() const;
  PROTOBUF_NAMESPACE_ID::ListValue* _internal_mutable_ndarray();
  public:
  void unsafe_arena_set_allocated_ndarray(
      PROTOBUF_NAMESPACE_ID::ListValue* ndarray);
  PROTOBUF_NAMESPACE_ID::ListValue* unsafe_arena_release_ndarray();

  // .tensorflow.TensorProto tftensor = 4;
  bool has_tftensor() const;
  private:
  bool _internal_has_tftensor() const;
  public:
  void clear_tftensor();
  const ::tensorflow::TensorProto& tftensor() const;
  ::tensorflow::TensorProto* release_tftensor();
  ::tensorflow::TensorProto* mutable_tftensor();
  void set_allocated_tftensor(::tensorflow::TensorProto* tftensor);
  private:
  const ::tensorflow::TensorProto& _internal_tftensor() const;
  ::tensorflow::TensorProto* _internal_mutable_tftensor();
  public:
  void unsafe_arena_set_allocated_tftensor(
      ::tensorflow::TensorProto* tftensor);
  ::tensorflow::TensorProto* unsafe_arena_release_tftensor();

  void clear_data_oneof();
  DataOneofCase data_oneof_case() const;
  // @@protoc_insertion_point(class_scope:seldon.protos.DefaultData)
 private:
  class _Internal;
  void set_has_tensor();
  void set_has_ndarray();
  void set_has_tftensor();

  inline bool has_data_oneof() const;
  inline void clear_has_data_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  union DataOneofUnion {
    DataOneofUnion() {}
    ::seldon::protos::Tensor* tensor_;
    PROTOBUF_NAMESPACE_ID::ListValue* ndarray_;
    ::tensorflow::TensorProto* tftensor_;
  } data_oneof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class Tensor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seldon.protos.Tensor) */ {
 public:
  inline Tensor() : Tensor(nullptr) {}
  virtual ~Tensor();

  Tensor(const Tensor& from);
  Tensor(Tensor&& from) noexcept
    : Tensor() {
    *this = ::std::move(from);
  }

  inline Tensor& operator=(const Tensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tensor& operator=(Tensor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tensor& default_instance();

  static inline const Tensor* internal_default_instance() {
    return reinterpret_cast<const Tensor*>(
               &_Tensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Tensor& a, Tensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Tensor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tensor* New() const final {
    return CreateMaybeMessage<Tensor>(nullptr);
  }

  Tensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tensor& from);
  void MergeFrom(const Tensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seldon.protos.Tensor";
  }
  protected:
  explicit Tensor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // repeated int32 shape = 1 [packed = true];
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_shape();

  // repeated double values = 2 [packed = true];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  double _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_values() const;
  void _internal_add_values(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_values();
  public:
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:seldon.protos.Tensor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class Meta_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Meta_TagsEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Meta_TagsEntry_DoNotUse, 
    std::string, PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Meta_TagsEntry_DoNotUse();
  explicit Meta_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Meta_TagsEntry_DoNotUse& other);
  static const Meta_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Meta_TagsEntry_DoNotUse*>(&_Meta_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "seldon.protos.Meta.TagsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class Meta_RoutingEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Meta_RoutingEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Meta_RoutingEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  Meta_RoutingEntry_DoNotUse();
  explicit Meta_RoutingEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Meta_RoutingEntry_DoNotUse& other);
  static const Meta_RoutingEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Meta_RoutingEntry_DoNotUse*>(&_Meta_RoutingEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "seldon.protos.Meta.RoutingEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class Meta_RequestPathEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Meta_RequestPathEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Meta_RequestPathEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Meta_RequestPathEntry_DoNotUse();
  explicit Meta_RequestPathEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Meta_RequestPathEntry_DoNotUse& other);
  static const Meta_RequestPathEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Meta_RequestPathEntry_DoNotUse*>(&_Meta_RequestPathEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "seldon.protos.Meta.RequestPathEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "seldon.protos.Meta.RequestPathEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class Meta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seldon.protos.Meta) */ {
 public:
  inline Meta() : Meta(nullptr) {}
  virtual ~Meta();

  Meta(const Meta& from);
  Meta(Meta&& from) noexcept
    : Meta() {
    *this = ::std::move(from);
  }

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Meta& operator=(Meta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Meta& default_instance();

  static inline const Meta* internal_default_instance() {
    return reinterpret_cast<const Meta*>(
               &_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Meta& a, Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(Meta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Meta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Meta* New() const final {
    return CreateMaybeMessage<Meta>(nullptr);
  }

  Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Meta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Meta& from);
  void MergeFrom(const Meta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Meta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seldon.protos.Meta";
  }
  protected:
  explicit Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kRoutingFieldNumber = 3,
    kRequestPathFieldNumber = 4,
    kMetricsFieldNumber = 5,
    kPuidFieldNumber = 1,
  };
  // map<string, .google.protobuf.Value> tags = 2;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
      mutable_tags();

  // map<string, int32> routing = 3;
  int routing_size() const;
  private:
  int _internal_routing_size() const;
  public:
  void clear_routing();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_routing() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_routing();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      routing() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_routing();

  // map<string, string> requestPath = 4;
  int requestpath_size() const;
  private:
  int _internal_requestpath_size() const;
  public:
  void clear_requestpath();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_requestpath() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_requestpath();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      requestpath() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_requestpath();

  // repeated .seldon.protos.Metric metrics = 5;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::seldon::protos::Metric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::Metric >*
      mutable_metrics();
  private:
  const ::seldon::protos::Metric& _internal_metrics(int index) const;
  ::seldon::protos::Metric* _internal_add_metrics();
  public:
  const ::seldon::protos::Metric& metrics(int index) const;
  ::seldon::protos::Metric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::Metric >&
      metrics() const;

  // string puid = 1;
  void clear_puid();
  const std::string& puid() const;
  void set_puid(const std::string& value);
  void set_puid(std::string&& value);
  void set_puid(const char* value);
  void set_puid(const char* value, size_t size);
  std::string* mutable_puid();
  std::string* release_puid();
  void set_allocated_puid(std::string* puid);
  private:
  const std::string& _internal_puid() const;
  void _internal_set_puid(const std::string& value);
  std::string* _internal_mutable_puid();
  public:

  // @@protoc_insertion_point(class_scope:seldon.protos.Meta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Meta_TagsEntry_DoNotUse,
      std::string, PROTOBUF_NAMESPACE_ID::Value,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Meta_RoutingEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> routing_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Meta_RequestPathEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> requestpath_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::Metric > metrics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr puid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class Metric_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Metric_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Metric_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Metric_TagsEntry_DoNotUse();
  explicit Metric_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Metric_TagsEntry_DoNotUse& other);
  static const Metric_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Metric_TagsEntry_DoNotUse*>(&_Metric_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "seldon.protos.Metric.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "seldon.protos.Metric.TagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class Metric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seldon.protos.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  virtual ~Metric();

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metric& default_instance();

  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metric* New() const final {
    return CreateMaybeMessage<Metric>(nullptr);
  }

  Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seldon.protos.Metric";
  }
  protected:
  explicit Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef Metric_MetricType MetricType;
  static constexpr MetricType COUNTER =
    Metric_MetricType_COUNTER;
  static constexpr MetricType GAUGE =
    Metric_MetricType_GAUGE;
  static constexpr MetricType TIMER =
    Metric_MetricType_TIMER;
  static inline bool MetricType_IsValid(int value) {
    return Metric_MetricType_IsValid(value);
  }
  static constexpr MetricType MetricType_MIN =
    Metric_MetricType_MetricType_MIN;
  static constexpr MetricType MetricType_MAX =
    Metric_MetricType_MetricType_MAX;
  static constexpr int MetricType_ARRAYSIZE =
    Metric_MetricType_MetricType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MetricType_descriptor() {
    return Metric_MetricType_descriptor();
  }
  template<typename T>
  static inline const std::string& MetricType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MetricType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MetricType_Name.");
    return Metric_MetricType_Name(enum_t_value);
  }
  static inline bool MetricType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MetricType* value) {
    return Metric_MetricType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 4,
    kKeyFieldNumber = 1,
    kTypeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // map<string, string> tags = 4;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .seldon.protos.Metric.MetricType type = 2;
  void clear_type();
  ::seldon::protos::Metric_MetricType type() const;
  void set_type(::seldon::protos::Metric_MetricType value);
  private:
  ::seldon::protos::Metric_MetricType _internal_type() const;
  void _internal_set_type(::seldon::protos::Metric_MetricType value);
  public:

  // float value = 3;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:seldon.protos.Metric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Metric_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int type_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class SeldonMessageList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seldon.protos.SeldonMessageList) */ {
 public:
  inline SeldonMessageList() : SeldonMessageList(nullptr) {}
  virtual ~SeldonMessageList();

  SeldonMessageList(const SeldonMessageList& from);
  SeldonMessageList(SeldonMessageList&& from) noexcept
    : SeldonMessageList() {
    *this = ::std::move(from);
  }

  inline SeldonMessageList& operator=(const SeldonMessageList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeldonMessageList& operator=(SeldonMessageList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeldonMessageList& default_instance();

  static inline const SeldonMessageList* internal_default_instance() {
    return reinterpret_cast<const SeldonMessageList*>(
               &_SeldonMessageList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SeldonMessageList& a, SeldonMessageList& b) {
    a.Swap(&b);
  }
  inline void Swap(SeldonMessageList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeldonMessageList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeldonMessageList* New() const final {
    return CreateMaybeMessage<SeldonMessageList>(nullptr);
  }

  SeldonMessageList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeldonMessageList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeldonMessageList& from);
  void MergeFrom(const SeldonMessageList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeldonMessageList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seldon.protos.SeldonMessageList";
  }
  protected:
  explicit SeldonMessageList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeldonMessagesFieldNumber = 1,
  };
  // repeated .seldon.protos.SeldonMessage seldonMessages = 1;
  int seldonmessages_size() const;
  private:
  int _internal_seldonmessages_size() const;
  public:
  void clear_seldonmessages();
  ::seldon::protos::SeldonMessage* mutable_seldonmessages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessage >*
      mutable_seldonmessages();
  private:
  const ::seldon::protos::SeldonMessage& _internal_seldonmessages(int index) const;
  ::seldon::protos::SeldonMessage* _internal_add_seldonmessages();
  public:
  const ::seldon::protos::SeldonMessage& seldonmessages(int index) const;
  ::seldon::protos::SeldonMessage* add_seldonmessages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessage >&
      seldonmessages() const;

  // @@protoc_insertion_point(class_scope:seldon.protos.SeldonMessageList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessage > seldonmessages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seldon.protos.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seldon.protos.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Status_StatusFlag StatusFlag;
  static constexpr StatusFlag SUCCESS =
    Status_StatusFlag_SUCCESS;
  static constexpr StatusFlag FAILURE =
    Status_StatusFlag_FAILURE;
  static inline bool StatusFlag_IsValid(int value) {
    return Status_StatusFlag_IsValid(value);
  }
  static constexpr StatusFlag StatusFlag_MIN =
    Status_StatusFlag_StatusFlag_MIN;
  static constexpr StatusFlag StatusFlag_MAX =
    Status_StatusFlag_StatusFlag_MAX;
  static constexpr int StatusFlag_ARRAYSIZE =
    Status_StatusFlag_StatusFlag_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StatusFlag_descriptor() {
    return Status_StatusFlag_descriptor();
  }
  template<typename T>
  static inline const std::string& StatusFlag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatusFlag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatusFlag_Name.");
    return Status_StatusFlag_Name(enum_t_value);
  }
  static inline bool StatusFlag_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StatusFlag* value) {
    return Status_StatusFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kReasonFieldNumber = 3,
    kCodeFieldNumber = 1,
    kStatusFieldNumber = 4,
  };
  // string info = 2;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // string reason = 3;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .seldon.protos.Status.StatusFlag status = 4;
  void clear_status();
  ::seldon::protos::Status_StatusFlag status() const;
  void set_status(::seldon::protos::Status_StatusFlag value);
  private:
  ::seldon::protos::Status_StatusFlag _internal_status() const;
  void _internal_set_status(::seldon::protos::Status_StatusFlag value);
  public:

  // @@protoc_insertion_point(class_scope:seldon.protos.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class Feedback PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seldon.protos.Feedback) */ {
 public:
  inline Feedback() : Feedback(nullptr) {}
  virtual ~Feedback();

  Feedback(const Feedback& from);
  Feedback(Feedback&& from) noexcept
    : Feedback() {
    *this = ::std::move(from);
  }

  inline Feedback& operator=(const Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feedback& operator=(Feedback&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Feedback& default_instance();

  static inline const Feedback* internal_default_instance() {
    return reinterpret_cast<const Feedback*>(
               &_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Feedback& a, Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(Feedback* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Feedback* New() const final {
    return CreateMaybeMessage<Feedback>(nullptr);
  }

  Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Feedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Feedback& from);
  void MergeFrom(const Feedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seldon.protos.Feedback";
  }
  protected:
  explicit Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
    kTruthFieldNumber = 4,
    kRewardFieldNumber = 3,
  };
  // .seldon.protos.SeldonMessage request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::seldon::protos::SeldonMessage& request() const;
  ::seldon::protos::SeldonMessage* release_request();
  ::seldon::protos::SeldonMessage* mutable_request();
  void set_allocated_request(::seldon::protos::SeldonMessage* request);
  private:
  const ::seldon::protos::SeldonMessage& _internal_request() const;
  ::seldon::protos::SeldonMessage* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::seldon::protos::SeldonMessage* request);
  ::seldon::protos::SeldonMessage* unsafe_arena_release_request();

  // .seldon.protos.SeldonMessage response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::seldon::protos::SeldonMessage& response() const;
  ::seldon::protos::SeldonMessage* release_response();
  ::seldon::protos::SeldonMessage* mutable_response();
  void set_allocated_response(::seldon::protos::SeldonMessage* response);
  private:
  const ::seldon::protos::SeldonMessage& _internal_response() const;
  ::seldon::protos::SeldonMessage* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::seldon::protos::SeldonMessage* response);
  ::seldon::protos::SeldonMessage* unsafe_arena_release_response();

  // .seldon.protos.SeldonMessage truth = 4;
  bool has_truth() const;
  private:
  bool _internal_has_truth() const;
  public:
  void clear_truth();
  const ::seldon::protos::SeldonMessage& truth() const;
  ::seldon::protos::SeldonMessage* release_truth();
  ::seldon::protos::SeldonMessage* mutable_truth();
  void set_allocated_truth(::seldon::protos::SeldonMessage* truth);
  private:
  const ::seldon::protos::SeldonMessage& _internal_truth() const;
  ::seldon::protos::SeldonMessage* _internal_mutable_truth();
  public:
  void unsafe_arena_set_allocated_truth(
      ::seldon::protos::SeldonMessage* truth);
  ::seldon::protos::SeldonMessage* unsafe_arena_release_truth();

  // float reward = 3;
  void clear_reward();
  float reward() const;
  void set_reward(float value);
  private:
  float _internal_reward() const;
  void _internal_set_reward(float value);
  public:

  // @@protoc_insertion_point(class_scope:seldon.protos.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::seldon::protos::SeldonMessage* request_;
  ::seldon::protos::SeldonMessage* response_;
  ::seldon::protos::SeldonMessage* truth_;
  float reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class RequestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seldon.protos.RequestResponse) */ {
 public:
  inline RequestResponse() : RequestResponse(nullptr) {}
  virtual ~RequestResponse();

  RequestResponse(const RequestResponse& from);
  RequestResponse(RequestResponse&& from) noexcept
    : RequestResponse() {
    *this = ::std::move(from);
  }

  inline RequestResponse& operator=(const RequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestResponse& operator=(RequestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestResponse& default_instance();

  static inline const RequestResponse* internal_default_instance() {
    return reinterpret_cast<const RequestResponse*>(
               &_RequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RequestResponse& a, RequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestResponse* New() const final {
    return CreateMaybeMessage<RequestResponse>(nullptr);
  }

  RequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestResponse& from);
  void MergeFrom(const RequestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seldon.protos.RequestResponse";
  }
  protected:
  explicit RequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .seldon.protos.SeldonMessage request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::seldon::protos::SeldonMessage& request() const;
  ::seldon::protos::SeldonMessage* release_request();
  ::seldon::protos::SeldonMessage* mutable_request();
  void set_allocated_request(::seldon::protos::SeldonMessage* request);
  private:
  const ::seldon::protos::SeldonMessage& _internal_request() const;
  ::seldon::protos::SeldonMessage* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::seldon::protos::SeldonMessage* request);
  ::seldon::protos::SeldonMessage* unsafe_arena_release_request();

  // .seldon.protos.SeldonMessage response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::seldon::protos::SeldonMessage& response() const;
  ::seldon::protos::SeldonMessage* release_response();
  ::seldon::protos::SeldonMessage* mutable_response();
  void set_allocated_response(::seldon::protos::SeldonMessage* response);
  private:
  const ::seldon::protos::SeldonMessage& _internal_response() const;
  ::seldon::protos::SeldonMessage* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::seldon::protos::SeldonMessage* response);
  ::seldon::protos::SeldonMessage* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:seldon.protos.RequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::seldon::protos::SeldonMessage* request_;
  ::seldon::protos::SeldonMessage* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class SeldonModelMetadataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seldon.protos.SeldonModelMetadataRequest) */ {
 public:
  inline SeldonModelMetadataRequest() : SeldonModelMetadataRequest(nullptr) {}
  virtual ~SeldonModelMetadataRequest();

  SeldonModelMetadataRequest(const SeldonModelMetadataRequest& from);
  SeldonModelMetadataRequest(SeldonModelMetadataRequest&& from) noexcept
    : SeldonModelMetadataRequest() {
    *this = ::std::move(from);
  }

  inline SeldonModelMetadataRequest& operator=(const SeldonModelMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeldonModelMetadataRequest& operator=(SeldonModelMetadataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeldonModelMetadataRequest& default_instance();

  static inline const SeldonModelMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const SeldonModelMetadataRequest*>(
               &_SeldonModelMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SeldonModelMetadataRequest& a, SeldonModelMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SeldonModelMetadataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeldonModelMetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeldonModelMetadataRequest* New() const final {
    return CreateMaybeMessage<SeldonModelMetadataRequest>(nullptr);
  }

  SeldonModelMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeldonModelMetadataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeldonModelMetadataRequest& from);
  void MergeFrom(const SeldonModelMetadataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeldonModelMetadataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seldon.protos.SeldonModelMetadataRequest";
  }
  protected:
  explicit SeldonModelMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:seldon.protos.SeldonModelMetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class SeldonMessageMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seldon.protos.SeldonMessageMetadata) */ {
 public:
  inline SeldonMessageMetadata() : SeldonMessageMetadata(nullptr) {}
  virtual ~SeldonMessageMetadata();

  SeldonMessageMetadata(const SeldonMessageMetadata& from);
  SeldonMessageMetadata(SeldonMessageMetadata&& from) noexcept
    : SeldonMessageMetadata() {
    *this = ::std::move(from);
  }

  inline SeldonMessageMetadata& operator=(const SeldonMessageMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeldonMessageMetadata& operator=(SeldonMessageMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeldonMessageMetadata& default_instance();

  static inline const SeldonMessageMetadata* internal_default_instance() {
    return reinterpret_cast<const SeldonMessageMetadata*>(
               &_SeldonMessageMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SeldonMessageMetadata& a, SeldonMessageMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(SeldonMessageMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeldonMessageMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeldonMessageMetadata* New() const final {
    return CreateMaybeMessage<SeldonMessageMetadata>(nullptr);
  }

  SeldonMessageMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeldonMessageMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeldonMessageMetadata& from);
  void MergeFrom(const SeldonMessageMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeldonMessageMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seldon.protos.SeldonMessageMetadata";
  }
  protected:
  explicit SeldonMessageMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 5,
    kMessagetypeFieldNumber = 1,
    kNameFieldNumber = 3,
    kDatatypeFieldNumber = 4,
    kSchemaFieldNumber = 2,
  };
  // repeated int64 shape = 5;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_shape();

  // string messagetype = 1;
  void clear_messagetype();
  const std::string& messagetype() const;
  void set_messagetype(const std::string& value);
  void set_messagetype(std::string&& value);
  void set_messagetype(const char* value);
  void set_messagetype(const char* value, size_t size);
  std::string* mutable_messagetype();
  std::string* release_messagetype();
  void set_allocated_messagetype(std::string* messagetype);
  private:
  const std::string& _internal_messagetype() const;
  void _internal_set_messagetype(const std::string& value);
  std::string* _internal_mutable_messagetype();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string datatype = 4;
  void clear_datatype();
  const std::string& datatype() const;
  void set_datatype(const std::string& value);
  void set_datatype(std::string&& value);
  void set_datatype(const char* value);
  void set_datatype(const char* value, size_t size);
  std::string* mutable_datatype();
  std::string* release_datatype();
  void set_allocated_datatype(std::string* datatype);
  private:
  const std::string& _internal_datatype() const;
  void _internal_set_datatype(const std::string& value);
  std::string* _internal_mutable_datatype();
  public:

  // .google.protobuf.Value schema = 2;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const PROTOBUF_NAMESPACE_ID::Value& schema() const;
  PROTOBUF_NAMESPACE_ID::Value* release_schema();
  PROTOBUF_NAMESPACE_ID::Value* mutable_schema();
  void set_allocated_schema(PROTOBUF_NAMESPACE_ID::Value* schema);
  private:
  const PROTOBUF_NAMESPACE_ID::Value& _internal_schema() const;
  PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_schema();
  public:
  void unsafe_arena_set_allocated_schema(
      PROTOBUF_NAMESPACE_ID::Value* schema);
  PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_schema();

  // @@protoc_insertion_point(class_scope:seldon.protos.SeldonMessageMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messagetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datatype_;
  PROTOBUF_NAMESPACE_ID::Value* schema_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class SeldonModelMetadata_CustomEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SeldonModelMetadata_CustomEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SeldonModelMetadata_CustomEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SeldonModelMetadata_CustomEntry_DoNotUse();
  explicit SeldonModelMetadata_CustomEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SeldonModelMetadata_CustomEntry_DoNotUse& other);
  static const SeldonModelMetadata_CustomEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SeldonModelMetadata_CustomEntry_DoNotUse*>(&_SeldonModelMetadata_CustomEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "seldon.protos.SeldonModelMetadata.CustomEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "seldon.protos.SeldonModelMetadata.CustomEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[15];
  }

  public:
};

// -------------------------------------------------------------------

class SeldonModelMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seldon.protos.SeldonModelMetadata) */ {
 public:
  inline SeldonModelMetadata() : SeldonModelMetadata(nullptr) {}
  virtual ~SeldonModelMetadata();

  SeldonModelMetadata(const SeldonModelMetadata& from);
  SeldonModelMetadata(SeldonModelMetadata&& from) noexcept
    : SeldonModelMetadata() {
    *this = ::std::move(from);
  }

  inline SeldonModelMetadata& operator=(const SeldonModelMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeldonModelMetadata& operator=(SeldonModelMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeldonModelMetadata& default_instance();

  static inline const SeldonModelMetadata* internal_default_instance() {
    return reinterpret_cast<const SeldonModelMetadata*>(
               &_SeldonModelMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SeldonModelMetadata& a, SeldonModelMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(SeldonModelMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeldonModelMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeldonModelMetadata* New() const final {
    return CreateMaybeMessage<SeldonModelMetadata>(nullptr);
  }

  SeldonModelMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeldonModelMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeldonModelMetadata& from);
  void MergeFrom(const SeldonModelMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeldonModelMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seldon.protos.SeldonModelMetadata";
  }
  protected:
  explicit SeldonModelMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVersionsFieldNumber = 2,
    kInputsFieldNumber = 4,
    kOutputsFieldNumber = 5,
    kCustomFieldNumber = 6,
    kNameFieldNumber = 1,
    kPlatformFieldNumber = 3,
  };
  // repeated string versions = 2;
  int versions_size() const;
  private:
  int _internal_versions_size() const;
  public:
  void clear_versions();
  const std::string& versions(int index) const;
  std::string* mutable_versions(int index);
  void set_versions(int index, const std::string& value);
  void set_versions(int index, std::string&& value);
  void set_versions(int index, const char* value);
  void set_versions(int index, const char* value, size_t size);
  std::string* add_versions();
  void add_versions(const std::string& value);
  void add_versions(std::string&& value);
  void add_versions(const char* value);
  void add_versions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& versions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_versions();
  private:
  const std::string& _internal_versions(int index) const;
  std::string* _internal_add_versions();
  public:

  // repeated .seldon.protos.SeldonMessageMetadata inputs = 4;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::seldon::protos::SeldonMessageMetadata* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
      mutable_inputs();
  private:
  const ::seldon::protos::SeldonMessageMetadata& _internal_inputs(int index) const;
  ::seldon::protos::SeldonMessageMetadata* _internal_add_inputs();
  public:
  const ::seldon::protos::SeldonMessageMetadata& inputs(int index) const;
  ::seldon::protos::SeldonMessageMetadata* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
      inputs() const;

  // repeated .seldon.protos.SeldonMessageMetadata outputs = 5;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::seldon::protos::SeldonMessageMetadata* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
      mutable_outputs();
  private:
  const ::seldon::protos::SeldonMessageMetadata& _internal_outputs(int index) const;
  ::seldon::protos::SeldonMessageMetadata* _internal_add_outputs();
  public:
  const ::seldon::protos::SeldonMessageMetadata& outputs(int index) const;
  ::seldon::protos::SeldonMessageMetadata* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
      outputs() const;

  // map<string, string> custom = 6;
  int custom_size() const;
  private:
  int _internal_custom_size() const;
  public:
  void clear_custom();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_custom() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_custom();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      custom() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_custom();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string platform = 3;
  void clear_platform();
  const std::string& platform() const;
  void set_platform(const std::string& value);
  void set_platform(std::string&& value);
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  std::string* mutable_platform();
  std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // @@protoc_insertion_point(class_scope:seldon.protos.SeldonModelMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> versions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SeldonModelMetadata_CustomEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> custom_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// -------------------------------------------------------------------

class SeldonGraphMetadata_ModelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SeldonGraphMetadata_ModelsEntry_DoNotUse, 
    std::string, ::seldon::protos::SeldonModelMetadata,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SeldonGraphMetadata_ModelsEntry_DoNotUse, 
    std::string, ::seldon::protos::SeldonModelMetadata,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SeldonGraphMetadata_ModelsEntry_DoNotUse();
  explicit SeldonGraphMetadata_ModelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SeldonGraphMetadata_ModelsEntry_DoNotUse& other);
  static const SeldonGraphMetadata_ModelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SeldonGraphMetadata_ModelsEntry_DoNotUse*>(&_SeldonGraphMetadata_ModelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "seldon.protos.SeldonGraphMetadata.ModelsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[17];
  }

  public:
};

// -------------------------------------------------------------------

class SeldonGraphMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:seldon.protos.SeldonGraphMetadata) */ {
 public:
  inline SeldonGraphMetadata() : SeldonGraphMetadata(nullptr) {}
  virtual ~SeldonGraphMetadata();

  SeldonGraphMetadata(const SeldonGraphMetadata& from);
  SeldonGraphMetadata(SeldonGraphMetadata&& from) noexcept
    : SeldonGraphMetadata() {
    *this = ::std::move(from);
  }

  inline SeldonGraphMetadata& operator=(const SeldonGraphMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeldonGraphMetadata& operator=(SeldonGraphMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeldonGraphMetadata& default_instance();

  static inline const SeldonGraphMetadata* internal_default_instance() {
    return reinterpret_cast<const SeldonGraphMetadata*>(
               &_SeldonGraphMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SeldonGraphMetadata& a, SeldonGraphMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(SeldonGraphMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeldonGraphMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeldonGraphMetadata* New() const final {
    return CreateMaybeMessage<SeldonGraphMetadata>(nullptr);
  }

  SeldonGraphMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeldonGraphMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeldonGraphMetadata& from);
  void MergeFrom(const SeldonGraphMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeldonGraphMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "seldon.protos.SeldonGraphMetadata";
  }
  protected:
  explicit SeldonGraphMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2eproto);
    return ::descriptor_table_prediction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 2,
    kInputsFieldNumber = 3,
    kOutputsFieldNumber = 4,
    kNameFieldNumber = 1,
  };
  // map<string, .seldon.protos.SeldonModelMetadata> models = 2;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::seldon::protos::SeldonModelMetadata >&
      _internal_models() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::seldon::protos::SeldonModelMetadata >*
      _internal_mutable_models();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::seldon::protos::SeldonModelMetadata >&
      models() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::seldon::protos::SeldonModelMetadata >*
      mutable_models();

  // repeated .seldon.protos.SeldonMessageMetadata inputs = 3;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::seldon::protos::SeldonMessageMetadata* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
      mutable_inputs();
  private:
  const ::seldon::protos::SeldonMessageMetadata& _internal_inputs(int index) const;
  ::seldon::protos::SeldonMessageMetadata* _internal_add_inputs();
  public:
  const ::seldon::protos::SeldonMessageMetadata& inputs(int index) const;
  ::seldon::protos::SeldonMessageMetadata* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
      inputs() const;

  // repeated .seldon.protos.SeldonMessageMetadata outputs = 4;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::seldon::protos::SeldonMessageMetadata* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
      mutable_outputs();
  private:
  const ::seldon::protos::SeldonMessageMetadata& _internal_outputs(int index) const;
  ::seldon::protos::SeldonMessageMetadata* _internal_add_outputs();
  public:
  const ::seldon::protos::SeldonMessageMetadata& outputs(int index) const;
  ::seldon::protos::SeldonMessageMetadata* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
      outputs() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:seldon.protos.SeldonGraphMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SeldonGraphMetadata_ModelsEntry_DoNotUse,
      std::string, ::seldon::protos::SeldonModelMetadata,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> models_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SeldonMessage

// .seldon.protos.Status status = 1;
inline bool SeldonMessage::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SeldonMessage::has_status() const {
  return _internal_has_status();
}
inline void SeldonMessage::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::seldon::protos::Status& SeldonMessage::_internal_status() const {
  const ::seldon::protos::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::seldon::protos::Status&>(
      ::seldon::protos::_Status_default_instance_);
}
inline const ::seldon::protos::Status& SeldonMessage::status() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.status)
  return _internal_status();
}
inline void SeldonMessage::unsafe_arena_set_allocated_status(
    ::seldon::protos::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seldon.protos.SeldonMessage.status)
}
inline ::seldon::protos::Status* SeldonMessage::release_status() {
  
  ::seldon::protos::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::seldon::protos::Status* SeldonMessage::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.status)
  
  ::seldon::protos::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::seldon::protos::Status* SeldonMessage::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::seldon::protos::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::seldon::protos::Status* SeldonMessage::mutable_status() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.status)
  return _internal_mutable_status();
}
inline void SeldonMessage::set_allocated_status(::seldon::protos::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.status)
}

// .seldon.protos.Meta meta = 2;
inline bool SeldonMessage::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool SeldonMessage::has_meta() const {
  return _internal_has_meta();
}
inline void SeldonMessage::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
inline const ::seldon::protos::Meta& SeldonMessage::_internal_meta() const {
  const ::seldon::protos::Meta* p = meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::seldon::protos::Meta&>(
      ::seldon::protos::_Meta_default_instance_);
}
inline const ::seldon::protos::Meta& SeldonMessage::meta() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.meta)
  return _internal_meta();
}
inline void SeldonMessage::unsafe_arena_set_allocated_meta(
    ::seldon::protos::Meta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seldon.protos.SeldonMessage.meta)
}
inline ::seldon::protos::Meta* SeldonMessage::release_meta() {
  
  ::seldon::protos::Meta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::seldon::protos::Meta* SeldonMessage::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.meta)
  
  ::seldon::protos::Meta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::seldon::protos::Meta* SeldonMessage::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::seldon::protos::Meta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::seldon::protos::Meta* SeldonMessage::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.meta)
  return _internal_mutable_meta();
}
inline void SeldonMessage::set_allocated_meta(::seldon::protos::Meta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.meta)
}

// .seldon.protos.DefaultData data = 3;
inline bool SeldonMessage::_internal_has_data() const {
  return data_oneof_case() == kData;
}
inline bool SeldonMessage::has_data() const {
  return _internal_has_data();
}
inline void SeldonMessage::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void SeldonMessage::clear_data() {
  if (_internal_has_data()) {
    if (GetArena() == nullptr) {
      delete data_oneof_.data_;
    }
    clear_has_data_oneof();
  }
}
inline ::seldon::protos::DefaultData* SeldonMessage::release_data() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.data)
  if (_internal_has_data()) {
    clear_has_data_oneof();
      ::seldon::protos::DefaultData* temp = data_oneof_.data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_oneof_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::seldon::protos::DefaultData& SeldonMessage::_internal_data() const {
  return _internal_has_data()
      ? *data_oneof_.data_
      : reinterpret_cast< ::seldon::protos::DefaultData&>(::seldon::protos::_DefaultData_default_instance_);
}
inline const ::seldon::protos::DefaultData& SeldonMessage::data() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.data)
  return _internal_data();
}
inline ::seldon::protos::DefaultData* SeldonMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:seldon.protos.SeldonMessage.data)
  if (_internal_has_data()) {
    clear_has_data_oneof();
    ::seldon::protos::DefaultData* temp = data_oneof_.data_;
    data_oneof_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SeldonMessage::unsafe_arena_set_allocated_data(::seldon::protos::DefaultData* data) {
  clear_data_oneof();
  if (data) {
    set_has_data();
    data_oneof_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seldon.protos.SeldonMessage.data)
}
inline ::seldon::protos::DefaultData* SeldonMessage::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_data_oneof();
    set_has_data();
    data_oneof_.data_ = CreateMaybeMessage< ::seldon::protos::DefaultData >(GetArena());
  }
  return data_oneof_.data_;
}
inline ::seldon::protos::DefaultData* SeldonMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.data)
  return _internal_mutable_data();
}

// bytes binData = 4;
inline bool SeldonMessage::_internal_has_bindata() const {
  return data_oneof_case() == kBinData;
}
inline void SeldonMessage::set_has_bindata() {
  _oneof_case_[0] = kBinData;
}
inline void SeldonMessage::clear_bindata() {
  if (_internal_has_bindata()) {
    data_oneof_.bindata_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data_oneof();
  }
}
inline const std::string& SeldonMessage::bindata() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.binData)
  return _internal_bindata();
}
inline void SeldonMessage::set_bindata(const std::string& value) {
  _internal_set_bindata(value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessage.binData)
}
inline std::string* SeldonMessage::mutable_bindata() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.binData)
  return _internal_mutable_bindata();
}
inline const std::string& SeldonMessage::_internal_bindata() const {
  if (_internal_has_bindata()) {
    return data_oneof_.bindata_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SeldonMessage::_internal_set_bindata(const std::string& value) {
  if (!_internal_has_bindata()) {
    clear_data_oneof();
    set_has_bindata();
    data_oneof_.bindata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.bindata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SeldonMessage::set_bindata(std::string&& value) {
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessage.binData)
  if (!_internal_has_bindata()) {
    clear_data_oneof();
    set_has_bindata();
    data_oneof_.bindata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.bindata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:seldon.protos.SeldonMessage.binData)
}
inline void SeldonMessage::set_bindata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_bindata()) {
    clear_data_oneof();
    set_has_bindata();
    data_oneof_.bindata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.bindata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessage.binData)
}
inline void SeldonMessage::set_bindata(const void* value,
                             size_t size) {
  if (!_internal_has_bindata()) {
    clear_data_oneof();
    set_has_bindata();
    data_oneof_.bindata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.bindata_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessage.binData)
}
inline std::string* SeldonMessage::_internal_mutable_bindata() {
  if (!_internal_has_bindata()) {
    clear_data_oneof();
    set_has_bindata();
    data_oneof_.bindata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_oneof_.bindata_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SeldonMessage::release_bindata() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.binData)
  if (_internal_has_bindata()) {
    clear_has_data_oneof();
    return data_oneof_.bindata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SeldonMessage::set_allocated_bindata(std::string* bindata) {
  if (has_data_oneof()) {
    clear_data_oneof();
  }
  if (bindata != nullptr) {
    set_has_bindata();
    data_oneof_.bindata_.UnsafeSetDefault(bindata);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(bindata);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.binData)
}

// string strData = 5;
inline bool SeldonMessage::_internal_has_strdata() const {
  return data_oneof_case() == kStrData;
}
inline void SeldonMessage::set_has_strdata() {
  _oneof_case_[0] = kStrData;
}
inline void SeldonMessage::clear_strdata() {
  if (_internal_has_strdata()) {
    data_oneof_.strdata_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data_oneof();
  }
}
inline const std::string& SeldonMessage::strdata() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.strData)
  return _internal_strdata();
}
inline void SeldonMessage::set_strdata(const std::string& value) {
  _internal_set_strdata(value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessage.strData)
}
inline std::string* SeldonMessage::mutable_strdata() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.strData)
  return _internal_mutable_strdata();
}
inline const std::string& SeldonMessage::_internal_strdata() const {
  if (_internal_has_strdata()) {
    return data_oneof_.strdata_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SeldonMessage::_internal_set_strdata(const std::string& value) {
  if (!_internal_has_strdata()) {
    clear_data_oneof();
    set_has_strdata();
    data_oneof_.strdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.strdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SeldonMessage::set_strdata(std::string&& value) {
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessage.strData)
  if (!_internal_has_strdata()) {
    clear_data_oneof();
    set_has_strdata();
    data_oneof_.strdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.strdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:seldon.protos.SeldonMessage.strData)
}
inline void SeldonMessage::set_strdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_strdata()) {
    clear_data_oneof();
    set_has_strdata();
    data_oneof_.strdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.strdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessage.strData)
}
inline void SeldonMessage::set_strdata(const char* value,
                             size_t size) {
  if (!_internal_has_strdata()) {
    clear_data_oneof();
    set_has_strdata();
    data_oneof_.strdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.strdata_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessage.strData)
}
inline std::string* SeldonMessage::_internal_mutable_strdata() {
  if (!_internal_has_strdata()) {
    clear_data_oneof();
    set_has_strdata();
    data_oneof_.strdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_oneof_.strdata_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SeldonMessage::release_strdata() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.strData)
  if (_internal_has_strdata()) {
    clear_has_data_oneof();
    return data_oneof_.strdata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void SeldonMessage::set_allocated_strdata(std::string* strdata) {
  if (has_data_oneof()) {
    clear_data_oneof();
  }
  if (strdata != nullptr) {
    set_has_strdata();
    data_oneof_.strdata_.UnsafeSetDefault(strdata);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(strdata);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.strData)
}

// .google.protobuf.Value jsonData = 6;
inline bool SeldonMessage::_internal_has_jsondata() const {
  return data_oneof_case() == kJsonData;
}
inline bool SeldonMessage::has_jsondata() const {
  return _internal_has_jsondata();
}
inline void SeldonMessage::set_has_jsondata() {
  _oneof_case_[0] = kJsonData;
}
inline PROTOBUF_NAMESPACE_ID::Value* SeldonMessage::release_jsondata() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.jsonData)
  if (_internal_has_jsondata()) {
    clear_has_data_oneof();
      PROTOBUF_NAMESPACE_ID::Value* temp = data_oneof_.jsondata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_oneof_.jsondata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Value& SeldonMessage::_internal_jsondata() const {
  return _internal_has_jsondata()
      ? *data_oneof_.jsondata_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Value&>(PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Value& SeldonMessage::jsondata() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.jsonData)
  return _internal_jsondata();
}
inline PROTOBUF_NAMESPACE_ID::Value* SeldonMessage::unsafe_arena_release_jsondata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:seldon.protos.SeldonMessage.jsonData)
  if (_internal_has_jsondata()) {
    clear_has_data_oneof();
    PROTOBUF_NAMESPACE_ID::Value* temp = data_oneof_.jsondata_;
    data_oneof_.jsondata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SeldonMessage::unsafe_arena_set_allocated_jsondata(PROTOBUF_NAMESPACE_ID::Value* jsondata) {
  clear_data_oneof();
  if (jsondata) {
    set_has_jsondata();
    data_oneof_.jsondata_ = jsondata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seldon.protos.SeldonMessage.jsonData)
}
inline PROTOBUF_NAMESPACE_ID::Value* SeldonMessage::_internal_mutable_jsondata() {
  if (!_internal_has_jsondata()) {
    clear_data_oneof();
    set_has_jsondata();
    data_oneof_.jsondata_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Value >(GetArena());
  }
  return data_oneof_.jsondata_;
}
inline PROTOBUF_NAMESPACE_ID::Value* SeldonMessage::mutable_jsondata() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.jsonData)
  return _internal_mutable_jsondata();
}

// .google.protobuf.Any customData = 7;
inline bool SeldonMessage::_internal_has_customdata() const {
  return data_oneof_case() == kCustomData;
}
inline bool SeldonMessage::has_customdata() const {
  return _internal_has_customdata();
}
inline void SeldonMessage::set_has_customdata() {
  _oneof_case_[0] = kCustomData;
}
inline PROTOBUF_NAMESPACE_ID::Any* SeldonMessage::release_customdata() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.customData)
  if (_internal_has_customdata()) {
    clear_has_data_oneof();
      PROTOBUF_NAMESPACE_ID::Any* temp = data_oneof_.customdata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_oneof_.customdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Any& SeldonMessage::_internal_customdata() const {
  return _internal_has_customdata()
      ? *data_oneof_.customdata_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Any&>(PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& SeldonMessage::customdata() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.customData)
  return _internal_customdata();
}
inline PROTOBUF_NAMESPACE_ID::Any* SeldonMessage::unsafe_arena_release_customdata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:seldon.protos.SeldonMessage.customData)
  if (_internal_has_customdata()) {
    clear_has_data_oneof();
    PROTOBUF_NAMESPACE_ID::Any* temp = data_oneof_.customdata_;
    data_oneof_.customdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SeldonMessage::unsafe_arena_set_allocated_customdata(PROTOBUF_NAMESPACE_ID::Any* customdata) {
  clear_data_oneof();
  if (customdata) {
    set_has_customdata();
    data_oneof_.customdata_ = customdata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seldon.protos.SeldonMessage.customData)
}
inline PROTOBUF_NAMESPACE_ID::Any* SeldonMessage::_internal_mutable_customdata() {
  if (!_internal_has_customdata()) {
    clear_data_oneof();
    set_has_customdata();
    data_oneof_.customdata_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Any >(GetArena());
  }
  return data_oneof_.customdata_;
}
inline PROTOBUF_NAMESPACE_ID::Any* SeldonMessage::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.customData)
  return _internal_mutable_customdata();
}

inline bool SeldonMessage::has_data_oneof() const {
  return data_oneof_case() != DATA_ONEOF_NOT_SET;
}
inline void SeldonMessage::clear_has_data_oneof() {
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}
inline SeldonMessage::DataOneofCase SeldonMessage::data_oneof_case() const {
  return SeldonMessage::DataOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DefaultData

// repeated string names = 1;
inline int DefaultData::_internal_names_size() const {
  return names_.size();
}
inline int DefaultData::names_size() const {
  return _internal_names_size();
}
inline void DefaultData::clear_names() {
  names_.Clear();
}
inline std::string* DefaultData::add_names() {
  // @@protoc_insertion_point(field_add_mutable:seldon.protos.DefaultData.names)
  return _internal_add_names();
}
inline const std::string& DefaultData::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& DefaultData::names(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.DefaultData.names)
  return _internal_names(index);
}
inline std::string* DefaultData::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.DefaultData.names)
  return names_.Mutable(index);
}
inline void DefaultData::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:seldon.protos.DefaultData.names)
  names_.Mutable(index)->assign(value);
}
inline void DefaultData::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:seldon.protos.DefaultData.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void DefaultData::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:seldon.protos.DefaultData.names)
}
inline void DefaultData::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.DefaultData.names)
}
inline std::string* DefaultData::_internal_add_names() {
  return names_.Add();
}
inline void DefaultData::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:seldon.protos.DefaultData.names)
}
inline void DefaultData::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:seldon.protos.DefaultData.names)
}
inline void DefaultData::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:seldon.protos.DefaultData.names)
}
inline void DefaultData::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:seldon.protos.DefaultData.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DefaultData::names() const {
  // @@protoc_insertion_point(field_list:seldon.protos.DefaultData.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DefaultData::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.DefaultData.names)
  return &names_;
}

// .seldon.protos.Tensor tensor = 2;
inline bool DefaultData::_internal_has_tensor() const {
  return data_oneof_case() == kTensor;
}
inline bool DefaultData::has_tensor() const {
  return _internal_has_tensor();
}
inline void DefaultData::set_has_tensor() {
  _oneof_case_[0] = kTensor;
}
inline void DefaultData::clear_tensor() {
  if (_internal_has_tensor()) {
    if (GetArena() == nullptr) {
      delete data_oneof_.tensor_;
    }
    clear_has_data_oneof();
  }
}
inline ::seldon::protos::Tensor* DefaultData::release_tensor() {
  // @@protoc_insertion_point(field_release:seldon.protos.DefaultData.tensor)
  if (_internal_has_tensor()) {
    clear_has_data_oneof();
      ::seldon::protos::Tensor* temp = data_oneof_.tensor_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_oneof_.tensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::seldon::protos::Tensor& DefaultData::_internal_tensor() const {
  return _internal_has_tensor()
      ? *data_oneof_.tensor_
      : reinterpret_cast< ::seldon::protos::Tensor&>(::seldon::protos::_Tensor_default_instance_);
}
inline const ::seldon::protos::Tensor& DefaultData::tensor() const {
  // @@protoc_insertion_point(field_get:seldon.protos.DefaultData.tensor)
  return _internal_tensor();
}
inline ::seldon::protos::Tensor* DefaultData::unsafe_arena_release_tensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:seldon.protos.DefaultData.tensor)
  if (_internal_has_tensor()) {
    clear_has_data_oneof();
    ::seldon::protos::Tensor* temp = data_oneof_.tensor_;
    data_oneof_.tensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DefaultData::unsafe_arena_set_allocated_tensor(::seldon::protos::Tensor* tensor) {
  clear_data_oneof();
  if (tensor) {
    set_has_tensor();
    data_oneof_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seldon.protos.DefaultData.tensor)
}
inline ::seldon::protos::Tensor* DefaultData::_internal_mutable_tensor() {
  if (!_internal_has_tensor()) {
    clear_data_oneof();
    set_has_tensor();
    data_oneof_.tensor_ = CreateMaybeMessage< ::seldon::protos::Tensor >(GetArena());
  }
  return data_oneof_.tensor_;
}
inline ::seldon::protos::Tensor* DefaultData::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.DefaultData.tensor)
  return _internal_mutable_tensor();
}

// .google.protobuf.ListValue ndarray = 3;
inline bool DefaultData::_internal_has_ndarray() const {
  return data_oneof_case() == kNdarray;
}
inline bool DefaultData::has_ndarray() const {
  return _internal_has_ndarray();
}
inline void DefaultData::set_has_ndarray() {
  _oneof_case_[0] = kNdarray;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* DefaultData::release_ndarray() {
  // @@protoc_insertion_point(field_release:seldon.protos.DefaultData.ndarray)
  if (_internal_has_ndarray()) {
    clear_has_data_oneof();
      PROTOBUF_NAMESPACE_ID::ListValue* temp = data_oneof_.ndarray_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_oneof_.ndarray_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& DefaultData::_internal_ndarray() const {
  return _internal_has_ndarray()
      ? *data_oneof_.ndarray_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::ListValue&>(PROTOBUF_NAMESPACE_ID::_ListValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::ListValue& DefaultData::ndarray() const {
  // @@protoc_insertion_point(field_get:seldon.protos.DefaultData.ndarray)
  return _internal_ndarray();
}
inline PROTOBUF_NAMESPACE_ID::ListValue* DefaultData::unsafe_arena_release_ndarray() {
  // @@protoc_insertion_point(field_unsafe_arena_release:seldon.protos.DefaultData.ndarray)
  if (_internal_has_ndarray()) {
    clear_has_data_oneof();
    PROTOBUF_NAMESPACE_ID::ListValue* temp = data_oneof_.ndarray_;
    data_oneof_.ndarray_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DefaultData::unsafe_arena_set_allocated_ndarray(PROTOBUF_NAMESPACE_ID::ListValue* ndarray) {
  clear_data_oneof();
  if (ndarray) {
    set_has_ndarray();
    data_oneof_.ndarray_ = ndarray;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seldon.protos.DefaultData.ndarray)
}
inline PROTOBUF_NAMESPACE_ID::ListValue* DefaultData::_internal_mutable_ndarray() {
  if (!_internal_has_ndarray()) {
    clear_data_oneof();
    set_has_ndarray();
    data_oneof_.ndarray_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::ListValue >(GetArena());
  }
  return data_oneof_.ndarray_;
}
inline PROTOBUF_NAMESPACE_ID::ListValue* DefaultData::mutable_ndarray() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.DefaultData.ndarray)
  return _internal_mutable_ndarray();
}

// .tensorflow.TensorProto tftensor = 4;
inline bool DefaultData::_internal_has_tftensor() const {
  return data_oneof_case() == kTftensor;
}
inline bool DefaultData::has_tftensor() const {
  return _internal_has_tftensor();
}
inline void DefaultData::set_has_tftensor() {
  _oneof_case_[0] = kTftensor;
}
inline ::tensorflow::TensorProto* DefaultData::release_tftensor() {
  // @@protoc_insertion_point(field_release:seldon.protos.DefaultData.tftensor)
  if (_internal_has_tftensor()) {
    clear_has_data_oneof();
      ::tensorflow::TensorProto* temp = data_oneof_.tftensor_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_oneof_.tftensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::TensorProto& DefaultData::_internal_tftensor() const {
  return _internal_has_tftensor()
      ? *data_oneof_.tftensor_
      : reinterpret_cast< ::tensorflow::TensorProto&>(::tensorflow::_TensorProto_default_instance_);
}
inline const ::tensorflow::TensorProto& DefaultData::tftensor() const {
  // @@protoc_insertion_point(field_get:seldon.protos.DefaultData.tftensor)
  return _internal_tftensor();
}
inline ::tensorflow::TensorProto* DefaultData::unsafe_arena_release_tftensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:seldon.protos.DefaultData.tftensor)
  if (_internal_has_tftensor()) {
    clear_has_data_oneof();
    ::tensorflow::TensorProto* temp = data_oneof_.tftensor_;
    data_oneof_.tftensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DefaultData::unsafe_arena_set_allocated_tftensor(::tensorflow::TensorProto* tftensor) {
  clear_data_oneof();
  if (tftensor) {
    set_has_tftensor();
    data_oneof_.tftensor_ = tftensor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seldon.protos.DefaultData.tftensor)
}
inline ::tensorflow::TensorProto* DefaultData::_internal_mutable_tftensor() {
  if (!_internal_has_tftensor()) {
    clear_data_oneof();
    set_has_tftensor();
    data_oneof_.tftensor_ = CreateMaybeMessage< ::tensorflow::TensorProto >(GetArena());
  }
  return data_oneof_.tftensor_;
}
inline ::tensorflow::TensorProto* DefaultData::mutable_tftensor() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.DefaultData.tftensor)
  return _internal_mutable_tftensor();
}

inline bool DefaultData::has_data_oneof() const {
  return data_oneof_case() != DATA_ONEOF_NOT_SET;
}
inline void DefaultData::clear_has_data_oneof() {
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}
inline DefaultData::DataOneofCase DefaultData::data_oneof_case() const {
  return DefaultData::DataOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Tensor

// repeated int32 shape = 1 [packed = true];
inline int Tensor::_internal_shape_size() const {
  return shape_.size();
}
inline int Tensor::shape_size() const {
  return _internal_shape_size();
}
inline void Tensor::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tensor::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tensor::shape(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.Tensor.shape)
  return _internal_shape(index);
}
inline void Tensor::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:seldon.protos.Tensor.shape)
}
inline void Tensor::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Add(value);
}
inline void Tensor::add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:seldon.protos.Tensor.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Tensor::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Tensor::shape() const {
  // @@protoc_insertion_point(field_list:seldon.protos.Tensor.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Tensor::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Tensor::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.Tensor.shape)
  return _internal_mutable_shape();
}

// repeated double values = 2 [packed = true];
inline int Tensor::_internal_values_size() const {
  return values_.size();
}
inline int Tensor::values_size() const {
  return _internal_values_size();
}
inline void Tensor::clear_values() {
  values_.Clear();
}
inline double Tensor::_internal_values(int index) const {
  return values_.Get(index);
}
inline double Tensor::values(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.Tensor.values)
  return _internal_values(index);
}
inline void Tensor::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:seldon.protos.Tensor.values)
}
inline void Tensor::_internal_add_values(double value) {
  values_.Add(value);
}
inline void Tensor::add_values(double value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:seldon.protos.Tensor.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Tensor::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Tensor::values() const {
  // @@protoc_insertion_point(field_list:seldon.protos.Tensor.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Tensor::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Tensor::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.Tensor.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Meta

// string puid = 1;
inline void Meta::clear_puid() {
  puid_.ClearToEmpty();
}
inline const std::string& Meta::puid() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Meta.puid)
  return _internal_puid();
}
inline void Meta::set_puid(const std::string& value) {
  _internal_set_puid(value);
  // @@protoc_insertion_point(field_set:seldon.protos.Meta.puid)
}
inline std::string* Meta::mutable_puid() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.Meta.puid)
  return _internal_mutable_puid();
}
inline const std::string& Meta::_internal_puid() const {
  return puid_.Get();
}
inline void Meta::_internal_set_puid(const std::string& value) {
  
  puid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Meta::set_puid(std::string&& value) {
  
  puid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:seldon.protos.Meta.puid)
}
inline void Meta::set_puid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  puid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:seldon.protos.Meta.puid)
}
inline void Meta::set_puid(const char* value,
    size_t size) {
  
  puid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.Meta.puid)
}
inline std::string* Meta::_internal_mutable_puid() {
  
  return puid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Meta::release_puid() {
  // @@protoc_insertion_point(field_release:seldon.protos.Meta.puid)
  return puid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Meta::set_allocated_puid(std::string* puid) {
  if (puid != nullptr) {
    
  } else {
    
  }
  puid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), puid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Meta.puid)
}

// map<string, .google.protobuf.Value> tags = 2;
inline int Meta::_internal_tags_size() const {
  return tags_.size();
}
inline int Meta::tags_size() const {
  return _internal_tags_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
Meta::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >&
Meta::tags() const {
  // @@protoc_insertion_point(field_map:seldon.protos.Meta.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
Meta::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, PROTOBUF_NAMESPACE_ID::Value >*
Meta::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.Meta.tags)
  return _internal_mutable_tags();
}

// map<string, int32> routing = 3;
inline int Meta::_internal_routing_size() const {
  return routing_.size();
}
inline int Meta::routing_size() const {
  return _internal_routing_size();
}
inline void Meta::clear_routing() {
  routing_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
Meta::_internal_routing() const {
  return routing_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
Meta::routing() const {
  // @@protoc_insertion_point(field_map:seldon.protos.Meta.routing)
  return _internal_routing();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
Meta::_internal_mutable_routing() {
  return routing_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
Meta::mutable_routing() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.Meta.routing)
  return _internal_mutable_routing();
}

// map<string, string> requestPath = 4;
inline int Meta::_internal_requestpath_size() const {
  return requestpath_.size();
}
inline int Meta::requestpath_size() const {
  return _internal_requestpath_size();
}
inline void Meta::clear_requestpath() {
  requestpath_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Meta::_internal_requestpath() const {
  return requestpath_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Meta::requestpath() const {
  // @@protoc_insertion_point(field_map:seldon.protos.Meta.requestPath)
  return _internal_requestpath();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Meta::_internal_mutable_requestpath() {
  return requestpath_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Meta::mutable_requestpath() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.Meta.requestPath)
  return _internal_mutable_requestpath();
}

// repeated .seldon.protos.Metric metrics = 5;
inline int Meta::_internal_metrics_size() const {
  return metrics_.size();
}
inline int Meta::metrics_size() const {
  return _internal_metrics_size();
}
inline void Meta::clear_metrics() {
  metrics_.Clear();
}
inline ::seldon::protos::Metric* Meta::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.Meta.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::Metric >*
Meta::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.Meta.metrics)
  return &metrics_;
}
inline const ::seldon::protos::Metric& Meta::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::seldon::protos::Metric& Meta::metrics(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.Meta.metrics)
  return _internal_metrics(index);
}
inline ::seldon::protos::Metric* Meta::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::seldon::protos::Metric* Meta::add_metrics() {
  // @@protoc_insertion_point(field_add:seldon.protos.Meta.metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::Metric >&
Meta::metrics() const {
  // @@protoc_insertion_point(field_list:seldon.protos.Meta.metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Metric

// string key = 1;
inline void Metric::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Metric::key() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Metric.key)
  return _internal_key();
}
inline void Metric::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:seldon.protos.Metric.key)
}
inline std::string* Metric::mutable_key() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.Metric.key)
  return _internal_mutable_key();
}
inline const std::string& Metric::_internal_key() const {
  return key_.Get();
}
inline void Metric::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Metric::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:seldon.protos.Metric.key)
}
inline void Metric::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:seldon.protos.Metric.key)
}
inline void Metric::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.Metric.key)
}
inline std::string* Metric::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Metric::release_key() {
  // @@protoc_insertion_point(field_release:seldon.protos.Metric.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metric::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Metric.key)
}

// .seldon.protos.Metric.MetricType type = 2;
inline void Metric::clear_type() {
  type_ = 0;
}
inline ::seldon::protos::Metric_MetricType Metric::_internal_type() const {
  return static_cast< ::seldon::protos::Metric_MetricType >(type_);
}
inline ::seldon::protos::Metric_MetricType Metric::type() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Metric.type)
  return _internal_type();
}
inline void Metric::_internal_set_type(::seldon::protos::Metric_MetricType value) {
  
  type_ = value;
}
inline void Metric::set_type(::seldon::protos::Metric_MetricType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:seldon.protos.Metric.type)
}

// float value = 3;
inline void Metric::clear_value() {
  value_ = 0;
}
inline float Metric::_internal_value() const {
  return value_;
}
inline float Metric::value() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Metric.value)
  return _internal_value();
}
inline void Metric::_internal_set_value(float value) {
  
  value_ = value;
}
inline void Metric::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:seldon.protos.Metric.value)
}

// map<string, string> tags = 4;
inline int Metric::_internal_tags_size() const {
  return tags_.size();
}
inline int Metric::tags_size() const {
  return _internal_tags_size();
}
inline void Metric::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Metric::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Metric::tags() const {
  // @@protoc_insertion_point(field_map:seldon.protos.Metric.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Metric::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Metric::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.Metric.tags)
  return _internal_mutable_tags();
}

// -------------------------------------------------------------------

// SeldonMessageList

// repeated .seldon.protos.SeldonMessage seldonMessages = 1;
inline int SeldonMessageList::_internal_seldonmessages_size() const {
  return seldonmessages_.size();
}
inline int SeldonMessageList::seldonmessages_size() const {
  return _internal_seldonmessages_size();
}
inline void SeldonMessageList::clear_seldonmessages() {
  seldonmessages_.Clear();
}
inline ::seldon::protos::SeldonMessage* SeldonMessageList::mutable_seldonmessages(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageList.seldonMessages)
  return seldonmessages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessage >*
SeldonMessageList::mutable_seldonmessages() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonMessageList.seldonMessages)
  return &seldonmessages_;
}
inline const ::seldon::protos::SeldonMessage& SeldonMessageList::_internal_seldonmessages(int index) const {
  return seldonmessages_.Get(index);
}
inline const ::seldon::protos::SeldonMessage& SeldonMessageList::seldonmessages(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageList.seldonMessages)
  return _internal_seldonmessages(index);
}
inline ::seldon::protos::SeldonMessage* SeldonMessageList::_internal_add_seldonmessages() {
  return seldonmessages_.Add();
}
inline ::seldon::protos::SeldonMessage* SeldonMessageList::add_seldonmessages() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonMessageList.seldonMessages)
  return _internal_add_seldonmessages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessage >&
SeldonMessageList::seldonmessages() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonMessageList.seldonMessages)
  return seldonmessages_;
}

// -------------------------------------------------------------------

// Status

// int32 code = 1;
inline void Status::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::code() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Status.code)
  return _internal_code();
}
inline void Status::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void Status::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:seldon.protos.Status.code)
}

// string info = 2;
inline void Status::clear_info() {
  info_.ClearToEmpty();
}
inline const std::string& Status::info() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Status.info)
  return _internal_info();
}
inline void Status::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:seldon.protos.Status.info)
}
inline std::string* Status::mutable_info() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.Status.info)
  return _internal_mutable_info();
}
inline const std::string& Status::_internal_info() const {
  return info_.Get();
}
inline void Status::_internal_set_info(const std::string& value) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_info(std::string&& value) {
  
  info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:seldon.protos.Status.info)
}
inline void Status::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:seldon.protos.Status.info)
}
inline void Status::set_info(const char* value,
    size_t size) {
  
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.Status.info)
}
inline std::string* Status::_internal_mutable_info() {
  
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_info() {
  // @@protoc_insertion_point(field_release:seldon.protos.Status.info)
  return info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Status.info)
}

// string reason = 3;
inline void Status::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& Status::reason() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Status.reason)
  return _internal_reason();
}
inline void Status::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:seldon.protos.Status.reason)
}
inline std::string* Status::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.Status.reason)
  return _internal_mutable_reason();
}
inline const std::string& Status::_internal_reason() const {
  return reason_.Get();
}
inline void Status::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_reason(std::string&& value) {
  
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:seldon.protos.Status.reason)
}
inline void Status::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:seldon.protos.Status.reason)
}
inline void Status::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.Status.reason)
}
inline std::string* Status::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_reason() {
  // @@protoc_insertion_point(field_release:seldon.protos.Status.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Status.reason)
}

// .seldon.protos.Status.StatusFlag status = 4;
inline void Status::clear_status() {
  status_ = 0;
}
inline ::seldon::protos::Status_StatusFlag Status::_internal_status() const {
  return static_cast< ::seldon::protos::Status_StatusFlag >(status_);
}
inline ::seldon::protos::Status_StatusFlag Status::status() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Status.status)
  return _internal_status();
}
inline void Status::_internal_set_status(::seldon::protos::Status_StatusFlag value) {
  
  status_ = value;
}
inline void Status::set_status(::seldon::protos::Status_StatusFlag value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:seldon.protos.Status.status)
}

// -------------------------------------------------------------------

// Feedback

// .seldon.protos.SeldonMessage request = 1;
inline bool Feedback::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool Feedback::has_request() const {
  return _internal_has_request();
}
inline void Feedback::clear_request() {
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::seldon::protos::SeldonMessage& Feedback::_internal_request() const {
  const ::seldon::protos::SeldonMessage* p = request_;
  return p != nullptr ? *p : reinterpret_cast<const ::seldon::protos::SeldonMessage&>(
      ::seldon::protos::_SeldonMessage_default_instance_);
}
inline const ::seldon::protos::SeldonMessage& Feedback::request() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Feedback.request)
  return _internal_request();
}
inline void Feedback::unsafe_arena_set_allocated_request(
    ::seldon::protos::SeldonMessage* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seldon.protos.Feedback.request)
}
inline ::seldon::protos::SeldonMessage* Feedback::release_request() {
  
  ::seldon::protos::SeldonMessage* temp = request_;
  request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::seldon::protos::SeldonMessage* Feedback::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:seldon.protos.Feedback.request)
  
  ::seldon::protos::SeldonMessage* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::seldon::protos::SeldonMessage* Feedback::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::seldon::protos::SeldonMessage>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::seldon::protos::SeldonMessage* Feedback::mutable_request() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.Feedback.request)
  return _internal_mutable_request();
}
inline void Feedback::set_allocated_request(::seldon::protos::SeldonMessage* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Feedback.request)
}

// .seldon.protos.SeldonMessage response = 2;
inline bool Feedback::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool Feedback::has_response() const {
  return _internal_has_response();
}
inline void Feedback::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::seldon::protos::SeldonMessage& Feedback::_internal_response() const {
  const ::seldon::protos::SeldonMessage* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::seldon::protos::SeldonMessage&>(
      ::seldon::protos::_SeldonMessage_default_instance_);
}
inline const ::seldon::protos::SeldonMessage& Feedback::response() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Feedback.response)
  return _internal_response();
}
inline void Feedback::unsafe_arena_set_allocated_response(
    ::seldon::protos::SeldonMessage* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seldon.protos.Feedback.response)
}
inline ::seldon::protos::SeldonMessage* Feedback::release_response() {
  
  ::seldon::protos::SeldonMessage* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::seldon::protos::SeldonMessage* Feedback::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:seldon.protos.Feedback.response)
  
  ::seldon::protos::SeldonMessage* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::seldon::protos::SeldonMessage* Feedback::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::seldon::protos::SeldonMessage>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::seldon::protos::SeldonMessage* Feedback::mutable_response() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.Feedback.response)
  return _internal_mutable_response();
}
inline void Feedback::set_allocated_response(::seldon::protos::SeldonMessage* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Feedback.response)
}

// float reward = 3;
inline void Feedback::clear_reward() {
  reward_ = 0;
}
inline float Feedback::_internal_reward() const {
  return reward_;
}
inline float Feedback::reward() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Feedback.reward)
  return _internal_reward();
}
inline void Feedback::_internal_set_reward(float value) {
  
  reward_ = value;
}
inline void Feedback::set_reward(float value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:seldon.protos.Feedback.reward)
}

// .seldon.protos.SeldonMessage truth = 4;
inline bool Feedback::_internal_has_truth() const {
  return this != internal_default_instance() && truth_ != nullptr;
}
inline bool Feedback::has_truth() const {
  return _internal_has_truth();
}
inline void Feedback::clear_truth() {
  if (GetArena() == nullptr && truth_ != nullptr) {
    delete truth_;
  }
  truth_ = nullptr;
}
inline const ::seldon::protos::SeldonMessage& Feedback::_internal_truth() const {
  const ::seldon::protos::SeldonMessage* p = truth_;
  return p != nullptr ? *p : reinterpret_cast<const ::seldon::protos::SeldonMessage&>(
      ::seldon::protos::_SeldonMessage_default_instance_);
}
inline const ::seldon::protos::SeldonMessage& Feedback::truth() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Feedback.truth)
  return _internal_truth();
}
inline void Feedback::unsafe_arena_set_allocated_truth(
    ::seldon::protos::SeldonMessage* truth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(truth_);
  }
  truth_ = truth;
  if (truth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seldon.protos.Feedback.truth)
}
inline ::seldon::protos::SeldonMessage* Feedback::release_truth() {
  
  ::seldon::protos::SeldonMessage* temp = truth_;
  truth_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::seldon::protos::SeldonMessage* Feedback::unsafe_arena_release_truth() {
  // @@protoc_insertion_point(field_release:seldon.protos.Feedback.truth)
  
  ::seldon::protos::SeldonMessage* temp = truth_;
  truth_ = nullptr;
  return temp;
}
inline ::seldon::protos::SeldonMessage* Feedback::_internal_mutable_truth() {
  
  if (truth_ == nullptr) {
    auto* p = CreateMaybeMessage<::seldon::protos::SeldonMessage>(GetArena());
    truth_ = p;
  }
  return truth_;
}
inline ::seldon::protos::SeldonMessage* Feedback::mutable_truth() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.Feedback.truth)
  return _internal_mutable_truth();
}
inline void Feedback::set_allocated_truth(::seldon::protos::SeldonMessage* truth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete truth_;
  }
  if (truth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(truth);
    if (message_arena != submessage_arena) {
      truth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, truth, submessage_arena);
    }
    
  } else {
    
  }
  truth_ = truth;
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Feedback.truth)
}

// -------------------------------------------------------------------

// RequestResponse

// .seldon.protos.SeldonMessage request = 1;
inline bool RequestResponse::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool RequestResponse::has_request() const {
  return _internal_has_request();
}
inline void RequestResponse::clear_request() {
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::seldon::protos::SeldonMessage& RequestResponse::_internal_request() const {
  const ::seldon::protos::SeldonMessage* p = request_;
  return p != nullptr ? *p : reinterpret_cast<const ::seldon::protos::SeldonMessage&>(
      ::seldon::protos::_SeldonMessage_default_instance_);
}
inline const ::seldon::protos::SeldonMessage& RequestResponse::request() const {
  // @@protoc_insertion_point(field_get:seldon.protos.RequestResponse.request)
  return _internal_request();
}
inline void RequestResponse::unsafe_arena_set_allocated_request(
    ::seldon::protos::SeldonMessage* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seldon.protos.RequestResponse.request)
}
inline ::seldon::protos::SeldonMessage* RequestResponse::release_request() {
  
  ::seldon::protos::SeldonMessage* temp = request_;
  request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::seldon::protos::SeldonMessage* RequestResponse::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:seldon.protos.RequestResponse.request)
  
  ::seldon::protos::SeldonMessage* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::seldon::protos::SeldonMessage* RequestResponse::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::seldon::protos::SeldonMessage>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::seldon::protos::SeldonMessage* RequestResponse::mutable_request() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.RequestResponse.request)
  return _internal_mutable_request();
}
inline void RequestResponse::set_allocated_request(::seldon::protos::SeldonMessage* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.RequestResponse.request)
}

// .seldon.protos.SeldonMessage response = 2;
inline bool RequestResponse::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool RequestResponse::has_response() const {
  return _internal_has_response();
}
inline void RequestResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::seldon::protos::SeldonMessage& RequestResponse::_internal_response() const {
  const ::seldon::protos::SeldonMessage* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::seldon::protos::SeldonMessage&>(
      ::seldon::protos::_SeldonMessage_default_instance_);
}
inline const ::seldon::protos::SeldonMessage& RequestResponse::response() const {
  // @@protoc_insertion_point(field_get:seldon.protos.RequestResponse.response)
  return _internal_response();
}
inline void RequestResponse::unsafe_arena_set_allocated_response(
    ::seldon::protos::SeldonMessage* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seldon.protos.RequestResponse.response)
}
inline ::seldon::protos::SeldonMessage* RequestResponse::release_response() {
  
  ::seldon::protos::SeldonMessage* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::seldon::protos::SeldonMessage* RequestResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:seldon.protos.RequestResponse.response)
  
  ::seldon::protos::SeldonMessage* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::seldon::protos::SeldonMessage* RequestResponse::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::seldon::protos::SeldonMessage>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::seldon::protos::SeldonMessage* RequestResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.RequestResponse.response)
  return _internal_mutable_response();
}
inline void RequestResponse::set_allocated_response(::seldon::protos::SeldonMessage* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.RequestResponse.response)
}

// -------------------------------------------------------------------

// SeldonModelMetadataRequest

// string name = 1;
inline void SeldonModelMetadataRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SeldonModelMetadataRequest::name() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadataRequest.name)
  return _internal_name();
}
inline void SeldonModelMetadataRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonModelMetadataRequest.name)
}
inline std::string* SeldonModelMetadataRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadataRequest.name)
  return _internal_mutable_name();
}
inline const std::string& SeldonModelMetadataRequest::_internal_name() const {
  return name_.Get();
}
inline void SeldonModelMetadataRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SeldonModelMetadataRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:seldon.protos.SeldonModelMetadataRequest.name)
}
inline void SeldonModelMetadataRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonModelMetadataRequest.name)
}
inline void SeldonModelMetadataRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonModelMetadataRequest.name)
}
inline std::string* SeldonModelMetadataRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SeldonModelMetadataRequest::release_name() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonModelMetadataRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SeldonModelMetadataRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonModelMetadataRequest.name)
}

// -------------------------------------------------------------------

// SeldonMessageMetadata

// string messagetype = 1;
inline void SeldonMessageMetadata::clear_messagetype() {
  messagetype_.ClearToEmpty();
}
inline const std::string& SeldonMessageMetadata::messagetype() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.messagetype)
  return _internal_messagetype();
}
inline void SeldonMessageMetadata::set_messagetype(const std::string& value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessageMetadata.messagetype)
}
inline std::string* SeldonMessageMetadata::mutable_messagetype() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageMetadata.messagetype)
  return _internal_mutable_messagetype();
}
inline const std::string& SeldonMessageMetadata::_internal_messagetype() const {
  return messagetype_.Get();
}
inline void SeldonMessageMetadata::_internal_set_messagetype(const std::string& value) {
  
  messagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SeldonMessageMetadata::set_messagetype(std::string&& value) {
  
  messagetype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:seldon.protos.SeldonMessageMetadata.messagetype)
}
inline void SeldonMessageMetadata::set_messagetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  messagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessageMetadata.messagetype)
}
inline void SeldonMessageMetadata::set_messagetype(const char* value,
    size_t size) {
  
  messagetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessageMetadata.messagetype)
}
inline std::string* SeldonMessageMetadata::_internal_mutable_messagetype() {
  
  return messagetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SeldonMessageMetadata::release_messagetype() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessageMetadata.messagetype)
  return messagetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SeldonMessageMetadata::set_allocated_messagetype(std::string* messagetype) {
  if (messagetype != nullptr) {
    
  } else {
    
  }
  messagetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), messagetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessageMetadata.messagetype)
}

// .google.protobuf.Value schema = 2;
inline bool SeldonMessageMetadata::_internal_has_schema() const {
  return this != internal_default_instance() && schema_ != nullptr;
}
inline bool SeldonMessageMetadata::has_schema() const {
  return _internal_has_schema();
}
inline const PROTOBUF_NAMESPACE_ID::Value& SeldonMessageMetadata::_internal_schema() const {
  const PROTOBUF_NAMESPACE_ID::Value* p = schema_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Value&>(
      PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Value& SeldonMessageMetadata::schema() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.schema)
  return _internal_schema();
}
inline void SeldonMessageMetadata::unsafe_arena_set_allocated_schema(
    PROTOBUF_NAMESPACE_ID::Value* schema) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema_);
  }
  schema_ = schema;
  if (schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:seldon.protos.SeldonMessageMetadata.schema)
}
inline PROTOBUF_NAMESPACE_ID::Value* SeldonMessageMetadata::release_schema() {
  
  PROTOBUF_NAMESPACE_ID::Value* temp = schema_;
  schema_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* SeldonMessageMetadata::unsafe_arena_release_schema() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessageMetadata.schema)
  
  PROTOBUF_NAMESPACE_ID::Value* temp = schema_;
  schema_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Value* SeldonMessageMetadata::_internal_mutable_schema() {
  
  if (schema_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Value>(GetArena());
    schema_ = p;
  }
  return schema_;
}
inline PROTOBUF_NAMESPACE_ID::Value* SeldonMessageMetadata::mutable_schema() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageMetadata.schema)
  return _internal_mutable_schema();
}
inline void SeldonMessageMetadata::set_allocated_schema(PROTOBUF_NAMESPACE_ID::Value* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema_);
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema)->GetArena();
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessageMetadata.schema)
}

// string name = 3;
inline void SeldonMessageMetadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SeldonMessageMetadata::name() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.name)
  return _internal_name();
}
inline void SeldonMessageMetadata::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessageMetadata.name)
}
inline std::string* SeldonMessageMetadata::mutable_name() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageMetadata.name)
  return _internal_mutable_name();
}
inline const std::string& SeldonMessageMetadata::_internal_name() const {
  return name_.Get();
}
inline void SeldonMessageMetadata::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SeldonMessageMetadata::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:seldon.protos.SeldonMessageMetadata.name)
}
inline void SeldonMessageMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessageMetadata.name)
}
inline void SeldonMessageMetadata::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessageMetadata.name)
}
inline std::string* SeldonMessageMetadata::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SeldonMessageMetadata::release_name() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessageMetadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SeldonMessageMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessageMetadata.name)
}

// string datatype = 4;
inline void SeldonMessageMetadata::clear_datatype() {
  datatype_.ClearToEmpty();
}
inline const std::string& SeldonMessageMetadata::datatype() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.datatype)
  return _internal_datatype();
}
inline void SeldonMessageMetadata::set_datatype(const std::string& value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessageMetadata.datatype)
}
inline std::string* SeldonMessageMetadata::mutable_datatype() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageMetadata.datatype)
  return _internal_mutable_datatype();
}
inline const std::string& SeldonMessageMetadata::_internal_datatype() const {
  return datatype_.Get();
}
inline void SeldonMessageMetadata::_internal_set_datatype(const std::string& value) {
  
  datatype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SeldonMessageMetadata::set_datatype(std::string&& value) {
  
  datatype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:seldon.protos.SeldonMessageMetadata.datatype)
}
inline void SeldonMessageMetadata::set_datatype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datatype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessageMetadata.datatype)
}
inline void SeldonMessageMetadata::set_datatype(const char* value,
    size_t size) {
  
  datatype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessageMetadata.datatype)
}
inline std::string* SeldonMessageMetadata::_internal_mutable_datatype() {
  
  return datatype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SeldonMessageMetadata::release_datatype() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessageMetadata.datatype)
  return datatype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SeldonMessageMetadata::set_allocated_datatype(std::string* datatype) {
  if (datatype != nullptr) {
    
  } else {
    
  }
  datatype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datatype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessageMetadata.datatype)
}

// repeated int64 shape = 5;
inline int SeldonMessageMetadata::_internal_shape_size() const {
  return shape_.size();
}
inline int SeldonMessageMetadata::shape_size() const {
  return _internal_shape_size();
}
inline void SeldonMessageMetadata::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SeldonMessageMetadata::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SeldonMessageMetadata::shape(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.shape)
  return _internal_shape(index);
}
inline void SeldonMessageMetadata::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessageMetadata.shape)
}
inline void SeldonMessageMetadata::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::int64 value) {
  shape_.Add(value);
}
inline void SeldonMessageMetadata::add_shape(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonMessageMetadata.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SeldonMessageMetadata::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SeldonMessageMetadata::shape() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonMessageMetadata.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SeldonMessageMetadata::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SeldonMessageMetadata::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonMessageMetadata.shape)
  return _internal_mutable_shape();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SeldonModelMetadata

// string name = 1;
inline void SeldonModelMetadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SeldonModelMetadata::name() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.name)
  return _internal_name();
}
inline void SeldonModelMetadata::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonModelMetadata.name)
}
inline std::string* SeldonModelMetadata::mutable_name() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.name)
  return _internal_mutable_name();
}
inline const std::string& SeldonModelMetadata::_internal_name() const {
  return name_.Get();
}
inline void SeldonModelMetadata::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SeldonModelMetadata::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:seldon.protos.SeldonModelMetadata.name)
}
inline void SeldonModelMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonModelMetadata.name)
}
inline void SeldonModelMetadata::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonModelMetadata.name)
}
inline std::string* SeldonModelMetadata::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SeldonModelMetadata::release_name() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonModelMetadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SeldonModelMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonModelMetadata.name)
}

// repeated string versions = 2;
inline int SeldonModelMetadata::_internal_versions_size() const {
  return versions_.size();
}
inline int SeldonModelMetadata::versions_size() const {
  return _internal_versions_size();
}
inline void SeldonModelMetadata::clear_versions() {
  versions_.Clear();
}
inline std::string* SeldonModelMetadata::add_versions() {
  // @@protoc_insertion_point(field_add_mutable:seldon.protos.SeldonModelMetadata.versions)
  return _internal_add_versions();
}
inline const std::string& SeldonModelMetadata::_internal_versions(int index) const {
  return versions_.Get(index);
}
inline const std::string& SeldonModelMetadata::versions(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.versions)
  return _internal_versions(index);
}
inline std::string* SeldonModelMetadata::mutable_versions(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.versions)
  return versions_.Mutable(index);
}
inline void SeldonModelMetadata::set_versions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonModelMetadata.versions)
  versions_.Mutable(index)->assign(value);
}
inline void SeldonModelMetadata::set_versions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonModelMetadata.versions)
  versions_.Mutable(index)->assign(std::move(value));
}
inline void SeldonModelMetadata::set_versions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonModelMetadata.versions)
}
inline void SeldonModelMetadata::set_versions(int index, const char* value, size_t size) {
  versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonModelMetadata.versions)
}
inline std::string* SeldonModelMetadata::_internal_add_versions() {
  return versions_.Add();
}
inline void SeldonModelMetadata::add_versions(const std::string& value) {
  versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonModelMetadata.versions)
}
inline void SeldonModelMetadata::add_versions(std::string&& value) {
  versions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonModelMetadata.versions)
}
inline void SeldonModelMetadata::add_versions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:seldon.protos.SeldonModelMetadata.versions)
}
inline void SeldonModelMetadata::add_versions(const char* value, size_t size) {
  versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:seldon.protos.SeldonModelMetadata.versions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SeldonModelMetadata::versions() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonModelMetadata.versions)
  return versions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SeldonModelMetadata::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonModelMetadata.versions)
  return &versions_;
}

// string platform = 3;
inline void SeldonModelMetadata::clear_platform() {
  platform_.ClearToEmpty();
}
inline const std::string& SeldonModelMetadata::platform() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.platform)
  return _internal_platform();
}
inline void SeldonModelMetadata::set_platform(const std::string& value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonModelMetadata.platform)
}
inline std::string* SeldonModelMetadata::mutable_platform() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.platform)
  return _internal_mutable_platform();
}
inline const std::string& SeldonModelMetadata::_internal_platform() const {
  return platform_.Get();
}
inline void SeldonModelMetadata::_internal_set_platform(const std::string& value) {
  
  platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SeldonModelMetadata::set_platform(std::string&& value) {
  
  platform_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:seldon.protos.SeldonModelMetadata.platform)
}
inline void SeldonModelMetadata::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonModelMetadata.platform)
}
inline void SeldonModelMetadata::set_platform(const char* value,
    size_t size) {
  
  platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonModelMetadata.platform)
}
inline std::string* SeldonModelMetadata::_internal_mutable_platform() {
  
  return platform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SeldonModelMetadata::release_platform() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonModelMetadata.platform)
  return platform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SeldonModelMetadata::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonModelMetadata.platform)
}

// repeated .seldon.protos.SeldonMessageMetadata inputs = 4;
inline int SeldonModelMetadata::_internal_inputs_size() const {
  return inputs_.size();
}
inline int SeldonModelMetadata::inputs_size() const {
  return _internal_inputs_size();
}
inline void SeldonModelMetadata::clear_inputs() {
  inputs_.Clear();
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonModelMetadata::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
SeldonModelMetadata::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonModelMetadata.inputs)
  return &inputs_;
}
inline const ::seldon::protos::SeldonMessageMetadata& SeldonModelMetadata::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::seldon::protos::SeldonMessageMetadata& SeldonModelMetadata::inputs(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.inputs)
  return _internal_inputs(index);
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonModelMetadata::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonModelMetadata::add_inputs() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonModelMetadata.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
SeldonModelMetadata::inputs() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonModelMetadata.inputs)
  return inputs_;
}

// repeated .seldon.protos.SeldonMessageMetadata outputs = 5;
inline int SeldonModelMetadata::_internal_outputs_size() const {
  return outputs_.size();
}
inline int SeldonModelMetadata::outputs_size() const {
  return _internal_outputs_size();
}
inline void SeldonModelMetadata::clear_outputs() {
  outputs_.Clear();
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonModelMetadata::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
SeldonModelMetadata::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonModelMetadata.outputs)
  return &outputs_;
}
inline const ::seldon::protos::SeldonMessageMetadata& SeldonModelMetadata::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::seldon::protos::SeldonMessageMetadata& SeldonModelMetadata::outputs(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.outputs)
  return _internal_outputs(index);
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonModelMetadata::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonModelMetadata::add_outputs() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonModelMetadata.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
SeldonModelMetadata::outputs() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonModelMetadata.outputs)
  return outputs_;
}

// map<string, string> custom = 6;
inline int SeldonModelMetadata::_internal_custom_size() const {
  return custom_.size();
}
inline int SeldonModelMetadata::custom_size() const {
  return _internal_custom_size();
}
inline void SeldonModelMetadata::clear_custom() {
  custom_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SeldonModelMetadata::_internal_custom() const {
  return custom_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SeldonModelMetadata::custom() const {
  // @@protoc_insertion_point(field_map:seldon.protos.SeldonModelMetadata.custom)
  return _internal_custom();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SeldonModelMetadata::_internal_mutable_custom() {
  return custom_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SeldonModelMetadata::mutable_custom() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.SeldonModelMetadata.custom)
  return _internal_mutable_custom();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SeldonGraphMetadata

// string name = 1;
inline void SeldonGraphMetadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SeldonGraphMetadata::name() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonGraphMetadata.name)
  return _internal_name();
}
inline void SeldonGraphMetadata::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonGraphMetadata.name)
}
inline std::string* SeldonGraphMetadata::mutable_name() {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonGraphMetadata.name)
  return _internal_mutable_name();
}
inline const std::string& SeldonGraphMetadata::_internal_name() const {
  return name_.Get();
}
inline void SeldonGraphMetadata::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SeldonGraphMetadata::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:seldon.protos.SeldonGraphMetadata.name)
}
inline void SeldonGraphMetadata::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonGraphMetadata.name)
}
inline void SeldonGraphMetadata::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonGraphMetadata.name)
}
inline std::string* SeldonGraphMetadata::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SeldonGraphMetadata::release_name() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonGraphMetadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SeldonGraphMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonGraphMetadata.name)
}

// map<string, .seldon.protos.SeldonModelMetadata> models = 2;
inline int SeldonGraphMetadata::_internal_models_size() const {
  return models_.size();
}
inline int SeldonGraphMetadata::models_size() const {
  return _internal_models_size();
}
inline void SeldonGraphMetadata::clear_models() {
  models_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::seldon::protos::SeldonModelMetadata >&
SeldonGraphMetadata::_internal_models() const {
  return models_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::seldon::protos::SeldonModelMetadata >&
SeldonGraphMetadata::models() const {
  // @@protoc_insertion_point(field_map:seldon.protos.SeldonGraphMetadata.models)
  return _internal_models();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::seldon::protos::SeldonModelMetadata >*
SeldonGraphMetadata::_internal_mutable_models() {
  return models_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::seldon::protos::SeldonModelMetadata >*
SeldonGraphMetadata::mutable_models() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.SeldonGraphMetadata.models)
  return _internal_mutable_models();
}

// repeated .seldon.protos.SeldonMessageMetadata inputs = 3;
inline int SeldonGraphMetadata::_internal_inputs_size() const {
  return inputs_.size();
}
inline int SeldonGraphMetadata::inputs_size() const {
  return _internal_inputs_size();
}
inline void SeldonGraphMetadata::clear_inputs() {
  inputs_.Clear();
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonGraphMetadata::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonGraphMetadata.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
SeldonGraphMetadata::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonGraphMetadata.inputs)
  return &inputs_;
}
inline const ::seldon::protos::SeldonMessageMetadata& SeldonGraphMetadata::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::seldon::protos::SeldonMessageMetadata& SeldonGraphMetadata::inputs(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonGraphMetadata.inputs)
  return _internal_inputs(index);
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonGraphMetadata::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonGraphMetadata::add_inputs() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonGraphMetadata.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
SeldonGraphMetadata::inputs() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonGraphMetadata.inputs)
  return inputs_;
}

// repeated .seldon.protos.SeldonMessageMetadata outputs = 4;
inline int SeldonGraphMetadata::_internal_outputs_size() const {
  return outputs_.size();
}
inline int SeldonGraphMetadata::outputs_size() const {
  return _internal_outputs_size();
}
inline void SeldonGraphMetadata::clear_outputs() {
  outputs_.Clear();
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonGraphMetadata::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonGraphMetadata.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
SeldonGraphMetadata::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonGraphMetadata.outputs)
  return &outputs_;
}
inline const ::seldon::protos::SeldonMessageMetadata& SeldonGraphMetadata::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::seldon::protos::SeldonMessageMetadata& SeldonGraphMetadata::outputs(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonGraphMetadata.outputs)
  return _internal_outputs(index);
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonGraphMetadata::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonGraphMetadata::add_outputs() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonGraphMetadata.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
SeldonGraphMetadata::outputs() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonGraphMetadata.outputs)
  return outputs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace seldon

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::seldon::protos::Metric_MetricType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::seldon::protos::Metric_MetricType>() {
  return ::seldon::protos::Metric_MetricType_descriptor();
}
template <> struct is_proto_enum< ::seldon::protos::Status_StatusFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::seldon::protos::Status_StatusFlag>() {
  return ::seldon::protos::Status_StatusFlag_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_prediction_2eproto
