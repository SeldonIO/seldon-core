// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction.proto

#ifndef PROTOBUF_prediction_2eproto__INCLUDED
#define PROTOBUF_prediction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/empty.pb.h>
#include "tensorflow/core/framework/tensor.pb.h"
// @@protoc_insertion_point(includes)

namespace seldon {
namespace protos {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_prediction_2eproto();
void protobuf_AssignDesc_prediction_2eproto();
void protobuf_ShutdownFile_prediction_2eproto();

class DefaultData;
class Feedback;
class Meta;
class Metric;
class RequestResponse;
class SeldonGraphMetadata;
class SeldonMessage;
class SeldonMessageList;
class SeldonMessageMetadata;
class SeldonModelMetadata;
class SeldonModelMetadataRequest;
class Status;
class Tensor;

enum Metric_MetricType {
  Metric_MetricType_COUNTER = 0,
  Metric_MetricType_GAUGE = 1,
  Metric_MetricType_TIMER = 2,
  Metric_MetricType_Metric_MetricType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Metric_MetricType_Metric_MetricType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Metric_MetricType_IsValid(int value);
const Metric_MetricType Metric_MetricType_MetricType_MIN = Metric_MetricType_COUNTER;
const Metric_MetricType Metric_MetricType_MetricType_MAX = Metric_MetricType_TIMER;
const int Metric_MetricType_MetricType_ARRAYSIZE = Metric_MetricType_MetricType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Metric_MetricType_descriptor();
inline const ::std::string& Metric_MetricType_Name(Metric_MetricType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Metric_MetricType_descriptor(), value);
}
inline bool Metric_MetricType_Parse(
    const ::std::string& name, Metric_MetricType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Metric_MetricType>(
    Metric_MetricType_descriptor(), name, value);
}
enum Status_StatusFlag {
  Status_StatusFlag_SUCCESS = 0,
  Status_StatusFlag_FAILURE = 1,
  Status_StatusFlag_Status_StatusFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Status_StatusFlag_Status_StatusFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Status_StatusFlag_IsValid(int value);
const Status_StatusFlag Status_StatusFlag_StatusFlag_MIN = Status_StatusFlag_SUCCESS;
const Status_StatusFlag Status_StatusFlag_StatusFlag_MAX = Status_StatusFlag_FAILURE;
const int Status_StatusFlag_StatusFlag_ARRAYSIZE = Status_StatusFlag_StatusFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_StatusFlag_descriptor();
inline const ::std::string& Status_StatusFlag_Name(Status_StatusFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_StatusFlag_descriptor(), value);
}
inline bool Status_StatusFlag_Parse(
    const ::std::string& name, Status_StatusFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status_StatusFlag>(
    Status_StatusFlag_descriptor(), name, value);
}
// ===================================================================

class SeldonMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seldon.protos.SeldonMessage) */ {
 public:
  SeldonMessage();
  virtual ~SeldonMessage();

  SeldonMessage(const SeldonMessage& from);

  inline SeldonMessage& operator=(const SeldonMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeldonMessage& default_instance();

  enum DataOneofCase {
    kData = 3,
    kBinData = 4,
    kStrData = 5,
    kJsonData = 6,
    kCustomData = 7,
    DATA_ONEOF_NOT_SET = 0,
  };

  void Swap(SeldonMessage* other);

  // implements Message ----------------------------------------------

  inline SeldonMessage* New() const { return New(NULL); }

  SeldonMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeldonMessage& from);
  void MergeFrom(const SeldonMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeldonMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .seldon.protos.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::seldon::protos::Status& status() const;
  ::seldon::protos::Status* mutable_status();
  ::seldon::protos::Status* release_status();
  void set_allocated_status(::seldon::protos::Status* status);

  // optional .seldon.protos.Meta meta = 2;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 2;
  const ::seldon::protos::Meta& meta() const;
  ::seldon::protos::Meta* mutable_meta();
  ::seldon::protos::Meta* release_meta();
  void set_allocated_meta(::seldon::protos::Meta* meta);

  // optional .seldon.protos.DefaultData data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::seldon::protos::DefaultData& data() const;
  ::seldon::protos::DefaultData* mutable_data();
  ::seldon::protos::DefaultData* release_data();
  void set_allocated_data(::seldon::protos::DefaultData* data);

  // optional bytes binData = 4;
  private:
  bool has_bindata() const;
  public:
  void clear_bindata();
  static const int kBinDataFieldNumber = 4;
  const ::std::string& bindata() const;
  void set_bindata(const ::std::string& value);
  void set_bindata(const char* value);
  void set_bindata(const void* value, size_t size);
  ::std::string* mutable_bindata();
  ::std::string* release_bindata();
  void set_allocated_bindata(::std::string* bindata);

  // optional string strData = 5;
  private:
  bool has_strdata() const;
  public:
  void clear_strdata();
  static const int kStrDataFieldNumber = 5;
  const ::std::string& strdata() const;
  void set_strdata(const ::std::string& value);
  void set_strdata(const char* value);
  void set_strdata(const char* value, size_t size);
  ::std::string* mutable_strdata();
  ::std::string* release_strdata();
  void set_allocated_strdata(::std::string* strdata);

  // optional .google.protobuf.Value jsonData = 6;
  bool has_jsondata() const;
  void clear_jsondata();
  static const int kJsonDataFieldNumber = 6;
  const ::google::protobuf::Value& jsondata() const;
  ::google::protobuf::Value* mutable_jsondata();
  ::google::protobuf::Value* release_jsondata();
  void set_allocated_jsondata(::google::protobuf::Value* jsondata);

  // optional .google.protobuf.Any customData = 7;
  bool has_customdata() const;
  void clear_customdata();
  static const int kCustomDataFieldNumber = 7;
  const ::google::protobuf::Any& customdata() const;
  ::google::protobuf::Any* mutable_customdata();
  ::google::protobuf::Any* release_customdata();
  void set_allocated_customdata(::google::protobuf::Any* customdata);

  DataOneofCase data_oneof_case() const;
  // @@protoc_insertion_point(class_scope:seldon.protos.SeldonMessage)
 private:
  inline void set_has_data();
  inline void set_has_bindata();
  inline void set_has_strdata();
  inline void set_has_jsondata();
  inline void set_has_customdata();

  inline bool has_data_oneof() const;
  void clear_data_oneof();
  inline void clear_has_data_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::seldon::protos::Status* status_;
  ::seldon::protos::Meta* meta_;
  union DataOneofUnion {
    DataOneofUnion() {}
    ::seldon::protos::DefaultData* data_;
    ::google::protobuf::internal::ArenaStringPtr bindata_;
    ::google::protobuf::internal::ArenaStringPtr strdata_;
    ::google::protobuf::Value* jsondata_;
    ::google::protobuf::Any* customdata_;
  } data_oneof_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_prediction_2eproto();
  friend void protobuf_AssignDesc_prediction_2eproto();
  friend void protobuf_ShutdownFile_prediction_2eproto();

  void InitAsDefaultInstance();
  static SeldonMessage* default_instance_;
};
// -------------------------------------------------------------------

class DefaultData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seldon.protos.DefaultData) */ {
 public:
  DefaultData();
  virtual ~DefaultData();

  DefaultData(const DefaultData& from);

  inline DefaultData& operator=(const DefaultData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DefaultData& default_instance();

  enum DataOneofCase {
    kTensor = 2,
    kNdarray = 3,
    kTftensor = 4,
    DATA_ONEOF_NOT_SET = 0,
  };

  void Swap(DefaultData* other);

  // implements Message ----------------------------------------------

  inline DefaultData* New() const { return New(NULL); }

  DefaultData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DefaultData& from);
  void MergeFrom(const DefaultData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DefaultData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string names = 1;
  int names_size() const;
  void clear_names();
  static const int kNamesFieldNumber = 1;
  const ::std::string& names(int index) const;
  ::std::string* mutable_names(int index);
  void set_names(int index, const ::std::string& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  ::std::string* add_names();
  void add_names(const ::std::string& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // optional .seldon.protos.Tensor tensor = 2;
  bool has_tensor() const;
  void clear_tensor();
  static const int kTensorFieldNumber = 2;
  const ::seldon::protos::Tensor& tensor() const;
  ::seldon::protos::Tensor* mutable_tensor();
  ::seldon::protos::Tensor* release_tensor();
  void set_allocated_tensor(::seldon::protos::Tensor* tensor);

  // optional .google.protobuf.ListValue ndarray = 3;
  bool has_ndarray() const;
  void clear_ndarray();
  static const int kNdarrayFieldNumber = 3;
  const ::google::protobuf::ListValue& ndarray() const;
  ::google::protobuf::ListValue* mutable_ndarray();
  ::google::protobuf::ListValue* release_ndarray();
  void set_allocated_ndarray(::google::protobuf::ListValue* ndarray);

  // optional .tensorflow.TensorProto tftensor = 4;
  bool has_tftensor() const;
  void clear_tftensor();
  static const int kTftensorFieldNumber = 4;
  const ::tensorflow::TensorProto& tftensor() const;
  ::tensorflow::TensorProto* mutable_tftensor();
  ::tensorflow::TensorProto* release_tftensor();
  void set_allocated_tftensor(::tensorflow::TensorProto* tftensor);

  DataOneofCase data_oneof_case() const;
  // @@protoc_insertion_point(class_scope:seldon.protos.DefaultData)
 private:
  inline void set_has_tensor();
  inline void set_has_ndarray();
  inline void set_has_tftensor();

  inline bool has_data_oneof() const;
  void clear_data_oneof();
  inline void clear_has_data_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  union DataOneofUnion {
    DataOneofUnion() {}
    ::seldon::protos::Tensor* tensor_;
    ::google::protobuf::ListValue* ndarray_;
    ::tensorflow::TensorProto* tftensor_;
  } data_oneof_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_prediction_2eproto();
  friend void protobuf_AssignDesc_prediction_2eproto();
  friend void protobuf_ShutdownFile_prediction_2eproto();

  void InitAsDefaultInstance();
  static DefaultData* default_instance_;
};
// -------------------------------------------------------------------

class Tensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seldon.protos.Tensor) */ {
 public:
  Tensor();
  virtual ~Tensor();

  Tensor(const Tensor& from);

  inline Tensor& operator=(const Tensor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tensor& default_instance();

  void Swap(Tensor* other);

  // implements Message ----------------------------------------------

  inline Tensor* New() const { return New(NULL); }

  Tensor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tensor& from);
  void MergeFrom(const Tensor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Tensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 shape = 1 [packed = true];
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  ::google::protobuf::int32 shape(int index) const;
  void set_shape(int index, ::google::protobuf::int32 value);
  void add_shape(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // repeated double values = 2 [packed = true];
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::google::protobuf::RepeatedField< double >&
      values() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:seldon.protos.Tensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  mutable int _shape_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > values_;
  mutable int _values_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_prediction_2eproto();
  friend void protobuf_AssignDesc_prediction_2eproto();
  friend void protobuf_ShutdownFile_prediction_2eproto();

  void InitAsDefaultInstance();
  static Tensor* default_instance_;
};
// -------------------------------------------------------------------

class Meta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seldon.protos.Meta) */ {
 public:
  Meta();
  virtual ~Meta();

  Meta(const Meta& from);

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Meta& default_instance();

  void Swap(Meta* other);

  // implements Message ----------------------------------------------

  inline Meta* New() const { return New(NULL); }

  Meta* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Meta& from);
  void MergeFrom(const Meta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Meta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string puid = 1;
  void clear_puid();
  static const int kPuidFieldNumber = 1;
  const ::std::string& puid() const;
  void set_puid(const ::std::string& value);
  void set_puid(const char* value);
  void set_puid(const char* value, size_t size);
  ::std::string* mutable_puid();
  ::std::string* release_puid();
  void set_allocated_puid(::std::string* puid);

  // map<string, .google.protobuf.Value> tags = 2;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::Value >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::Value >*
      mutable_tags();

  // map<string, int32> routing = 3;
  int routing_size() const;
  void clear_routing();
  static const int kRoutingFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      routing() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_routing();

  // map<string, string> requestPath = 4;
  int requestpath_size() const;
  void clear_requestpath();
  static const int kRequestPathFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      requestpath() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_requestpath();

  // repeated .seldon.protos.Metric metrics = 5;
  int metrics_size() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 5;
  const ::seldon::protos::Metric& metrics(int index) const;
  ::seldon::protos::Metric* mutable_metrics(int index);
  ::seldon::protos::Metric* add_metrics();
  ::google::protobuf::RepeatedPtrField< ::seldon::protos::Metric >*
      mutable_metrics();
  const ::google::protobuf::RepeatedPtrField< ::seldon::protos::Metric >&
      metrics() const;

  // @@protoc_insertion_point(class_scope:seldon.protos.Meta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr puid_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::google::protobuf::Value,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      Meta_TagsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::google::protobuf::Value,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > tags_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 >
      Meta_RoutingEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > routing_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Meta_RequestPathEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > requestpath_;
  ::google::protobuf::RepeatedPtrField< ::seldon::protos::Metric > metrics_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_prediction_2eproto();
  friend void protobuf_AssignDesc_prediction_2eproto();
  friend void protobuf_ShutdownFile_prediction_2eproto();

  void InitAsDefaultInstance();
  static Meta* default_instance_;
};
// -------------------------------------------------------------------

class Metric : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seldon.protos.Metric) */ {
 public:
  Metric();
  virtual ~Metric();

  Metric(const Metric& from);

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metric& default_instance();

  void Swap(Metric* other);

  // implements Message ----------------------------------------------

  inline Metric* New() const { return New(NULL); }

  Metric* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Metric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  typedef Metric_MetricType MetricType;
  static const MetricType COUNTER =
    Metric_MetricType_COUNTER;
  static const MetricType GAUGE =
    Metric_MetricType_GAUGE;
  static const MetricType TIMER =
    Metric_MetricType_TIMER;
  static inline bool MetricType_IsValid(int value) {
    return Metric_MetricType_IsValid(value);
  }
  static const MetricType MetricType_MIN =
    Metric_MetricType_MetricType_MIN;
  static const MetricType MetricType_MAX =
    Metric_MetricType_MetricType_MAX;
  static const int MetricType_ARRAYSIZE =
    Metric_MetricType_MetricType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MetricType_descriptor() {
    return Metric_MetricType_descriptor();
  }
  static inline const ::std::string& MetricType_Name(MetricType value) {
    return Metric_MetricType_Name(value);
  }
  static inline bool MetricType_Parse(const ::std::string& name,
      MetricType* value) {
    return Metric_MetricType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional .seldon.protos.Metric.MetricType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::seldon::protos::Metric_MetricType type() const;
  void set_type(::seldon::protos::Metric_MetricType value);

  // optional float value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  float value() const;
  void set_value(float value);

  // map<string, string> tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      tags() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_tags();

  // @@protoc_insertion_point(class_scope:seldon.protos.Metric)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  int type_;
  float value_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Metric_TagsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > tags_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_prediction_2eproto();
  friend void protobuf_AssignDesc_prediction_2eproto();
  friend void protobuf_ShutdownFile_prediction_2eproto();

  void InitAsDefaultInstance();
  static Metric* default_instance_;
};
// -------------------------------------------------------------------

class SeldonMessageList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seldon.protos.SeldonMessageList) */ {
 public:
  SeldonMessageList();
  virtual ~SeldonMessageList();

  SeldonMessageList(const SeldonMessageList& from);

  inline SeldonMessageList& operator=(const SeldonMessageList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeldonMessageList& default_instance();

  void Swap(SeldonMessageList* other);

  // implements Message ----------------------------------------------

  inline SeldonMessageList* New() const { return New(NULL); }

  SeldonMessageList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeldonMessageList& from);
  void MergeFrom(const SeldonMessageList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeldonMessageList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .seldon.protos.SeldonMessage seldonMessages = 1;
  int seldonmessages_size() const;
  void clear_seldonmessages();
  static const int kSeldonMessagesFieldNumber = 1;
  const ::seldon::protos::SeldonMessage& seldonmessages(int index) const;
  ::seldon::protos::SeldonMessage* mutable_seldonmessages(int index);
  ::seldon::protos::SeldonMessage* add_seldonmessages();
  ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessage >*
      mutable_seldonmessages();
  const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessage >&
      seldonmessages() const;

  // @@protoc_insertion_point(class_scope:seldon.protos.SeldonMessageList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessage > seldonmessages_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_prediction_2eproto();
  friend void protobuf_AssignDesc_prediction_2eproto();
  friend void protobuf_ShutdownFile_prediction_2eproto();

  void InitAsDefaultInstance();
  static SeldonMessageList* default_instance_;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seldon.protos.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  inline Status* New() const { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Status_StatusFlag StatusFlag;
  static const StatusFlag SUCCESS =
    Status_StatusFlag_SUCCESS;
  static const StatusFlag FAILURE =
    Status_StatusFlag_FAILURE;
  static inline bool StatusFlag_IsValid(int value) {
    return Status_StatusFlag_IsValid(value);
  }
  static const StatusFlag StatusFlag_MIN =
    Status_StatusFlag_StatusFlag_MIN;
  static const StatusFlag StatusFlag_MAX =
    Status_StatusFlag_StatusFlag_MAX;
  static const int StatusFlag_ARRAYSIZE =
    Status_StatusFlag_StatusFlag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StatusFlag_descriptor() {
    return Status_StatusFlag_descriptor();
  }
  static inline const ::std::string& StatusFlag_Name(StatusFlag value) {
    return Status_StatusFlag_Name(value);
  }
  static inline bool StatusFlag_Parse(const ::std::string& name,
      StatusFlag* value) {
    return Status_StatusFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional string info = 2;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // optional string reason = 3;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional .seldon.protos.Status.StatusFlag status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::seldon::protos::Status_StatusFlag status() const;
  void set_status(::seldon::protos::Status_StatusFlag value);

  // @@protoc_insertion_point(class_scope:seldon.protos.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::int32 code_;
  int status_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_prediction_2eproto();
  friend void protobuf_AssignDesc_prediction_2eproto();
  friend void protobuf_ShutdownFile_prediction_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class Feedback : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seldon.protos.Feedback) */ {
 public:
  Feedback();
  virtual ~Feedback();

  Feedback(const Feedback& from);

  inline Feedback& operator=(const Feedback& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Feedback& default_instance();

  void Swap(Feedback* other);

  // implements Message ----------------------------------------------

  inline Feedback* New() const { return New(NULL); }

  Feedback* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Feedback& from);
  void MergeFrom(const Feedback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Feedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .seldon.protos.SeldonMessage request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::seldon::protos::SeldonMessage& request() const;
  ::seldon::protos::SeldonMessage* mutable_request();
  ::seldon::protos::SeldonMessage* release_request();
  void set_allocated_request(::seldon::protos::SeldonMessage* request);

  // optional .seldon.protos.SeldonMessage response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  const ::seldon::protos::SeldonMessage& response() const;
  ::seldon::protos::SeldonMessage* mutable_response();
  ::seldon::protos::SeldonMessage* release_response();
  void set_allocated_response(::seldon::protos::SeldonMessage* response);

  // optional float reward = 3;
  void clear_reward();
  static const int kRewardFieldNumber = 3;
  float reward() const;
  void set_reward(float value);

  // optional .seldon.protos.SeldonMessage truth = 4;
  bool has_truth() const;
  void clear_truth();
  static const int kTruthFieldNumber = 4;
  const ::seldon::protos::SeldonMessage& truth() const;
  ::seldon::protos::SeldonMessage* mutable_truth();
  ::seldon::protos::SeldonMessage* release_truth();
  void set_allocated_truth(::seldon::protos::SeldonMessage* truth);

  // @@protoc_insertion_point(class_scope:seldon.protos.Feedback)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::seldon::protos::SeldonMessage* request_;
  ::seldon::protos::SeldonMessage* response_;
  ::seldon::protos::SeldonMessage* truth_;
  float reward_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_prediction_2eproto();
  friend void protobuf_AssignDesc_prediction_2eproto();
  friend void protobuf_ShutdownFile_prediction_2eproto();

  void InitAsDefaultInstance();
  static Feedback* default_instance_;
};
// -------------------------------------------------------------------

class RequestResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seldon.protos.RequestResponse) */ {
 public:
  RequestResponse();
  virtual ~RequestResponse();

  RequestResponse(const RequestResponse& from);

  inline RequestResponse& operator=(const RequestResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestResponse& default_instance();

  void Swap(RequestResponse* other);

  // implements Message ----------------------------------------------

  inline RequestResponse* New() const { return New(NULL); }

  RequestResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestResponse& from);
  void MergeFrom(const RequestResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .seldon.protos.SeldonMessage request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::seldon::protos::SeldonMessage& request() const;
  ::seldon::protos::SeldonMessage* mutable_request();
  ::seldon::protos::SeldonMessage* release_request();
  void set_allocated_request(::seldon::protos::SeldonMessage* request);

  // optional .seldon.protos.SeldonMessage response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  const ::seldon::protos::SeldonMessage& response() const;
  ::seldon::protos::SeldonMessage* mutable_response();
  ::seldon::protos::SeldonMessage* release_response();
  void set_allocated_response(::seldon::protos::SeldonMessage* response);

  // @@protoc_insertion_point(class_scope:seldon.protos.RequestResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::seldon::protos::SeldonMessage* request_;
  ::seldon::protos::SeldonMessage* response_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_prediction_2eproto();
  friend void protobuf_AssignDesc_prediction_2eproto();
  friend void protobuf_ShutdownFile_prediction_2eproto();

  void InitAsDefaultInstance();
  static RequestResponse* default_instance_;
};
// -------------------------------------------------------------------

class SeldonModelMetadataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seldon.protos.SeldonModelMetadataRequest) */ {
 public:
  SeldonModelMetadataRequest();
  virtual ~SeldonModelMetadataRequest();

  SeldonModelMetadataRequest(const SeldonModelMetadataRequest& from);

  inline SeldonModelMetadataRequest& operator=(const SeldonModelMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeldonModelMetadataRequest& default_instance();

  void Swap(SeldonModelMetadataRequest* other);

  // implements Message ----------------------------------------------

  inline SeldonModelMetadataRequest* New() const { return New(NULL); }

  SeldonModelMetadataRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeldonModelMetadataRequest& from);
  void MergeFrom(const SeldonModelMetadataRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeldonModelMetadataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:seldon.protos.SeldonModelMetadataRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_prediction_2eproto();
  friend void protobuf_AssignDesc_prediction_2eproto();
  friend void protobuf_ShutdownFile_prediction_2eproto();

  void InitAsDefaultInstance();
  static SeldonModelMetadataRequest* default_instance_;
};
// -------------------------------------------------------------------

class SeldonMessageMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seldon.protos.SeldonMessageMetadata) */ {
 public:
  SeldonMessageMetadata();
  virtual ~SeldonMessageMetadata();

  SeldonMessageMetadata(const SeldonMessageMetadata& from);

  inline SeldonMessageMetadata& operator=(const SeldonMessageMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeldonMessageMetadata& default_instance();

  void Swap(SeldonMessageMetadata* other);

  // implements Message ----------------------------------------------

  inline SeldonMessageMetadata* New() const { return New(NULL); }

  SeldonMessageMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeldonMessageMetadata& from);
  void MergeFrom(const SeldonMessageMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeldonMessageMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string messagetype = 1;
  void clear_messagetype();
  static const int kMessagetypeFieldNumber = 1;
  const ::std::string& messagetype() const;
  void set_messagetype(const ::std::string& value);
  void set_messagetype(const char* value);
  void set_messagetype(const char* value, size_t size);
  ::std::string* mutable_messagetype();
  ::std::string* release_messagetype();
  void set_allocated_messagetype(::std::string* messagetype);

  // optional .google.protobuf.Value schema = 2;
  bool has_schema() const;
  void clear_schema();
  static const int kSchemaFieldNumber = 2;
  const ::google::protobuf::Value& schema() const;
  ::google::protobuf::Value* mutable_schema();
  ::google::protobuf::Value* release_schema();
  void set_allocated_schema(::google::protobuf::Value* schema);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string datatype = 4;
  void clear_datatype();
  static const int kDatatypeFieldNumber = 4;
  const ::std::string& datatype() const;
  void set_datatype(const ::std::string& value);
  void set_datatype(const char* value);
  void set_datatype(const char* value, size_t size);
  ::std::string* mutable_datatype();
  ::std::string* release_datatype();
  void set_allocated_datatype(::std::string* datatype);

  // repeated int64 shape = 5;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 5;
  ::google::protobuf::int64 shape(int index) const;
  void set_shape(int index, ::google::protobuf::int64 value);
  void add_shape(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_shape();

  // @@protoc_insertion_point(class_scope:seldon.protos.SeldonMessageMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr messagetype_;
  ::google::protobuf::Value* schema_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr datatype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > shape_;
  mutable int _shape_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_prediction_2eproto();
  friend void protobuf_AssignDesc_prediction_2eproto();
  friend void protobuf_ShutdownFile_prediction_2eproto();

  void InitAsDefaultInstance();
  static SeldonMessageMetadata* default_instance_;
};
// -------------------------------------------------------------------

class SeldonModelMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seldon.protos.SeldonModelMetadata) */ {
 public:
  SeldonModelMetadata();
  virtual ~SeldonModelMetadata();

  SeldonModelMetadata(const SeldonModelMetadata& from);

  inline SeldonModelMetadata& operator=(const SeldonModelMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeldonModelMetadata& default_instance();

  void Swap(SeldonModelMetadata* other);

  // implements Message ----------------------------------------------

  inline SeldonModelMetadata* New() const { return New(NULL); }

  SeldonModelMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeldonModelMetadata& from);
  void MergeFrom(const SeldonModelMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeldonModelMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated string versions = 2;
  int versions_size() const;
  void clear_versions();
  static const int kVersionsFieldNumber = 2;
  const ::std::string& versions(int index) const;
  ::std::string* mutable_versions(int index);
  void set_versions(int index, const ::std::string& value);
  void set_versions(int index, const char* value);
  void set_versions(int index, const char* value, size_t size);
  ::std::string* add_versions();
  void add_versions(const ::std::string& value);
  void add_versions(const char* value);
  void add_versions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& versions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_versions();

  // optional string platform = 3;
  void clear_platform();
  static const int kPlatformFieldNumber = 3;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // repeated .seldon.protos.SeldonMessageMetadata inputs = 4;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 4;
  const ::seldon::protos::SeldonMessageMetadata& inputs(int index) const;
  ::seldon::protos::SeldonMessageMetadata* mutable_inputs(int index);
  ::seldon::protos::SeldonMessageMetadata* add_inputs();
  ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
      mutable_inputs();
  const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
      inputs() const;

  // repeated .seldon.protos.SeldonMessageMetadata outputs = 5;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 5;
  const ::seldon::protos::SeldonMessageMetadata& outputs(int index) const;
  ::seldon::protos::SeldonMessageMetadata* mutable_outputs(int index);
  ::seldon::protos::SeldonMessageMetadata* add_outputs();
  ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
      mutable_outputs();
  const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
      outputs() const;

  // map<string, string> custom = 6;
  int custom_size() const;
  void clear_custom();
  static const int kCustomFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      custom() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_custom();

  // @@protoc_insertion_point(class_scope:seldon.protos.SeldonModelMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> versions_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata > inputs_;
  ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata > outputs_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      SeldonModelMetadata_CustomEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > custom_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_prediction_2eproto();
  friend void protobuf_AssignDesc_prediction_2eproto();
  friend void protobuf_ShutdownFile_prediction_2eproto();

  void InitAsDefaultInstance();
  static SeldonModelMetadata* default_instance_;
};
// -------------------------------------------------------------------

class SeldonGraphMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seldon.protos.SeldonGraphMetadata) */ {
 public:
  SeldonGraphMetadata();
  virtual ~SeldonGraphMetadata();

  SeldonGraphMetadata(const SeldonGraphMetadata& from);

  inline SeldonGraphMetadata& operator=(const SeldonGraphMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeldonGraphMetadata& default_instance();

  void Swap(SeldonGraphMetadata* other);

  // implements Message ----------------------------------------------

  inline SeldonGraphMetadata* New() const { return New(NULL); }

  SeldonGraphMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeldonGraphMetadata& from);
  void MergeFrom(const SeldonGraphMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeldonGraphMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // map<string, .seldon.protos.SeldonModelMetadata> models = 2;
  int models_size() const;
  void clear_models();
  static const int kModelsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >&
      models() const;
  ::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >*
      mutable_models();

  // repeated .seldon.protos.SeldonMessageMetadata inputs = 3;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 3;
  const ::seldon::protos::SeldonMessageMetadata& inputs(int index) const;
  ::seldon::protos::SeldonMessageMetadata* mutable_inputs(int index);
  ::seldon::protos::SeldonMessageMetadata* add_inputs();
  ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
      mutable_inputs();
  const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
      inputs() const;

  // repeated .seldon.protos.SeldonMessageMetadata outputs = 4;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 4;
  const ::seldon::protos::SeldonMessageMetadata& outputs(int index) const;
  ::seldon::protos::SeldonMessageMetadata* mutable_outputs(int index);
  ::seldon::protos::SeldonMessageMetadata* add_outputs();
  ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
      mutable_outputs();
  const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
      outputs() const;

  // @@protoc_insertion_point(class_scope:seldon.protos.SeldonGraphMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::seldon::protos::SeldonModelMetadata,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      SeldonGraphMetadata_ModelsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::seldon::protos::SeldonModelMetadata,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > models_;
  ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata > inputs_;
  ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata > outputs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_prediction_2eproto();
  friend void protobuf_AssignDesc_prediction_2eproto();
  friend void protobuf_ShutdownFile_prediction_2eproto();

  void InitAsDefaultInstance();
  static SeldonGraphMetadata* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SeldonMessage

// optional .seldon.protos.Status status = 1;
inline bool SeldonMessage::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void SeldonMessage::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::seldon::protos::Status& SeldonMessage::status() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::seldon::protos::Status* SeldonMessage::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::seldon::protos::Status;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.status)
  return status_;
}
inline ::seldon::protos::Status* SeldonMessage::release_status() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.status)
  
  ::seldon::protos::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void SeldonMessage::set_allocated_status(::seldon::protos::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.status)
}

// optional .seldon.protos.Meta meta = 2;
inline bool SeldonMessage::has_meta() const {
  return !_is_default_instance_ && meta_ != NULL;
}
inline void SeldonMessage::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
inline const ::seldon::protos::Meta& SeldonMessage::meta() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.meta)
  return meta_ != NULL ? *meta_ : *default_instance_->meta_;
}
inline ::seldon::protos::Meta* SeldonMessage::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::seldon::protos::Meta;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.meta)
  return meta_;
}
inline ::seldon::protos::Meta* SeldonMessage::release_meta() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.meta)
  
  ::seldon::protos::Meta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline void SeldonMessage::set_allocated_meta(::seldon::protos::Meta* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.meta)
}

// optional .seldon.protos.DefaultData data = 3;
inline bool SeldonMessage::has_data() const {
  return data_oneof_case() == kData;
}
inline void SeldonMessage::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void SeldonMessage::clear_data() {
  if (has_data()) {
    delete data_oneof_.data_;
    clear_has_data_oneof();
  }
}
inline  const ::seldon::protos::DefaultData& SeldonMessage::data() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.data)
  return has_data()
      ? *data_oneof_.data_
      : ::seldon::protos::DefaultData::default_instance();
}
inline ::seldon::protos::DefaultData* SeldonMessage::mutable_data() {
  if (!has_data()) {
    clear_data_oneof();
    set_has_data();
    data_oneof_.data_ = new ::seldon::protos::DefaultData;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.data)
  return data_oneof_.data_;
}
inline ::seldon::protos::DefaultData* SeldonMessage::release_data() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.data)
  if (has_data()) {
    clear_has_data_oneof();
    ::seldon::protos::DefaultData* temp = data_oneof_.data_;
    data_oneof_.data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SeldonMessage::set_allocated_data(::seldon::protos::DefaultData* data) {
  clear_data_oneof();
  if (data) {
    set_has_data();
    data_oneof_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.data)
}

// optional bytes binData = 4;
inline bool SeldonMessage::has_bindata() const {
  return data_oneof_case() == kBinData;
}
inline void SeldonMessage::set_has_bindata() {
  _oneof_case_[0] = kBinData;
}
inline void SeldonMessage::clear_bindata() {
  if (has_bindata()) {
    data_oneof_.bindata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data_oneof();
  }
}
inline const ::std::string& SeldonMessage::bindata() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.binData)
  if (has_bindata()) {
    return data_oneof_.bindata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SeldonMessage::set_bindata(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessage.binData)
  if (!has_bindata()) {
    clear_data_oneof();
    set_has_bindata();
    data_oneof_.bindata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessage.binData)
}
inline void SeldonMessage::set_bindata(const char* value) {
  if (!has_bindata()) {
    clear_data_oneof();
    set_has_bindata();
    data_oneof_.bindata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessage.binData)
}
inline void SeldonMessage::set_bindata(const void* value, size_t size) {
  if (!has_bindata()) {
    clear_data_oneof();
    set_has_bindata();
    data_oneof_.bindata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.bindata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessage.binData)
}
inline ::std::string* SeldonMessage::mutable_bindata() {
  if (!has_bindata()) {
    clear_data_oneof();
    set_has_bindata();
    data_oneof_.bindata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.binData)
  return data_oneof_.bindata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeldonMessage::release_bindata() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.binData)
  if (has_bindata()) {
    clear_has_data_oneof();
    return data_oneof_.bindata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void SeldonMessage::set_allocated_bindata(::std::string* bindata) {
  if (!has_bindata()) {
    data_oneof_.bindata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_oneof();
  if (bindata != NULL) {
    set_has_bindata();
    data_oneof_.bindata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        bindata);
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.binData)
}

// optional string strData = 5;
inline bool SeldonMessage::has_strdata() const {
  return data_oneof_case() == kStrData;
}
inline void SeldonMessage::set_has_strdata() {
  _oneof_case_[0] = kStrData;
}
inline void SeldonMessage::clear_strdata() {
  if (has_strdata()) {
    data_oneof_.strdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data_oneof();
  }
}
inline const ::std::string& SeldonMessage::strdata() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.strData)
  if (has_strdata()) {
    return data_oneof_.strdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SeldonMessage::set_strdata(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessage.strData)
  if (!has_strdata()) {
    clear_data_oneof();
    set_has_strdata();
    data_oneof_.strdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.strdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessage.strData)
}
inline void SeldonMessage::set_strdata(const char* value) {
  if (!has_strdata()) {
    clear_data_oneof();
    set_has_strdata();
    data_oneof_.strdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.strdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessage.strData)
}
inline void SeldonMessage::set_strdata(const char* value, size_t size) {
  if (!has_strdata()) {
    clear_data_oneof();
    set_has_strdata();
    data_oneof_.strdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_oneof_.strdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessage.strData)
}
inline ::std::string* SeldonMessage::mutable_strdata() {
  if (!has_strdata()) {
    clear_data_oneof();
    set_has_strdata();
    data_oneof_.strdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.strData)
  return data_oneof_.strdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeldonMessage::release_strdata() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.strData)
  if (has_strdata()) {
    clear_has_data_oneof();
    return data_oneof_.strdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void SeldonMessage::set_allocated_strdata(::std::string* strdata) {
  if (!has_strdata()) {
    data_oneof_.strdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data_oneof();
  if (strdata != NULL) {
    set_has_strdata();
    data_oneof_.strdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        strdata);
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.strData)
}

// optional .google.protobuf.Value jsonData = 6;
inline bool SeldonMessage::has_jsondata() const {
  return data_oneof_case() == kJsonData;
}
inline void SeldonMessage::set_has_jsondata() {
  _oneof_case_[0] = kJsonData;
}
inline void SeldonMessage::clear_jsondata() {
  if (has_jsondata()) {
    delete data_oneof_.jsondata_;
    clear_has_data_oneof();
  }
}
inline  const ::google::protobuf::Value& SeldonMessage::jsondata() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.jsonData)
  return has_jsondata()
      ? *data_oneof_.jsondata_
      : ::google::protobuf::Value::default_instance();
}
inline ::google::protobuf::Value* SeldonMessage::mutable_jsondata() {
  if (!has_jsondata()) {
    clear_data_oneof();
    set_has_jsondata();
    data_oneof_.jsondata_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.jsonData)
  return data_oneof_.jsondata_;
}
inline ::google::protobuf::Value* SeldonMessage::release_jsondata() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.jsonData)
  if (has_jsondata()) {
    clear_has_data_oneof();
    ::google::protobuf::Value* temp = data_oneof_.jsondata_;
    data_oneof_.jsondata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SeldonMessage::set_allocated_jsondata(::google::protobuf::Value* jsondata) {
  clear_data_oneof();
  if (jsondata) {
    set_has_jsondata();
    data_oneof_.jsondata_ = jsondata;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.jsonData)
}

// optional .google.protobuf.Any customData = 7;
inline bool SeldonMessage::has_customdata() const {
  return data_oneof_case() == kCustomData;
}
inline void SeldonMessage::set_has_customdata() {
  _oneof_case_[0] = kCustomData;
}
inline void SeldonMessage::clear_customdata() {
  if (has_customdata()) {
    delete data_oneof_.customdata_;
    clear_has_data_oneof();
  }
}
inline  const ::google::protobuf::Any& SeldonMessage::customdata() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessage.customData)
  return has_customdata()
      ? *data_oneof_.customdata_
      : ::google::protobuf::Any::default_instance();
}
inline ::google::protobuf::Any* SeldonMessage::mutable_customdata() {
  if (!has_customdata()) {
    clear_data_oneof();
    set_has_customdata();
    data_oneof_.customdata_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessage.customData)
  return data_oneof_.customdata_;
}
inline ::google::protobuf::Any* SeldonMessage::release_customdata() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessage.customData)
  if (has_customdata()) {
    clear_has_data_oneof();
    ::google::protobuf::Any* temp = data_oneof_.customdata_;
    data_oneof_.customdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SeldonMessage::set_allocated_customdata(::google::protobuf::Any* customdata) {
  clear_data_oneof();
  if (customdata) {
    set_has_customdata();
    data_oneof_.customdata_ = customdata;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessage.customData)
}

inline bool SeldonMessage::has_data_oneof() const {
  return data_oneof_case() != DATA_ONEOF_NOT_SET;
}
inline void SeldonMessage::clear_has_data_oneof() {
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}
inline SeldonMessage::DataOneofCase SeldonMessage::data_oneof_case() const {
  return SeldonMessage::DataOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DefaultData

// repeated string names = 1;
inline int DefaultData::names_size() const {
  return names_.size();
}
inline void DefaultData::clear_names() {
  names_.Clear();
}
inline const ::std::string& DefaultData::names(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.DefaultData.names)
  return names_.Get(index);
}
inline ::std::string* DefaultData::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.DefaultData.names)
  return names_.Mutable(index);
}
inline void DefaultData::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:seldon.protos.DefaultData.names)
  names_.Mutable(index)->assign(value);
}
inline void DefaultData::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:seldon.protos.DefaultData.names)
}
inline void DefaultData::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.DefaultData.names)
}
inline ::std::string* DefaultData::add_names() {
  // @@protoc_insertion_point(field_add_mutable:seldon.protos.DefaultData.names)
  return names_.Add();
}
inline void DefaultData::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:seldon.protos.DefaultData.names)
}
inline void DefaultData::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:seldon.protos.DefaultData.names)
}
inline void DefaultData::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:seldon.protos.DefaultData.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DefaultData::names() const {
  // @@protoc_insertion_point(field_list:seldon.protos.DefaultData.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DefaultData::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.DefaultData.names)
  return &names_;
}

// optional .seldon.protos.Tensor tensor = 2;
inline bool DefaultData::has_tensor() const {
  return data_oneof_case() == kTensor;
}
inline void DefaultData::set_has_tensor() {
  _oneof_case_[0] = kTensor;
}
inline void DefaultData::clear_tensor() {
  if (has_tensor()) {
    delete data_oneof_.tensor_;
    clear_has_data_oneof();
  }
}
inline  const ::seldon::protos::Tensor& DefaultData::tensor() const {
  // @@protoc_insertion_point(field_get:seldon.protos.DefaultData.tensor)
  return has_tensor()
      ? *data_oneof_.tensor_
      : ::seldon::protos::Tensor::default_instance();
}
inline ::seldon::protos::Tensor* DefaultData::mutable_tensor() {
  if (!has_tensor()) {
    clear_data_oneof();
    set_has_tensor();
    data_oneof_.tensor_ = new ::seldon::protos::Tensor;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.DefaultData.tensor)
  return data_oneof_.tensor_;
}
inline ::seldon::protos::Tensor* DefaultData::release_tensor() {
  // @@protoc_insertion_point(field_release:seldon.protos.DefaultData.tensor)
  if (has_tensor()) {
    clear_has_data_oneof();
    ::seldon::protos::Tensor* temp = data_oneof_.tensor_;
    data_oneof_.tensor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DefaultData::set_allocated_tensor(::seldon::protos::Tensor* tensor) {
  clear_data_oneof();
  if (tensor) {
    set_has_tensor();
    data_oneof_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.DefaultData.tensor)
}

// optional .google.protobuf.ListValue ndarray = 3;
inline bool DefaultData::has_ndarray() const {
  return data_oneof_case() == kNdarray;
}
inline void DefaultData::set_has_ndarray() {
  _oneof_case_[0] = kNdarray;
}
inline void DefaultData::clear_ndarray() {
  if (has_ndarray()) {
    delete data_oneof_.ndarray_;
    clear_has_data_oneof();
  }
}
inline  const ::google::protobuf::ListValue& DefaultData::ndarray() const {
  // @@protoc_insertion_point(field_get:seldon.protos.DefaultData.ndarray)
  return has_ndarray()
      ? *data_oneof_.ndarray_
      : ::google::protobuf::ListValue::default_instance();
}
inline ::google::protobuf::ListValue* DefaultData::mutable_ndarray() {
  if (!has_ndarray()) {
    clear_data_oneof();
    set_has_ndarray();
    data_oneof_.ndarray_ = new ::google::protobuf::ListValue;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.DefaultData.ndarray)
  return data_oneof_.ndarray_;
}
inline ::google::protobuf::ListValue* DefaultData::release_ndarray() {
  // @@protoc_insertion_point(field_release:seldon.protos.DefaultData.ndarray)
  if (has_ndarray()) {
    clear_has_data_oneof();
    ::google::protobuf::ListValue* temp = data_oneof_.ndarray_;
    data_oneof_.ndarray_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DefaultData::set_allocated_ndarray(::google::protobuf::ListValue* ndarray) {
  clear_data_oneof();
  if (ndarray) {
    set_has_ndarray();
    data_oneof_.ndarray_ = ndarray;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.DefaultData.ndarray)
}

// optional .tensorflow.TensorProto tftensor = 4;
inline bool DefaultData::has_tftensor() const {
  return data_oneof_case() == kTftensor;
}
inline void DefaultData::set_has_tftensor() {
  _oneof_case_[0] = kTftensor;
}
inline void DefaultData::clear_tftensor() {
  if (has_tftensor()) {
    delete data_oneof_.tftensor_;
    clear_has_data_oneof();
  }
}
inline  const ::tensorflow::TensorProto& DefaultData::tftensor() const {
  // @@protoc_insertion_point(field_get:seldon.protos.DefaultData.tftensor)
  return has_tftensor()
      ? *data_oneof_.tftensor_
      : ::tensorflow::TensorProto::default_instance();
}
inline ::tensorflow::TensorProto* DefaultData::mutable_tftensor() {
  if (!has_tftensor()) {
    clear_data_oneof();
    set_has_tftensor();
    data_oneof_.tftensor_ = new ::tensorflow::TensorProto;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.DefaultData.tftensor)
  return data_oneof_.tftensor_;
}
inline ::tensorflow::TensorProto* DefaultData::release_tftensor() {
  // @@protoc_insertion_point(field_release:seldon.protos.DefaultData.tftensor)
  if (has_tftensor()) {
    clear_has_data_oneof();
    ::tensorflow::TensorProto* temp = data_oneof_.tftensor_;
    data_oneof_.tftensor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DefaultData::set_allocated_tftensor(::tensorflow::TensorProto* tftensor) {
  clear_data_oneof();
  if (tftensor) {
    if (static_cast< ::tensorflow::TensorProto*>(tftensor)->GetArena() != NULL) {
      ::tensorflow::TensorProto* new_tftensor = new ::tensorflow::TensorProto;
      new_tftensor->CopyFrom(*tftensor);
      tftensor = new_tftensor;
    }
    set_has_tftensor();
    data_oneof_.tftensor_ = tftensor;
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.DefaultData.tftensor)
}

inline bool DefaultData::has_data_oneof() const {
  return data_oneof_case() != DATA_ONEOF_NOT_SET;
}
inline void DefaultData::clear_has_data_oneof() {
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}
inline DefaultData::DataOneofCase DefaultData::data_oneof_case() const {
  return DefaultData::DataOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Tensor

// repeated int32 shape = 1 [packed = true];
inline int Tensor::shape_size() const {
  return shape_.size();
}
inline void Tensor::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 Tensor::shape(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.Tensor.shape)
  return shape_.Get(index);
}
inline void Tensor::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:seldon.protos.Tensor.shape)
}
inline void Tensor::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:seldon.protos.Tensor.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Tensor::shape() const {
  // @@protoc_insertion_point(field_list:seldon.protos.Tensor.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Tensor::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.Tensor.shape)
  return &shape_;
}

// repeated double values = 2 [packed = true];
inline int Tensor::values_size() const {
  return values_.size();
}
inline void Tensor::clear_values() {
  values_.Clear();
}
inline double Tensor::values(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.Tensor.values)
  return values_.Get(index);
}
inline void Tensor::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:seldon.protos.Tensor.values)
}
inline void Tensor::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:seldon.protos.Tensor.values)
}
inline const ::google::protobuf::RepeatedField< double >&
Tensor::values() const {
  // @@protoc_insertion_point(field_list:seldon.protos.Tensor.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
Tensor::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.Tensor.values)
  return &values_;
}

// -------------------------------------------------------------------

// Meta

// optional string puid = 1;
inline void Meta::clear_puid() {
  puid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Meta::puid() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Meta.puid)
  return puid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Meta::set_puid(const ::std::string& value) {
  
  puid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.Meta.puid)
}
inline void Meta::set_puid(const char* value) {
  
  puid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.Meta.puid)
}
inline void Meta::set_puid(const char* value, size_t size) {
  
  puid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.Meta.puid)
}
inline ::std::string* Meta::mutable_puid() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.Meta.puid)
  return puid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Meta::release_puid() {
  // @@protoc_insertion_point(field_release:seldon.protos.Meta.puid)
  
  return puid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Meta::set_allocated_puid(::std::string* puid) {
  if (puid != NULL) {
    
  } else {
    
  }
  puid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), puid);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Meta.puid)
}

// map<string, .google.protobuf.Value> tags = 2;
inline int Meta::tags_size() const {
  return tags_.size();
}
inline void Meta::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::Value >&
Meta::tags() const {
  // @@protoc_insertion_point(field_map:seldon.protos.Meta.tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::Value >*
Meta::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.Meta.tags)
  return tags_.MutableMap();
}

// map<string, int32> routing = 3;
inline int Meta::routing_size() const {
  return routing_.size();
}
inline void Meta::clear_routing() {
  routing_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
Meta::routing() const {
  // @@protoc_insertion_point(field_map:seldon.protos.Meta.routing)
  return routing_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
Meta::mutable_routing() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.Meta.routing)
  return routing_.MutableMap();
}

// map<string, string> requestPath = 4;
inline int Meta::requestpath_size() const {
  return requestpath_.size();
}
inline void Meta::clear_requestpath() {
  requestpath_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Meta::requestpath() const {
  // @@protoc_insertion_point(field_map:seldon.protos.Meta.requestPath)
  return requestpath_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Meta::mutable_requestpath() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.Meta.requestPath)
  return requestpath_.MutableMap();
}

// repeated .seldon.protos.Metric metrics = 5;
inline int Meta::metrics_size() const {
  return metrics_.size();
}
inline void Meta::clear_metrics() {
  metrics_.Clear();
}
inline const ::seldon::protos::Metric& Meta::metrics(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.Meta.metrics)
  return metrics_.Get(index);
}
inline ::seldon::protos::Metric* Meta::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.Meta.metrics)
  return metrics_.Mutable(index);
}
inline ::seldon::protos::Metric* Meta::add_metrics() {
  // @@protoc_insertion_point(field_add:seldon.protos.Meta.metrics)
  return metrics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::seldon::protos::Metric >*
Meta::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.Meta.metrics)
  return &metrics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::seldon::protos::Metric >&
Meta::metrics() const {
  // @@protoc_insertion_point(field_list:seldon.protos.Meta.metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// Metric

// optional string key = 1;
inline void Metric::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Metric::key() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Metric.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.Metric.key)
}
inline void Metric::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.Metric.key)
}
inline void Metric::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.Metric.key)
}
inline ::std::string* Metric::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.Metric.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metric::release_key() {
  // @@protoc_insertion_point(field_release:seldon.protos.Metric.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Metric.key)
}

// optional .seldon.protos.Metric.MetricType type = 2;
inline void Metric::clear_type() {
  type_ = 0;
}
inline ::seldon::protos::Metric_MetricType Metric::type() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Metric.type)
  return static_cast< ::seldon::protos::Metric_MetricType >(type_);
}
inline void Metric::set_type(::seldon::protos::Metric_MetricType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:seldon.protos.Metric.type)
}

// optional float value = 3;
inline void Metric::clear_value() {
  value_ = 0;
}
inline float Metric::value() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Metric.value)
  return value_;
}
inline void Metric::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:seldon.protos.Metric.value)
}

// map<string, string> tags = 4;
inline int Metric::tags_size() const {
  return tags_.size();
}
inline void Metric::clear_tags() {
  tags_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Metric::tags() const {
  // @@protoc_insertion_point(field_map:seldon.protos.Metric.tags)
  return tags_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Metric::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.Metric.tags)
  return tags_.MutableMap();
}

// -------------------------------------------------------------------

// SeldonMessageList

// repeated .seldon.protos.SeldonMessage seldonMessages = 1;
inline int SeldonMessageList::seldonmessages_size() const {
  return seldonmessages_.size();
}
inline void SeldonMessageList::clear_seldonmessages() {
  seldonmessages_.Clear();
}
inline const ::seldon::protos::SeldonMessage& SeldonMessageList::seldonmessages(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageList.seldonMessages)
  return seldonmessages_.Get(index);
}
inline ::seldon::protos::SeldonMessage* SeldonMessageList::mutable_seldonmessages(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageList.seldonMessages)
  return seldonmessages_.Mutable(index);
}
inline ::seldon::protos::SeldonMessage* SeldonMessageList::add_seldonmessages() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonMessageList.seldonMessages)
  return seldonmessages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessage >*
SeldonMessageList::mutable_seldonmessages() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonMessageList.seldonMessages)
  return &seldonmessages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessage >&
SeldonMessageList::seldonmessages() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonMessageList.seldonMessages)
  return seldonmessages_;
}

// -------------------------------------------------------------------

// Status

// optional int32 code = 1;
inline void Status::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 Status::code() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Status.code)
  return code_;
}
inline void Status::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:seldon.protos.Status.code)
}

// optional string info = 2;
inline void Status::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Status::info() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Status.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.Status.info)
}
inline void Status::set_info(const char* value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.Status.info)
}
inline void Status::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.Status.info)
}
inline ::std::string* Status::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.Status.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_info() {
  // @@protoc_insertion_point(field_release:seldon.protos.Status.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Status.info)
}

// optional string reason = 3;
inline void Status::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Status::reason() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Status.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.Status.reason)
}
inline void Status::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.Status.reason)
}
inline void Status::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.Status.reason)
}
inline ::std::string* Status::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.Status.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_reason() {
  // @@protoc_insertion_point(field_release:seldon.protos.Status.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Status.reason)
}

// optional .seldon.protos.Status.StatusFlag status = 4;
inline void Status::clear_status() {
  status_ = 0;
}
inline ::seldon::protos::Status_StatusFlag Status::status() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Status.status)
  return static_cast< ::seldon::protos::Status_StatusFlag >(status_);
}
inline void Status::set_status(::seldon::protos::Status_StatusFlag value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:seldon.protos.Status.status)
}

// -------------------------------------------------------------------

// Feedback

// optional .seldon.protos.SeldonMessage request = 1;
inline bool Feedback::has_request() const {
  return !_is_default_instance_ && request_ != NULL;
}
inline void Feedback::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
inline const ::seldon::protos::SeldonMessage& Feedback::request() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Feedback.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::seldon::protos::SeldonMessage* Feedback::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::seldon::protos::SeldonMessage;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.Feedback.request)
  return request_;
}
inline ::seldon::protos::SeldonMessage* Feedback::release_request() {
  // @@protoc_insertion_point(field_release:seldon.protos.Feedback.request)
  
  ::seldon::protos::SeldonMessage* temp = request_;
  request_ = NULL;
  return temp;
}
inline void Feedback::set_allocated_request(::seldon::protos::SeldonMessage* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Feedback.request)
}

// optional .seldon.protos.SeldonMessage response = 2;
inline bool Feedback::has_response() const {
  return !_is_default_instance_ && response_ != NULL;
}
inline void Feedback::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::seldon::protos::SeldonMessage& Feedback::response() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Feedback.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::seldon::protos::SeldonMessage* Feedback::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::seldon::protos::SeldonMessage;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.Feedback.response)
  return response_;
}
inline ::seldon::protos::SeldonMessage* Feedback::release_response() {
  // @@protoc_insertion_point(field_release:seldon.protos.Feedback.response)
  
  ::seldon::protos::SeldonMessage* temp = response_;
  response_ = NULL;
  return temp;
}
inline void Feedback::set_allocated_response(::seldon::protos::SeldonMessage* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Feedback.response)
}

// optional float reward = 3;
inline void Feedback::clear_reward() {
  reward_ = 0;
}
inline float Feedback::reward() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Feedback.reward)
  return reward_;
}
inline void Feedback::set_reward(float value) {
  
  reward_ = value;
  // @@protoc_insertion_point(field_set:seldon.protos.Feedback.reward)
}

// optional .seldon.protos.SeldonMessage truth = 4;
inline bool Feedback::has_truth() const {
  return !_is_default_instance_ && truth_ != NULL;
}
inline void Feedback::clear_truth() {
  if (GetArenaNoVirtual() == NULL && truth_ != NULL) delete truth_;
  truth_ = NULL;
}
inline const ::seldon::protos::SeldonMessage& Feedback::truth() const {
  // @@protoc_insertion_point(field_get:seldon.protos.Feedback.truth)
  return truth_ != NULL ? *truth_ : *default_instance_->truth_;
}
inline ::seldon::protos::SeldonMessage* Feedback::mutable_truth() {
  
  if (truth_ == NULL) {
    truth_ = new ::seldon::protos::SeldonMessage;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.Feedback.truth)
  return truth_;
}
inline ::seldon::protos::SeldonMessage* Feedback::release_truth() {
  // @@protoc_insertion_point(field_release:seldon.protos.Feedback.truth)
  
  ::seldon::protos::SeldonMessage* temp = truth_;
  truth_ = NULL;
  return temp;
}
inline void Feedback::set_allocated_truth(::seldon::protos::SeldonMessage* truth) {
  delete truth_;
  truth_ = truth;
  if (truth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.Feedback.truth)
}

// -------------------------------------------------------------------

// RequestResponse

// optional .seldon.protos.SeldonMessage request = 1;
inline bool RequestResponse::has_request() const {
  return !_is_default_instance_ && request_ != NULL;
}
inline void RequestResponse::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
inline const ::seldon::protos::SeldonMessage& RequestResponse::request() const {
  // @@protoc_insertion_point(field_get:seldon.protos.RequestResponse.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::seldon::protos::SeldonMessage* RequestResponse::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::seldon::protos::SeldonMessage;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.RequestResponse.request)
  return request_;
}
inline ::seldon::protos::SeldonMessage* RequestResponse::release_request() {
  // @@protoc_insertion_point(field_release:seldon.protos.RequestResponse.request)
  
  ::seldon::protos::SeldonMessage* temp = request_;
  request_ = NULL;
  return temp;
}
inline void RequestResponse::set_allocated_request(::seldon::protos::SeldonMessage* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.RequestResponse.request)
}

// optional .seldon.protos.SeldonMessage response = 2;
inline bool RequestResponse::has_response() const {
  return !_is_default_instance_ && response_ != NULL;
}
inline void RequestResponse::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::seldon::protos::SeldonMessage& RequestResponse::response() const {
  // @@protoc_insertion_point(field_get:seldon.protos.RequestResponse.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::seldon::protos::SeldonMessage* RequestResponse::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::seldon::protos::SeldonMessage;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.RequestResponse.response)
  return response_;
}
inline ::seldon::protos::SeldonMessage* RequestResponse::release_response() {
  // @@protoc_insertion_point(field_release:seldon.protos.RequestResponse.response)
  
  ::seldon::protos::SeldonMessage* temp = response_;
  response_ = NULL;
  return temp;
}
inline void RequestResponse::set_allocated_response(::seldon::protos::SeldonMessage* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.RequestResponse.response)
}

// -------------------------------------------------------------------

// SeldonModelMetadataRequest

// optional string name = 1;
inline void SeldonModelMetadataRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeldonModelMetadataRequest::name() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadataRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeldonModelMetadataRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonModelMetadataRequest.name)
}
inline void SeldonModelMetadataRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonModelMetadataRequest.name)
}
inline void SeldonModelMetadataRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonModelMetadataRequest.name)
}
inline ::std::string* SeldonModelMetadataRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadataRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeldonModelMetadataRequest::release_name() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonModelMetadataRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeldonModelMetadataRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonModelMetadataRequest.name)
}

// -------------------------------------------------------------------

// SeldonMessageMetadata

// optional string messagetype = 1;
inline void SeldonMessageMetadata::clear_messagetype() {
  messagetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeldonMessageMetadata::messagetype() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.messagetype)
  return messagetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeldonMessageMetadata::set_messagetype(const ::std::string& value) {
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessageMetadata.messagetype)
}
inline void SeldonMessageMetadata::set_messagetype(const char* value) {
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessageMetadata.messagetype)
}
inline void SeldonMessageMetadata::set_messagetype(const char* value, size_t size) {
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessageMetadata.messagetype)
}
inline ::std::string* SeldonMessageMetadata::mutable_messagetype() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageMetadata.messagetype)
  return messagetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeldonMessageMetadata::release_messagetype() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessageMetadata.messagetype)
  
  return messagetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeldonMessageMetadata::set_allocated_messagetype(::std::string* messagetype) {
  if (messagetype != NULL) {
    
  } else {
    
  }
  messagetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagetype);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessageMetadata.messagetype)
}

// optional .google.protobuf.Value schema = 2;
inline bool SeldonMessageMetadata::has_schema() const {
  return !_is_default_instance_ && schema_ != NULL;
}
inline void SeldonMessageMetadata::clear_schema() {
  if (GetArenaNoVirtual() == NULL && schema_ != NULL) delete schema_;
  schema_ = NULL;
}
inline const ::google::protobuf::Value& SeldonMessageMetadata::schema() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.schema)
  return schema_ != NULL ? *schema_ : *default_instance_->schema_;
}
inline ::google::protobuf::Value* SeldonMessageMetadata::mutable_schema() {
  
  if (schema_ == NULL) {
    schema_ = new ::google::protobuf::Value;
  }
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageMetadata.schema)
  return schema_;
}
inline ::google::protobuf::Value* SeldonMessageMetadata::release_schema() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessageMetadata.schema)
  
  ::google::protobuf::Value* temp = schema_;
  schema_ = NULL;
  return temp;
}
inline void SeldonMessageMetadata::set_allocated_schema(::google::protobuf::Value* schema) {
  delete schema_;
  schema_ = schema;
  if (schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessageMetadata.schema)
}

// optional string name = 3;
inline void SeldonMessageMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeldonMessageMetadata::name() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeldonMessageMetadata::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessageMetadata.name)
}
inline void SeldonMessageMetadata::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessageMetadata.name)
}
inline void SeldonMessageMetadata::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessageMetadata.name)
}
inline ::std::string* SeldonMessageMetadata::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeldonMessageMetadata::release_name() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessageMetadata.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeldonMessageMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessageMetadata.name)
}

// optional string datatype = 4;
inline void SeldonMessageMetadata::clear_datatype() {
  datatype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeldonMessageMetadata::datatype() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.datatype)
  return datatype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeldonMessageMetadata::set_datatype(const ::std::string& value) {
  
  datatype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessageMetadata.datatype)
}
inline void SeldonMessageMetadata::set_datatype(const char* value) {
  
  datatype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonMessageMetadata.datatype)
}
inline void SeldonMessageMetadata::set_datatype(const char* value, size_t size) {
  
  datatype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonMessageMetadata.datatype)
}
inline ::std::string* SeldonMessageMetadata::mutable_datatype() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonMessageMetadata.datatype)
  return datatype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeldonMessageMetadata::release_datatype() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonMessageMetadata.datatype)
  
  return datatype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeldonMessageMetadata::set_allocated_datatype(::std::string* datatype) {
  if (datatype != NULL) {
    
  } else {
    
  }
  datatype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datatype);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonMessageMetadata.datatype)
}

// repeated int64 shape = 5;
inline int SeldonMessageMetadata::shape_size() const {
  return shape_.size();
}
inline void SeldonMessageMetadata::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int64 SeldonMessageMetadata::shape(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonMessageMetadata.shape)
  return shape_.Get(index);
}
inline void SeldonMessageMetadata::set_shape(int index, ::google::protobuf::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonMessageMetadata.shape)
}
inline void SeldonMessageMetadata::add_shape(::google::protobuf::int64 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonMessageMetadata.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SeldonMessageMetadata::shape() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonMessageMetadata.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SeldonMessageMetadata::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonMessageMetadata.shape)
  return &shape_;
}

// -------------------------------------------------------------------

// SeldonModelMetadata

// optional string name = 1;
inline void SeldonModelMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeldonModelMetadata::name() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeldonModelMetadata::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonModelMetadata.name)
}
inline void SeldonModelMetadata::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonModelMetadata.name)
}
inline void SeldonModelMetadata::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonModelMetadata.name)
}
inline ::std::string* SeldonModelMetadata::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeldonModelMetadata::release_name() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonModelMetadata.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeldonModelMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonModelMetadata.name)
}

// repeated string versions = 2;
inline int SeldonModelMetadata::versions_size() const {
  return versions_.size();
}
inline void SeldonModelMetadata::clear_versions() {
  versions_.Clear();
}
inline const ::std::string& SeldonModelMetadata::versions(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.versions)
  return versions_.Get(index);
}
inline ::std::string* SeldonModelMetadata::mutable_versions(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.versions)
  return versions_.Mutable(index);
}
inline void SeldonModelMetadata::set_versions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonModelMetadata.versions)
  versions_.Mutable(index)->assign(value);
}
inline void SeldonModelMetadata::set_versions(int index, const char* value) {
  versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonModelMetadata.versions)
}
inline void SeldonModelMetadata::set_versions(int index, const char* value, size_t size) {
  versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonModelMetadata.versions)
}
inline ::std::string* SeldonModelMetadata::add_versions() {
  // @@protoc_insertion_point(field_add_mutable:seldon.protos.SeldonModelMetadata.versions)
  return versions_.Add();
}
inline void SeldonModelMetadata::add_versions(const ::std::string& value) {
  versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonModelMetadata.versions)
}
inline void SeldonModelMetadata::add_versions(const char* value) {
  versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:seldon.protos.SeldonModelMetadata.versions)
}
inline void SeldonModelMetadata::add_versions(const char* value, size_t size) {
  versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:seldon.protos.SeldonModelMetadata.versions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SeldonModelMetadata::versions() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonModelMetadata.versions)
  return versions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SeldonModelMetadata::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonModelMetadata.versions)
  return &versions_;
}

// optional string platform = 3;
inline void SeldonModelMetadata::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeldonModelMetadata::platform() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.platform)
  return platform_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeldonModelMetadata::set_platform(const ::std::string& value) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonModelMetadata.platform)
}
inline void SeldonModelMetadata::set_platform(const char* value) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonModelMetadata.platform)
}
inline void SeldonModelMetadata::set_platform(const char* value, size_t size) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonModelMetadata.platform)
}
inline ::std::string* SeldonModelMetadata::mutable_platform() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeldonModelMetadata::release_platform() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonModelMetadata.platform)
  
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeldonModelMetadata::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    
  } else {
    
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonModelMetadata.platform)
}

// repeated .seldon.protos.SeldonMessageMetadata inputs = 4;
inline int SeldonModelMetadata::inputs_size() const {
  return inputs_.size();
}
inline void SeldonModelMetadata::clear_inputs() {
  inputs_.Clear();
}
inline const ::seldon::protos::SeldonMessageMetadata& SeldonModelMetadata::inputs(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.inputs)
  return inputs_.Get(index);
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonModelMetadata::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.inputs)
  return inputs_.Mutable(index);
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonModelMetadata::add_inputs() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonModelMetadata.inputs)
  return inputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
SeldonModelMetadata::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonModelMetadata.inputs)
  return &inputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
SeldonModelMetadata::inputs() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonModelMetadata.inputs)
  return inputs_;
}

// repeated .seldon.protos.SeldonMessageMetadata outputs = 5;
inline int SeldonModelMetadata::outputs_size() const {
  return outputs_.size();
}
inline void SeldonModelMetadata::clear_outputs() {
  outputs_.Clear();
}
inline const ::seldon::protos::SeldonMessageMetadata& SeldonModelMetadata::outputs(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonModelMetadata.outputs)
  return outputs_.Get(index);
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonModelMetadata::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonModelMetadata.outputs)
  return outputs_.Mutable(index);
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonModelMetadata::add_outputs() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonModelMetadata.outputs)
  return outputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
SeldonModelMetadata::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonModelMetadata.outputs)
  return &outputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
SeldonModelMetadata::outputs() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonModelMetadata.outputs)
  return outputs_;
}

// map<string, string> custom = 6;
inline int SeldonModelMetadata::custom_size() const {
  return custom_.size();
}
inline void SeldonModelMetadata::clear_custom() {
  custom_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SeldonModelMetadata::custom() const {
  // @@protoc_insertion_point(field_map:seldon.protos.SeldonModelMetadata.custom)
  return custom_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SeldonModelMetadata::mutable_custom() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.SeldonModelMetadata.custom)
  return custom_.MutableMap();
}

// -------------------------------------------------------------------

// SeldonGraphMetadata

// optional string name = 1;
inline void SeldonGraphMetadata::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeldonGraphMetadata::name() const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonGraphMetadata.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeldonGraphMetadata::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seldon.protos.SeldonGraphMetadata.name)
}
inline void SeldonGraphMetadata::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seldon.protos.SeldonGraphMetadata.name)
}
inline void SeldonGraphMetadata::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seldon.protos.SeldonGraphMetadata.name)
}
inline ::std::string* SeldonGraphMetadata::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonGraphMetadata.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeldonGraphMetadata::release_name() {
  // @@protoc_insertion_point(field_release:seldon.protos.SeldonGraphMetadata.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeldonGraphMetadata::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:seldon.protos.SeldonGraphMetadata.name)
}

// map<string, .seldon.protos.SeldonModelMetadata> models = 2;
inline int SeldonGraphMetadata::models_size() const {
  return models_.size();
}
inline void SeldonGraphMetadata::clear_models() {
  models_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >&
SeldonGraphMetadata::models() const {
  // @@protoc_insertion_point(field_map:seldon.protos.SeldonGraphMetadata.models)
  return models_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::seldon::protos::SeldonModelMetadata >*
SeldonGraphMetadata::mutable_models() {
  // @@protoc_insertion_point(field_mutable_map:seldon.protos.SeldonGraphMetadata.models)
  return models_.MutableMap();
}

// repeated .seldon.protos.SeldonMessageMetadata inputs = 3;
inline int SeldonGraphMetadata::inputs_size() const {
  return inputs_.size();
}
inline void SeldonGraphMetadata::clear_inputs() {
  inputs_.Clear();
}
inline const ::seldon::protos::SeldonMessageMetadata& SeldonGraphMetadata::inputs(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonGraphMetadata.inputs)
  return inputs_.Get(index);
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonGraphMetadata::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonGraphMetadata.inputs)
  return inputs_.Mutable(index);
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonGraphMetadata::add_inputs() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonGraphMetadata.inputs)
  return inputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
SeldonGraphMetadata::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonGraphMetadata.inputs)
  return &inputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
SeldonGraphMetadata::inputs() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonGraphMetadata.inputs)
  return inputs_;
}

// repeated .seldon.protos.SeldonMessageMetadata outputs = 4;
inline int SeldonGraphMetadata::outputs_size() const {
  return outputs_.size();
}
inline void SeldonGraphMetadata::clear_outputs() {
  outputs_.Clear();
}
inline const ::seldon::protos::SeldonMessageMetadata& SeldonGraphMetadata::outputs(int index) const {
  // @@protoc_insertion_point(field_get:seldon.protos.SeldonGraphMetadata.outputs)
  return outputs_.Get(index);
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonGraphMetadata::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:seldon.protos.SeldonGraphMetadata.outputs)
  return outputs_.Mutable(index);
}
inline ::seldon::protos::SeldonMessageMetadata* SeldonGraphMetadata::add_outputs() {
  // @@protoc_insertion_point(field_add:seldon.protos.SeldonGraphMetadata.outputs)
  return outputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >*
SeldonGraphMetadata::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:seldon.protos.SeldonGraphMetadata.outputs)
  return &outputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::seldon::protos::SeldonMessageMetadata >&
SeldonGraphMetadata::outputs() const {
  // @@protoc_insertion_point(field_list:seldon.protos.SeldonGraphMetadata.outputs)
  return outputs_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace seldon

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::seldon::protos::Metric_MetricType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::seldon::protos::Metric_MetricType>() {
  return ::seldon::protos::Metric_MetricType_descriptor();
}
template <> struct is_proto_enum< ::seldon::protos::Status_StatusFlag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::seldon::protos::Status_StatusFlag>() {
  return ::seldon::protos::Status_StatusFlag_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_prediction_2eproto__INCLUDED
