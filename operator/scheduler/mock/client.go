// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go
//
// Generated by this command:
//
//	mockgen -source=./client.go -destination=./mock/client.go -package=mock scheduler Client
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	scheduler "github.com/seldonio/seldon-core/apis/go/v2/mlops/scheduler"
	v1alpha1 "github.com/seldonio/seldon-core/operator/v2/apis/mlops/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// LoadModel mocks base method.
func (m *MockClient) LoadModel(ctx context.Context, model *v1alpha1.Model, grpcClient scheduler.SchedulerClient) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadModel", ctx, model, grpcClient)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadModel indicates an expected call of LoadModel.
func (mr *MockClientMockRecorder) LoadModel(ctx, model, grpcClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadModel", reflect.TypeOf((*MockClient)(nil).LoadModel), ctx, model, grpcClient)
}

// LoadPipeline mocks base method.
func (m *MockClient) LoadPipeline(ctx context.Context, pipeline *v1alpha1.Pipeline, grpcClient scheduler.SchedulerClient) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPipeline", ctx, pipeline, grpcClient)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadPipeline indicates an expected call of LoadPipeline.
func (mr *MockClientMockRecorder) LoadPipeline(ctx, pipeline, grpcClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPipeline", reflect.TypeOf((*MockClient)(nil).LoadPipeline), ctx, pipeline, grpcClient)
}

// RemoveConnection mocks base method.
func (m *MockClient) RemoveConnection(namespace string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveConnection", namespace)
}

// RemoveConnection indicates an expected call of RemoveConnection.
func (mr *MockClientMockRecorder) RemoveConnection(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveConnection", reflect.TypeOf((*MockClient)(nil).RemoveConnection), namespace)
}

// ServerNotify mocks base method.
func (m *MockClient) ServerNotify(ctx context.Context, grpcClient scheduler.SchedulerClient, servers []v1alpha1.Server, isFirstSync bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerNotify", ctx, grpcClient, servers, isFirstSync)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerNotify indicates an expected call of ServerNotify.
func (mr *MockClientMockRecorder) ServerNotify(ctx, grpcClient, servers, isFirstSync any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerNotify", reflect.TypeOf((*MockClient)(nil).ServerNotify), ctx, grpcClient, servers, isFirstSync)
}

// StartExperiment mocks base method.
func (m *MockClient) StartExperiment(ctx context.Context, experiment *v1alpha1.Experiment, grpcClient scheduler.SchedulerClient) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExperiment", ctx, experiment, grpcClient)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExperiment indicates an expected call of StartExperiment.
func (mr *MockClientMockRecorder) StartExperiment(ctx, experiment, grpcClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExperiment", reflect.TypeOf((*MockClient)(nil).StartExperiment), ctx, experiment, grpcClient)
}

// StopExperiment mocks base method.
func (m *MockClient) StopExperiment(ctx context.Context, experiment *v1alpha1.Experiment, grpcClient scheduler.SchedulerClient) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopExperiment", ctx, experiment, grpcClient)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopExperiment indicates an expected call of StopExperiment.
func (mr *MockClientMockRecorder) StopExperiment(ctx, experiment, grpcClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExperiment", reflect.TypeOf((*MockClient)(nil).StopExperiment), ctx, experiment, grpcClient)
}

// SubscribeControlPlaneEvents mocks base method.
func (m *MockClient) SubscribeControlPlaneEvents(ctx context.Context, grpcClient scheduler.SchedulerClient, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeControlPlaneEvents", ctx, grpcClient, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeControlPlaneEvents indicates an expected call of SubscribeControlPlaneEvents.
func (mr *MockClientMockRecorder) SubscribeControlPlaneEvents(ctx, grpcClient, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeControlPlaneEvents", reflect.TypeOf((*MockClient)(nil).SubscribeControlPlaneEvents), ctx, grpcClient, namespace)
}

// SubscribeExperimentEvents mocks base method.
func (m *MockClient) SubscribeExperimentEvents(ctx context.Context, grpcClient scheduler.SchedulerClient, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeExperimentEvents", ctx, grpcClient, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeExperimentEvents indicates an expected call of SubscribeExperimentEvents.
func (mr *MockClientMockRecorder) SubscribeExperimentEvents(ctx, grpcClient, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeExperimentEvents", reflect.TypeOf((*MockClient)(nil).SubscribeExperimentEvents), ctx, grpcClient, namespace)
}

// SubscribeModelEvents mocks base method.
func (m *MockClient) SubscribeModelEvents(ctx context.Context, grpcClient scheduler.SchedulerClient, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeModelEvents", ctx, grpcClient, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeModelEvents indicates an expected call of SubscribeModelEvents.
func (mr *MockClientMockRecorder) SubscribeModelEvents(ctx, grpcClient, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeModelEvents", reflect.TypeOf((*MockClient)(nil).SubscribeModelEvents), ctx, grpcClient, namespace)
}

// SubscribePipelineEvents mocks base method.
func (m *MockClient) SubscribePipelineEvents(ctx context.Context, grpcClient scheduler.SchedulerClient, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribePipelineEvents", ctx, grpcClient, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribePipelineEvents indicates an expected call of SubscribePipelineEvents.
func (mr *MockClientMockRecorder) SubscribePipelineEvents(ctx, grpcClient, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribePipelineEvents", reflect.TypeOf((*MockClient)(nil).SubscribePipelineEvents), ctx, grpcClient, namespace)
}

// SubscribeServerEvents mocks base method.
func (m *MockClient) SubscribeServerEvents(ctx context.Context, grpcClient scheduler.SchedulerClient, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeServerEvents", ctx, grpcClient, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeServerEvents indicates an expected call of SubscribeServerEvents.
func (mr *MockClientMockRecorder) SubscribeServerEvents(ctx, grpcClient, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeServerEvents", reflect.TypeOf((*MockClient)(nil).SubscribeServerEvents), ctx, grpcClient, namespace)
}

// UnloadModel mocks base method.
func (m *MockClient) UnloadModel(ctx context.Context, model *v1alpha1.Model, grpcClient scheduler.SchedulerClient) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnloadModel", ctx, model, grpcClient)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnloadModel indicates an expected call of UnloadModel.
func (mr *MockClientMockRecorder) UnloadModel(ctx, model, grpcClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnloadModel", reflect.TypeOf((*MockClient)(nil).UnloadModel), ctx, model, grpcClient)
}

// UnloadPipeline mocks base method.
func (m *MockClient) UnloadPipeline(ctx context.Context, pipeline *v1alpha1.Pipeline) (error, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnloadPipeline", ctx, pipeline)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// UnloadPipeline indicates an expected call of UnloadPipeline.
func (mr *MockClientMockRecorder) UnloadPipeline(ctx, pipeline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnloadPipeline", reflect.TypeOf((*MockClient)(nil).UnloadPipeline), ctx, pipeline)
}
